
Tuner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000130fc  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00016734  08013240  08013240  00014240  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08029974  08029974  0002a974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802997c  0802997c  0002a97c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08029980  08029980  0002a980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000003e8  20000008  08029984  0002b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  200003f0  08029d6c  0002b3f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000428  08029da1  0002b428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006868  2000043c  08029db2  0002b43c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006ca4  08029db2  0002bca4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002ca67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0002d000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0002d000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08029db2  0002c1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00037279  00000000  00000000  0002ca97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00007695  00000000  00000000  00063d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003338  00000000  00000000  0006b3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002715  00000000  00000000  0006e6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00030e31  00000000  00000000  00070df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003c128  00000000  00000000  000a1c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011194e  00000000  00000000  000ddd4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001ef69c  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000ea7c  00000000  00000000  001ef6e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000061  00000000  00000000  001fe15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000043c 	.word	0x2000043c
 800015c:	00000000 	.word	0x00000000
 8000160:	08013224 	.word	0x08013224

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000440 	.word	0x20000440
 800017c:	08013224 	.word	0x08013224

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000bf8:	b5b0      	push	{r4, r5, r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <APPD_EnableCPU2+0x34>)
 8000c00:	1d3c      	adds	r4, r7, #4
 8000c02:	461d      	mov	r5, r3
 8000c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c0c:	c403      	stmia	r4!, {r0, r1}
 8000c0e:	8022      	strh	r2, [r4, #0]
 8000c10:	3402      	adds	r4, #2
 8000c12:	0c13      	lsrs	r3, r2, #16
 8000c14:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000c16:	f00d fb0b 	bl	800e230 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f00c fd9c 	bl	800d75a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000c22:	bf00      	nop
}
 8000c24:	3720      	adds	r7, #32
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bdb0      	pop	{r4, r5, r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	08013240 	.word	0x08013240

08000c30 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000c38:	4b07      	ldr	r3, [pc, #28]	@ (8000c58 <LL_C2_PWR_SetPowerMode+0x28>)
 8000c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c3e:	f023 0207 	bic.w	r2, r3, #7
 8000c42:	4905      	ldr	r1, [pc, #20]	@ (8000c58 <LL_C2_PWR_SetPowerMode+0x28>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	58000400 	.word	0x58000400

08000c5c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <LL_EXTI_EnableIT_32_63+0x24>)
 8000c66:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000c6a:	4905      	ldr	r1, [pc, #20]	@ (8000c80 <LL_EXTI_EnableIT_32_63+0x24>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	58000800 	.word	0x58000800

08000c84 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000c8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c90:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000c92:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000c96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c9e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	021b      	lsls	r3, r3, #8
 8000ca6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000caa:	4313      	orrs	r3, r2
 8000cac:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	cafecafe 	.word	0xcafecafe

08000cc0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000cc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000cd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	608b      	str	r3, [r1, #8]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000cec:	4b04      	ldr	r3, [pc, #16]	@ (8000d00 <LL_DBGMCU_GetDeviceID+0x18>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e0042000 	.word	0xe0042000

08000d04 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000d08:	4b04      	ldr	r3, [pc, #16]	@ (8000d1c <LL_DBGMCU_GetRevisionID+0x18>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	0c1b      	lsrs	r3, r3, #16
 8000d0e:	b29b      	uxth	r3, r3
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e0042000 	.word	0xe0042000

08000d20 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000d24:	4b05      	ldr	r3, [pc, #20]	@ (8000d3c <LL_LPM_EnableSleep+0x1c>)
 8000d26:	691b      	ldr	r3, [r3, #16]
 8000d28:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <LL_LPM_EnableSleep+0x1c>)
 8000d2a:	f023 0304 	bic.w	r3, r3, #4
 8000d2e:	6113      	str	r3, [r2, #16]
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	22ff      	movs	r2, #255	@ 0xff
 8000d4c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	22ca      	movs	r2, #202	@ 0xca
 8000d66:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2253      	movs	r2, #83	@ 0x53
 8000d6c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
 8000d82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	f023 0207 	bic.w	r2, r3, #7
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	609a      	str	r2, [r3, #8]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000da4:	4b04      	ldr	r3, [pc, #16]	@ (8000db8 <MX_APPE_Config+0x18>)
 8000da6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000daa:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000dac:	f000 f824 	bl	8000df8 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000db0:	f000 f829 	bl	8000e06 <Config_HSE>

  return;
 8000db4:	bf00      	nop
}
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	58004000 	.word	0x58004000

08000dbc <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000dc0:	f000 f835 	bl	8000e2e <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000dc4:	f000 f84e 	bl	8000e64 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000dc8:	4903      	ldr	r1, [pc, #12]	@ (8000dd8 <MX_APPE_Init+0x1c>)
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f000 fd8e 	bl	80018ec <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000dd0:	f000 f856 	bl	8000e80 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000dd4:	bf00      	nop
}
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20006688 	.word	0x20006688

08000ddc <Init_Smps>:

void Init_Smps(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000de0:	bf00      	nop
}
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <Init_Exti>:

void Init_Exti(void)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000dee:	2050      	movs	r0, #80	@ 0x50
 8000df0:	f7ff ff34 	bl	8000c5c <LL_EXTI_EnableIT_32_63>

  return;
 8000df4:	bf00      	nop
}
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000dfc:	bf00      	nop
}
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f00d fa9b 	bl	800e348 <OTP_Read>
 8000e12:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d005      	beq.n	8000e26 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	799b      	ldrb	r3, [r3, #6]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff30 	bl	8000c84 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
}
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <System_Init>:

static void System_Init(void)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	af00      	add	r7, sp, #0
  Init_Smps();
 8000e32:	f7ff ffd3 	bl	8000ddc <Init_Smps>

  Init_Exti();
 8000e36:	f7ff ffd8 	bl	8000dea <Init_Exti>

  Init_Rtc();
 8000e3a:	f000 f803 	bl	8000e44 <Init_Rtc>

  return;
 8000e3e:	bf00      	nop
}
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000e48:	4805      	ldr	r0, [pc, #20]	@ (8000e60 <Init_Rtc+0x1c>)
 8000e4a:	f7ff ff86 	bl	8000d5a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4803      	ldr	r0, [pc, #12]	@ (8000e60 <Init_Rtc+0x1c>)
 8000e52:	f7ff ff92 	bl	8000d7a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000e56:	4802      	ldr	r0, [pc, #8]	@ (8000e60 <Init_Rtc+0x1c>)
 8000e58:	f7ff ff72 	bl	8000d40 <LL_RTC_EnableWriteProtection>

  return;
 8000e5c:	bf00      	nop
}
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40002800 	.word	0x40002800

08000e64 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000e68:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000e6c:	f7ff ff28 	bl	8000cc0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000e70:	f00e fa96 	bl	800f3a0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000e74:	2004      	movs	r0, #4
 8000e76:	f7ff fedb 	bl	8000c30 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000e7a:	bf00      	nop
}
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000e86:	f00d f81d 	bl	800dec4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000e8a:	4a11      	ldr	r2, [pc, #68]	@ (8000ed0 <appe_Tl_Init+0x50>)
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2004      	movs	r0, #4
 8000e90:	f00e fbc4 	bl	800f61c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <appe_Tl_Init+0x54>)
 8000e96:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed8 <appe_Tl_Init+0x58>)
 8000e9a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480e      	ldr	r0, [pc, #56]	@ (8000edc <appe_Tl_Init+0x5c>)
 8000ea2:	f00c fed1 	bl	800dc48 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <appe_Tl_Init+0x60>)
 8000ea8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <appe_Tl_Init+0x64>)
 8000eac:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <appe_Tl_Init+0x68>)
 8000eb0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000eb2:	f240 533c 	movw	r3, #1340	@ 0x53c
 8000eb6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000eb8:	f107 0308 	add.w	r3, r7, #8
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f00d f943 	bl	800e148 <TL_MM_Init>

  TL_Enable();
 8000ec2:	f00c fff9 	bl	800deb8 <TL_Enable>

  return;
 8000ec6:	bf00      	nop
}
 8000ec8:	3720      	adds	r7, #32
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	0800dc81 	.word	0x0800dc81
 8000ed4:	20030734 	.word	0x20030734
 8000ed8:	08000eed 	.word	0x08000eed
 8000edc:	08000f05 	.word	0x08000f05
 8000ee0:	2003094c 	.word	0x2003094c
 8000ee4:	20030840 	.word	0x20030840
 8000ee8:	200301f8 	.word	0x200301f8

08000eec <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000ef6:	bf00      	nop
}
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	330b      	adds	r3, #11
 8000f12:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8000f1e:	2b07      	cmp	r3, #7
 8000f20:	d81f      	bhi.n	8000f62 <APPE_SysUserEvtRx+0x5e>
 8000f22:	a201      	add	r2, pc, #4	@ (adr r2, 8000f28 <APPE_SysUserEvtRx+0x24>)
 8000f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f28:	08000f49 	.word	0x08000f49
 8000f2c:	08000f5b 	.word	0x08000f5b
 8000f30:	08000f63 	.word	0x08000f63
 8000f34:	08000f63 	.word	0x08000f63
 8000f38:	08000f63 	.word	0x08000f63
 8000f3c:	08000f63 	.word	0x08000f63
 8000f40:	08000f63 	.word	0x08000f63
 8000f44:	08000f63 	.word	0x08000f63
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f00c fc31 	bl	800d7b4 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 f81b 	bl	8000f8e <APPE_SysEvtReadyProcessing>
    break;
 8000f58:	e004      	b.n	8000f64 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 f806 	bl	8000f6c <APPE_SysEvtError>
    break;
 8000f60:	e000      	b.n	8000f64 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000f62:	bf00      	nop
  }

  return;
 8000f64:	bf00      	nop
}
 8000f66:	3720      	adds	r7, #32
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	330b      	adds	r3, #11
 8000f7a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	3302      	adds	r3, #2
 8000f80:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000f82:	bf00      	nop
}
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b08a      	sub	sp, #40	@ 0x28
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	330b      	adds	r3, #11
 8000fb2:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d11d      	bne.n	8000ffe <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000fc2:	f7ff fe19 	bl	8000bf8 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000fca:	237f      	movs	r3, #127	@ 0x7f
 8000fcc:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000fce:	f7ff fe99 	bl	8000d04 <LL_DBGMCU_GetRevisionID>
 8000fd2:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000fda:	f7ff fe85 	bl	8000ce8 <LL_DBGMCU_GetDeviceID>
 8000fde:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000fe0:	6a3b      	ldr	r3, [r7, #32]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000fe6:	f107 0308 	add.w	r3, r7, #8
 8000fea:	4618      	mov	r0, r3
 8000fec:	f00c fbcc 	bl	800d788 <SHCI_C2_Config>

    APP_BLE_Init();
 8000ff0:	f00d fab4 	bl	800e55c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f00e f9e4 	bl	800f3c4 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000ffc:	e007      	b.n	800100e <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d103      	bne.n	800100e <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
  return;
 800100c:	bf00      	nop
 800100e:	bf00      	nop
}
 8001010:	3728      	adds	r7, #40	@ 0x28
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b084      	sub	sp, #16
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800101e:	f005 fb07 	bl	8006630 <HAL_GetTick>
 8001022:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800102e:	d00a      	beq.n	8001046 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001030:	f005 fb16 	bl	8006660 <HAL_GetTickFreq>
 8001034:	4603      	mov	r3, r0
 8001036:	461a      	mov	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4413      	add	r3, r2
 800103c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800103e:	e002      	b.n	8001046 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001040:	f7ff fe6e 	bl	8000d20 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8001044:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001046:	f005 faf3 	bl	8006630 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	429a      	cmp	r2, r3
 8001054:	d8f4      	bhi.n	8001040 <HAL_Delay+0x2a>
  }
}
 8001056:	bf00      	nop
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f00e f9dc 	bl	800f424 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001074:	bf00      	nop
}
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001086:	2100      	movs	r1, #0
 8001088:	2004      	movs	r0, #4
 800108a:	f00e fae9 	bl	800f660 <UTIL_SEQ_SetTask>
  return;
 800108e:	bf00      	nop
}
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800109e:	2002      	movs	r0, #2
 80010a0:	f00e fb4a 	bl	800f738 <UTIL_SEQ_SetEvt>
  return;
 80010a4:	bf00      	nop
}
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80010b4:	2002      	movs	r0, #2
 80010b6:	f00e fb5f 	bl	800f778 <UTIL_SEQ_WaitEvt>
  return;
 80010ba:	bf00      	nop
}
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <LL_EXTI_EnableIT_0_31>:
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <LL_EXTI_EnableIT_0_31+0x24>)
 80010ce:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80010d2:	4905      	ldr	r1, [pc, #20]	@ (80010e8 <LL_EXTI_EnableIT_0_31+0x24>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	58000800 	.word	0x58000800

080010ec <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80010f4:	4b05      	ldr	r3, [pc, #20]	@ (800110c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4904      	ldr	r1, [pc, #16]	@ (800110c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	600b      	str	r3, [r1, #0]

}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	58000800 	.word	0x58000800

08001110 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001116:	4b0d      	ldr	r3, [pc, #52]	@ (800114c <ReadRtcSsrValue+0x3c>)
 8001118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800111a:	b29b      	uxth	r3, r3
 800111c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800111e:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <ReadRtcSsrValue+0x3c>)
 8001120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001122:	b29b      	uxth	r3, r3
 8001124:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001126:	e005      	b.n	8001134 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800112c:	4b07      	ldr	r3, [pc, #28]	@ (800114c <ReadRtcSsrValue+0x3c>)
 800112e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001130:	b29b      	uxth	r3, r3
 8001132:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	d1f5      	bne.n	8001128 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800113c:	683b      	ldr	r3, [r7, #0]
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40002800 	.word	0x40002800

08001150 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	460a      	mov	r2, r1
 800115a:	71fb      	strb	r3, [r7, #7]
 800115c:	4613      	mov	r3, r2
 800115e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001160:	79ba      	ldrb	r2, [r7, #6]
 8001162:	491d      	ldr	r1, [pc, #116]	@ (80011d8 <LinkTimerAfter+0x88>)
 8001164:	4613      	mov	r3, r2
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	4413      	add	r3, r2
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	440b      	add	r3, r1
 800116e:	3315      	adds	r3, #21
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	2b06      	cmp	r3, #6
 8001178:	d009      	beq.n	800118e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800117a:	7bfa      	ldrb	r2, [r7, #15]
 800117c:	4916      	ldr	r1, [pc, #88]	@ (80011d8 <LinkTimerAfter+0x88>)
 800117e:	4613      	mov	r3, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	4413      	add	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	440b      	add	r3, r1
 8001188:	3314      	adds	r3, #20
 800118a:	79fa      	ldrb	r2, [r7, #7]
 800118c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800118e:	79fa      	ldrb	r2, [r7, #7]
 8001190:	4911      	ldr	r1, [pc, #68]	@ (80011d8 <LinkTimerAfter+0x88>)
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	440b      	add	r3, r1
 800119c:	3315      	adds	r3, #21
 800119e:	7bfa      	ldrb	r2, [r7, #15]
 80011a0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80011a2:	79fa      	ldrb	r2, [r7, #7]
 80011a4:	490c      	ldr	r1, [pc, #48]	@ (80011d8 <LinkTimerAfter+0x88>)
 80011a6:	4613      	mov	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	4413      	add	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	440b      	add	r3, r1
 80011b0:	3314      	adds	r3, #20
 80011b2:	79ba      	ldrb	r2, [r7, #6]
 80011b4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80011b6:	79ba      	ldrb	r2, [r7, #6]
 80011b8:	4907      	ldr	r1, [pc, #28]	@ (80011d8 <LinkTimerAfter+0x88>)
 80011ba:	4613      	mov	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	4413      	add	r3, r2
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	440b      	add	r3, r1
 80011c4:	3315      	adds	r3, #21
 80011c6:	79fa      	ldrb	r2, [r7, #7]
 80011c8:	701a      	strb	r2, [r3, #0]

  return;
 80011ca:	bf00      	nop
}
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000458 	.word	0x20000458

080011dc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	460a      	mov	r2, r1
 80011e6:	71fb      	strb	r3, [r7, #7]
 80011e8:	4613      	mov	r3, r2
 80011ea:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80011ec:	4b29      	ldr	r3, [pc, #164]	@ (8001294 <LinkTimerBefore+0xb8>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	79ba      	ldrb	r2, [r7, #6]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d032      	beq.n	800125e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80011f8:	79ba      	ldrb	r2, [r7, #6]
 80011fa:	4927      	ldr	r1, [pc, #156]	@ (8001298 <LinkTimerBefore+0xbc>)
 80011fc:	4613      	mov	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4413      	add	r3, r2
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	440b      	add	r3, r1
 8001206:	3314      	adds	r3, #20
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	4922      	ldr	r1, [pc, #136]	@ (8001298 <LinkTimerBefore+0xbc>)
 8001210:	4613      	mov	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	440b      	add	r3, r1
 800121a:	3315      	adds	r3, #21
 800121c:	79fa      	ldrb	r2, [r7, #7]
 800121e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001220:	79fa      	ldrb	r2, [r7, #7]
 8001222:	491d      	ldr	r1, [pc, #116]	@ (8001298 <LinkTimerBefore+0xbc>)
 8001224:	4613      	mov	r3, r2
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4413      	add	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	440b      	add	r3, r1
 800122e:	3315      	adds	r3, #21
 8001230:	79ba      	ldrb	r2, [r7, #6]
 8001232:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001234:	79fa      	ldrb	r2, [r7, #7]
 8001236:	4918      	ldr	r1, [pc, #96]	@ (8001298 <LinkTimerBefore+0xbc>)
 8001238:	4613      	mov	r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	4413      	add	r3, r2
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	440b      	add	r3, r1
 8001242:	3314      	adds	r3, #20
 8001244:	7bfa      	ldrb	r2, [r7, #15]
 8001246:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001248:	79ba      	ldrb	r2, [r7, #6]
 800124a:	4913      	ldr	r1, [pc, #76]	@ (8001298 <LinkTimerBefore+0xbc>)
 800124c:	4613      	mov	r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	4413      	add	r3, r2
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	440b      	add	r3, r1
 8001256:	3314      	adds	r3, #20
 8001258:	79fa      	ldrb	r2, [r7, #7]
 800125a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800125c:	e014      	b.n	8001288 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800125e:	79fa      	ldrb	r2, [r7, #7]
 8001260:	490d      	ldr	r1, [pc, #52]	@ (8001298 <LinkTimerBefore+0xbc>)
 8001262:	4613      	mov	r3, r2
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	4413      	add	r3, r2
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	440b      	add	r3, r1
 800126c:	3315      	adds	r3, #21
 800126e:	79ba      	ldrb	r2, [r7, #6]
 8001270:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001272:	79ba      	ldrb	r2, [r7, #6]
 8001274:	4908      	ldr	r1, [pc, #32]	@ (8001298 <LinkTimerBefore+0xbc>)
 8001276:	4613      	mov	r3, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	4413      	add	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	440b      	add	r3, r1
 8001280:	3314      	adds	r3, #20
 8001282:	79fa      	ldrb	r2, [r7, #7]
 8001284:	701a      	strb	r2, [r3, #0]
  return;
 8001286:	bf00      	nop
}
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	200004e8 	.word	0x200004e8
 8001298:	20000458 	.word	0x20000458

0800129c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80012a6:	4b4e      	ldr	r3, [pc, #312]	@ (80013e0 <linkTimer+0x144>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b06      	cmp	r3, #6
 80012ae:	d118      	bne.n	80012e2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80012b0:	4b4b      	ldr	r3, [pc, #300]	@ (80013e0 <linkTimer+0x144>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4b4b      	ldr	r3, [pc, #300]	@ (80013e4 <linkTimer+0x148>)
 80012b8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80012ba:	4a49      	ldr	r2, [pc, #292]	@ (80013e0 <linkTimer+0x144>)
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80012c0:	79fa      	ldrb	r2, [r7, #7]
 80012c2:	4949      	ldr	r1, [pc, #292]	@ (80013e8 <linkTimer+0x14c>)
 80012c4:	4613      	mov	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4413      	add	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	440b      	add	r3, r1
 80012ce:	3315      	adds	r3, #21
 80012d0:	2206      	movs	r2, #6
 80012d2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80012d4:	4b45      	ldr	r3, [pc, #276]	@ (80013ec <linkTimer+0x150>)
 80012d6:	f04f 32ff 	mov.w	r2, #4294967295
 80012da:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	81fb      	strh	r3, [r7, #14]
 80012e0:	e078      	b.n	80013d4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80012e2:	f000 f909 	bl	80014f8 <ReturnTimeElapsed>
 80012e6:	4603      	mov	r3, r0
 80012e8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80012ea:	79fa      	ldrb	r2, [r7, #7]
 80012ec:	493e      	ldr	r1, [pc, #248]	@ (80013e8 <linkTimer+0x14c>)
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	440b      	add	r3, r1
 80012f8:	3308      	adds	r3, #8
 80012fa:	6819      	ldr	r1, [r3, #0]
 80012fc:	89fb      	ldrh	r3, [r7, #14]
 80012fe:	79fa      	ldrb	r2, [r7, #7]
 8001300:	4419      	add	r1, r3
 8001302:	4839      	ldr	r0, [pc, #228]	@ (80013e8 <linkTimer+0x14c>)
 8001304:	4613      	mov	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	4403      	add	r3, r0
 800130e:	3308      	adds	r3, #8
 8001310:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001312:	79fa      	ldrb	r2, [r7, #7]
 8001314:	4934      	ldr	r1, [pc, #208]	@ (80013e8 <linkTimer+0x14c>)
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	440b      	add	r3, r1
 8001320:	3308      	adds	r3, #8
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001326:	4b2e      	ldr	r3, [pc, #184]	@ (80013e0 <linkTimer+0x144>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	4619      	mov	r1, r3
 800132e:	4a2e      	ldr	r2, [pc, #184]	@ (80013e8 <linkTimer+0x14c>)
 8001330:	460b      	mov	r3, r1
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	440b      	add	r3, r1
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	4413      	add	r3, r2
 800133a:	3308      	adds	r3, #8
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	429a      	cmp	r2, r3
 8001342:	d337      	bcc.n	80013b4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001344:	4b26      	ldr	r3, [pc, #152]	@ (80013e0 <linkTimer+0x144>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800134a:	7b7a      	ldrb	r2, [r7, #13]
 800134c:	4926      	ldr	r1, [pc, #152]	@ (80013e8 <linkTimer+0x14c>)
 800134e:	4613      	mov	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4413      	add	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	440b      	add	r3, r1
 8001358:	3315      	adds	r3, #21
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800135e:	e013      	b.n	8001388 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001360:	7b7a      	ldrb	r2, [r7, #13]
 8001362:	4921      	ldr	r1, [pc, #132]	@ (80013e8 <linkTimer+0x14c>)
 8001364:	4613      	mov	r3, r2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4413      	add	r3, r2
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	440b      	add	r3, r1
 800136e:	3315      	adds	r3, #21
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001374:	7b7a      	ldrb	r2, [r7, #13]
 8001376:	491c      	ldr	r1, [pc, #112]	@ (80013e8 <linkTimer+0x14c>)
 8001378:	4613      	mov	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	440b      	add	r3, r1
 8001382:	3315      	adds	r3, #21
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001388:	7b3b      	ldrb	r3, [r7, #12]
 800138a:	2b06      	cmp	r3, #6
 800138c:	d00b      	beq.n	80013a6 <linkTimer+0x10a>
 800138e:	7b3a      	ldrb	r2, [r7, #12]
 8001390:	4915      	ldr	r1, [pc, #84]	@ (80013e8 <linkTimer+0x14c>)
 8001392:	4613      	mov	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	4413      	add	r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	440b      	add	r3, r1
 800139c:	3308      	adds	r3, #8
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d2dc      	bcs.n	8001360 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80013a6:	7b7a      	ldrb	r2, [r7, #13]
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	4611      	mov	r1, r2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fecf 	bl	8001150 <LinkTimerAfter>
 80013b2:	e00f      	b.n	80013d4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80013b4:	4b0a      	ldr	r3, [pc, #40]	@ (80013e0 <linkTimer+0x144>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff0c 	bl	80011dc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80013c4:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <linkTimer+0x144>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <linkTimer+0x148>)
 80013cc:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80013ce:	4a04      	ldr	r2, [pc, #16]	@ (80013e0 <linkTimer+0x144>)
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80013d4:	89fb      	ldrh	r3, [r7, #14]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200004e8 	.word	0x200004e8
 80013e4:	200004e9 	.word	0x200004e9
 80013e8:	20000458 	.word	0x20000458
 80013ec:	200004ec 	.word	0x200004ec

080013f0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	460a      	mov	r2, r1
 80013fa:	71fb      	strb	r3, [r7, #7]
 80013fc:	4613      	mov	r3, r2
 80013fe:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001400:	4b39      	ldr	r3, [pc, #228]	@ (80014e8 <UnlinkTimer+0xf8>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	b2db      	uxtb	r3, r3
 8001406:	79fa      	ldrb	r2, [r7, #7]
 8001408:	429a      	cmp	r2, r3
 800140a:	d111      	bne.n	8001430 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 800140c:	4b36      	ldr	r3, [pc, #216]	@ (80014e8 <UnlinkTimer+0xf8>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4b36      	ldr	r3, [pc, #216]	@ (80014ec <UnlinkTimer+0xfc>)
 8001414:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001416:	79fa      	ldrb	r2, [r7, #7]
 8001418:	4935      	ldr	r1, [pc, #212]	@ (80014f0 <UnlinkTimer+0x100>)
 800141a:	4613      	mov	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	440b      	add	r3, r1
 8001424:	3315      	adds	r3, #21
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	b2da      	uxtb	r2, r3
 800142a:	4b2f      	ldr	r3, [pc, #188]	@ (80014e8 <UnlinkTimer+0xf8>)
 800142c:	701a      	strb	r2, [r3, #0]
 800142e:	e03e      	b.n	80014ae <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001430:	79fa      	ldrb	r2, [r7, #7]
 8001432:	492f      	ldr	r1, [pc, #188]	@ (80014f0 <UnlinkTimer+0x100>)
 8001434:	4613      	mov	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4413      	add	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	440b      	add	r3, r1
 800143e:	3314      	adds	r3, #20
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001444:	79fa      	ldrb	r2, [r7, #7]
 8001446:	492a      	ldr	r1, [pc, #168]	@ (80014f0 <UnlinkTimer+0x100>)
 8001448:	4613      	mov	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	440b      	add	r3, r1
 8001452:	3315      	adds	r3, #21
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001458:	79f9      	ldrb	r1, [r7, #7]
 800145a:	7bfa      	ldrb	r2, [r7, #15]
 800145c:	4824      	ldr	r0, [pc, #144]	@ (80014f0 <UnlinkTimer+0x100>)
 800145e:	460b      	mov	r3, r1
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	440b      	add	r3, r1
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4403      	add	r3, r0
 8001468:	3315      	adds	r3, #21
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	b2d8      	uxtb	r0, r3
 800146e:	4920      	ldr	r1, [pc, #128]	@ (80014f0 <UnlinkTimer+0x100>)
 8001470:	4613      	mov	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4413      	add	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	440b      	add	r3, r1
 800147a:	3315      	adds	r3, #21
 800147c:	4602      	mov	r2, r0
 800147e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001480:	7bbb      	ldrb	r3, [r7, #14]
 8001482:	2b06      	cmp	r3, #6
 8001484:	d013      	beq.n	80014ae <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001486:	79f9      	ldrb	r1, [r7, #7]
 8001488:	7bba      	ldrb	r2, [r7, #14]
 800148a:	4819      	ldr	r0, [pc, #100]	@ (80014f0 <UnlinkTimer+0x100>)
 800148c:	460b      	mov	r3, r1
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	440b      	add	r3, r1
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	4403      	add	r3, r0
 8001496:	3314      	adds	r3, #20
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	b2d8      	uxtb	r0, r3
 800149c:	4914      	ldr	r1, [pc, #80]	@ (80014f0 <UnlinkTimer+0x100>)
 800149e:	4613      	mov	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4413      	add	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	440b      	add	r3, r1
 80014a8:	3314      	adds	r3, #20
 80014aa:	4602      	mov	r2, r0
 80014ac:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80014ae:	79fa      	ldrb	r2, [r7, #7]
 80014b0:	490f      	ldr	r1, [pc, #60]	@ (80014f0 <UnlinkTimer+0x100>)
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	440b      	add	r3, r1
 80014bc:	330c      	adds	r3, #12
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80014c2:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <UnlinkTimer+0xf8>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b06      	cmp	r3, #6
 80014ca:	d107      	bne.n	80014dc <UnlinkTimer+0xec>
 80014cc:	79bb      	ldrb	r3, [r7, #6]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d104      	bne.n	80014dc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80014d2:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <UnlinkTimer+0x104>)
 80014d4:	f04f 32ff 	mov.w	r2, #4294967295
 80014d8:	601a      	str	r2, [r3, #0]
  }

  return;
 80014da:	bf00      	nop
 80014dc:	bf00      	nop
}
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	200004e8 	.word	0x200004e8
 80014ec:	200004e9 	.word	0x200004e9
 80014f0:	20000458 	.word	0x20000458
 80014f4:	200004ec 	.word	0x200004ec

080014f8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80014fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001568 <ReturnTimeElapsed+0x70>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001506:	d026      	beq.n	8001556 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001508:	f7ff fe02 	bl	8001110 <ReadRtcSsrValue>
 800150c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800150e:	4b16      	ldr	r3, [pc, #88]	@ (8001568 <ReturnTimeElapsed+0x70>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	429a      	cmp	r2, r3
 8001516:	d805      	bhi.n	8001524 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001518:	4b13      	ldr	r3, [pc, #76]	@ (8001568 <ReturnTimeElapsed+0x70>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	e00a      	b.n	800153a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001524:	4b11      	ldr	r3, [pc, #68]	@ (800156c <ReturnTimeElapsed+0x74>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001530:	4b0d      	ldr	r3, [pc, #52]	@ (8001568 <ReturnTimeElapsed+0x70>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	4413      	add	r3, r2
 8001538:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800153a:	4b0d      	ldr	r3, [pc, #52]	@ (8001570 <ReturnTimeElapsed+0x78>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	fb02 f303 	mul.w	r3, r2, r3
 8001546:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001548:	4b0a      	ldr	r3, [pc, #40]	@ (8001574 <ReturnTimeElapsed+0x7c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	40d3      	lsrs	r3, r2
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	e001      	b.n	800155a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	b29b      	uxth	r3, r3
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200004ec 	.word	0x200004ec
 800156c:	200004f4 	.word	0x200004f4
 8001570:	200004f2 	.word	0x200004f2
 8001574:	200004f1 	.word	0x200004f1

08001578 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001582:	88fb      	ldrh	r3, [r7, #6]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d108      	bne.n	800159a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001588:	f7ff fdc2 	bl	8001110 <ReadRtcSsrValue>
 800158c:	4603      	mov	r3, r0
 800158e:	4a21      	ldr	r2, [pc, #132]	@ (8001614 <RestartWakeupCounter+0x9c>)
 8001590:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001592:	2003      	movs	r0, #3
 8001594:	f006 fb52 	bl	8007c3c <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001598:	e039      	b.n	800160e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d803      	bhi.n	80015a8 <RestartWakeupCounter+0x30>
 80015a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001618 <RestartWakeupCounter+0xa0>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d002      	beq.n	80015ae <RestartWakeupCounter+0x36>
      Value -= 1;
 80015a8:	88fb      	ldrh	r3, [r7, #6]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80015ae:	bf00      	nop
 80015b0:	4b1a      	ldr	r3, [pc, #104]	@ (800161c <RestartWakeupCounter+0xa4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f8      	beq.n	80015b0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80015be:	4b17      	ldr	r3, [pc, #92]	@ (800161c <RestartWakeupCounter+0xa4>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4b15      	ldr	r3, [pc, #84]	@ (800161c <RestartWakeupCounter+0xa4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80015ce:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80015d0:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <RestartWakeupCounter+0xa8>)
 80015d2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80015d6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80015d8:	2003      	movs	r0, #3
 80015da:	f006 fb3d 	bl	8007c58 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80015de:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <RestartWakeupCounter+0xac>)
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	0c1b      	lsrs	r3, r3, #16
 80015e4:	041b      	lsls	r3, r3, #16
 80015e6:	88fa      	ldrh	r2, [r7, #6]
 80015e8:	490e      	ldr	r1, [pc, #56]	@ (8001624 <RestartWakeupCounter+0xac>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80015ee:	f7ff fd8f 	bl	8001110 <ReadRtcSsrValue>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4a07      	ldr	r2, [pc, #28]	@ (8001614 <RestartWakeupCounter+0x9c>)
 80015f6:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80015f8:	4b08      	ldr	r3, [pc, #32]	@ (800161c <RestartWakeupCounter+0xa4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	4b07      	ldr	r3, [pc, #28]	@ (800161c <RestartWakeupCounter+0xa4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001606:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001608:	f3af 8000 	nop.w
  return ;
 800160c:	bf00      	nop
}
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200004ec 	.word	0x200004ec
 8001618:	200004f1 	.word	0x200004f1
 800161c:	20006688 	.word	0x20006688
 8001620:	58000800 	.word	0x58000800
 8001624:	40002800 	.word	0x40002800

08001628 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800162e:	4b45      	ldr	r3, [pc, #276]	@ (8001744 <RescheduleTimerList+0x11c>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800163a:	d107      	bne.n	800164c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800163c:	bf00      	nop
 800163e:	4b42      	ldr	r3, [pc, #264]	@ (8001748 <RescheduleTimerList+0x120>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1f8      	bne.n	800163e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800164c:	4b3e      	ldr	r3, [pc, #248]	@ (8001748 <RescheduleTimerList+0x120>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	4b3d      	ldr	r3, [pc, #244]	@ (8001748 <RescheduleTimerList+0x120>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800165a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800165c:	4b3b      	ldr	r3, [pc, #236]	@ (800174c <RescheduleTimerList+0x124>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001662:	7bfa      	ldrb	r2, [r7, #15]
 8001664:	493a      	ldr	r1, [pc, #232]	@ (8001750 <RescheduleTimerList+0x128>)
 8001666:	4613      	mov	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4413      	add	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	440b      	add	r3, r1
 8001670:	3308      	adds	r3, #8
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001676:	f7ff ff3f 	bl	80014f8 <ReturnTimeElapsed>
 800167a:	4603      	mov	r3, r0
 800167c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	429a      	cmp	r2, r3
 8001684:	d205      	bcs.n	8001692 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800168a:	4b32      	ldr	r3, [pc, #200]	@ (8001754 <RescheduleTimerList+0x12c>)
 800168c:	2201      	movs	r2, #1
 800168e:	701a      	strb	r2, [r3, #0]
 8001690:	e04d      	b.n	800172e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001692:	88fb      	ldrh	r3, [r7, #6]
 8001694:	4a30      	ldr	r2, [pc, #192]	@ (8001758 <RescheduleTimerList+0x130>)
 8001696:	8812      	ldrh	r2, [r2, #0]
 8001698:	b292      	uxth	r2, r2
 800169a:	4413      	add	r3, r2
 800169c:	461a      	mov	r2, r3
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d906      	bls.n	80016b2 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80016a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001758 <RescheduleTimerList+0x130>)
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80016aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001754 <RescheduleTimerList+0x12c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
 80016b0:	e03d      	b.n	800172e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80016bc:	4b25      	ldr	r3, [pc, #148]	@ (8001754 <RescheduleTimerList+0x12c>)
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80016c2:	e034      	b.n	800172e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80016c4:	7bfa      	ldrb	r2, [r7, #15]
 80016c6:	4922      	ldr	r1, [pc, #136]	@ (8001750 <RescheduleTimerList+0x128>)
 80016c8:	4613      	mov	r3, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	4413      	add	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	440b      	add	r3, r1
 80016d2:	3308      	adds	r3, #8
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	88fb      	ldrh	r3, [r7, #6]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d20a      	bcs.n	80016f2 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80016dc:	7bfa      	ldrb	r2, [r7, #15]
 80016de:	491c      	ldr	r1, [pc, #112]	@ (8001750 <RescheduleTimerList+0x128>)
 80016e0:	4613      	mov	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	440b      	add	r3, r1
 80016ea:	3308      	adds	r3, #8
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	e013      	b.n	800171a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80016f2:	7bfa      	ldrb	r2, [r7, #15]
 80016f4:	4916      	ldr	r1, [pc, #88]	@ (8001750 <RescheduleTimerList+0x128>)
 80016f6:	4613      	mov	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4413      	add	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	440b      	add	r3, r1
 8001700:	3308      	adds	r3, #8
 8001702:	6819      	ldr	r1, [r3, #0]
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	7bfa      	ldrb	r2, [r7, #15]
 8001708:	1ac9      	subs	r1, r1, r3
 800170a:	4811      	ldr	r0, [pc, #68]	@ (8001750 <RescheduleTimerList+0x128>)
 800170c:	4613      	mov	r3, r2
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	4413      	add	r3, r2
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	4403      	add	r3, r0
 8001716:	3308      	adds	r3, #8
 8001718:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800171a:	7bfa      	ldrb	r2, [r7, #15]
 800171c:	490c      	ldr	r1, [pc, #48]	@ (8001750 <RescheduleTimerList+0x128>)
 800171e:	4613      	mov	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4413      	add	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	440b      	add	r3, r1
 8001728:	3315      	adds	r3, #21
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	2b06      	cmp	r3, #6
 8001732:	d1c7      	bne.n	80016c4 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001734:	89bb      	ldrh	r3, [r7, #12]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff ff1e 	bl	8001578 <RestartWakeupCounter>

  return ;
 800173c:	bf00      	nop
}
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40002800 	.word	0x40002800
 8001748:	20006688 	.word	0x20006688
 800174c:	200004e8 	.word	0x200004e8
 8001750:	20000458 	.word	0x20000458
 8001754:	200004f0 	.word	0x200004f0
 8001758:	200004f6 	.word	0x200004f6

0800175c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	@ 0x28
 8001760:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001762:	f3ef 8310 	mrs	r3, PRIMASK
 8001766:	617b      	str	r3, [r7, #20]
  return(result);
 8001768:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800176c:	b672      	cpsid	i
}
 800176e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001770:	4b59      	ldr	r3, [pc, #356]	@ (80018d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	22ca      	movs	r2, #202	@ 0xca
 8001776:	625a      	str	r2, [r3, #36]	@ 0x24
 8001778:	4b57      	ldr	r3, [pc, #348]	@ (80018d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2253      	movs	r2, #83	@ 0x53
 800177e:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001780:	4b55      	ldr	r3, [pc, #340]	@ (80018d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	4b54      	ldr	r3, [pc, #336]	@ (80018d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800178e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001790:	4b52      	ldr	r3, [pc, #328]	@ (80018dc <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001798:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800179c:	4950      	ldr	r1, [pc, #320]	@ (80018e0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800179e:	4613      	mov	r3, r2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4413      	add	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	440b      	add	r3, r1
 80017a8:	330c      	adds	r3, #12
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d16e      	bne.n	8001890 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80017b2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80017b6:	494a      	ldr	r1, [pc, #296]	@ (80018e0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	440b      	add	r3, r1
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80017c6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80017ca:	4945      	ldr	r1, [pc, #276]	@ (80018e0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80017cc:	4613      	mov	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	440b      	add	r3, r1
 80017d6:	3310      	adds	r3, #16
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80017dc:	4b41      	ldr	r3, [pc, #260]	@ (80018e4 <HW_TS_RTC_Wakeup_Handler+0x188>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d04c      	beq.n	8001880 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80017e6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80017ea:	493d      	ldr	r1, [pc, #244]	@ (80018e0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80017ec:	4613      	mov	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4413      	add	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	440b      	add	r3, r1
 80017f6:	330d      	adds	r3, #13
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d124      	bne.n	800184a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001800:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001804:	2101      	movs	r1, #1
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fdf2 	bl	80013f0 <UnlinkTimer>
 800180c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	f383 8810 	msr	PRIMASK, r3
}
 8001816:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001818:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800181c:	4930      	ldr	r1, [pc, #192]	@ (80018e0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800181e:	4613      	mov	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4413      	add	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	440b      	add	r3, r1
 8001828:	3304      	adds	r3, #4
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001830:	4611      	mov	r1, r2
 8001832:	4618      	mov	r0, r3
 8001834:	f000 f9b8 	bl	8001ba8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001838:	4b27      	ldr	r3, [pc, #156]	@ (80018d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	22ca      	movs	r2, #202	@ 0xca
 800183e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001840:	4b25      	ldr	r3, [pc, #148]	@ (80018d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2253      	movs	r2, #83	@ 0x53
 8001846:	625a      	str	r2, [r3, #36]	@ 0x24
 8001848:	e012      	b.n	8001870 <HW_TS_RTC_Wakeup_Handler+0x114>
 800184a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f383 8810 	msr	PRIMASK, r3
}
 8001854:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001856:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f920 	bl	8001aa0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001860:	4b1d      	ldr	r3, [pc, #116]	@ (80018d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	22ca      	movs	r2, #202	@ 0xca
 8001866:	625a      	str	r2, [r3, #36]	@ 0x24
 8001868:	4b1b      	ldr	r3, [pc, #108]	@ (80018d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2253      	movs	r2, #83	@ 0x53
 800186e:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001870:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001874:	69fa      	ldr	r2, [r7, #28]
 8001876:	4619      	mov	r1, r3
 8001878:	69b8      	ldr	r0, [r7, #24]
 800187a:	f000 fa1b 	bl	8001cb4 <HW_TS_RTC_Int_AppNot>
 800187e:	e022      	b.n	80018c6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001880:	f7ff fed2 	bl	8001628 <RescheduleTimerList>
 8001884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001886:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f383 8810 	msr	PRIMASK, r3
}
 800188e:	e01a      	b.n	80018c6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001890:	bf00      	nop
 8001892:	4b11      	ldr	r3, [pc, #68]	@ (80018d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f8      	beq.n	8001892 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80018a0:	4b0d      	ldr	r3, [pc, #52]	@ (80018d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	4b0b      	ldr	r3, [pc, #44]	@ (80018d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80018b0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80018b2:	4b0d      	ldr	r3, [pc, #52]	@ (80018e8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80018b4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018bc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f383 8810 	msr	PRIMASK, r3
}
 80018c4:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80018c6:	4b04      	ldr	r3, [pc, #16]	@ (80018d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	22ff      	movs	r2, #255	@ 0xff
 80018cc:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 80018ce:	bf00      	nop
}
 80018d0:	3728      	adds	r7, #40	@ 0x28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20006688 	.word	0x20006688
 80018dc:	200004e8 	.word	0x200004e8
 80018e0:	20000458 	.word	0x20000458
 80018e4:	200004f0 	.word	0x200004f0
 80018e8:	58000800 	.word	0x58000800

080018ec <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	6039      	str	r1, [r7, #0]
 80018f6:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80018f8:	4b5e      	ldr	r3, [pc, #376]	@ (8001a74 <HW_TS_Init+0x188>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	22ca      	movs	r2, #202	@ 0xca
 80018fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8001900:	4b5c      	ldr	r3, [pc, #368]	@ (8001a74 <HW_TS_Init+0x188>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2253      	movs	r2, #83	@ 0x53
 8001906:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001908:	4b5b      	ldr	r3, [pc, #364]	@ (8001a78 <HW_TS_Init+0x18c>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	4a5a      	ldr	r2, [pc, #360]	@ (8001a78 <HW_TS_Init+0x18c>)
 800190e:	f043 0320 	orr.w	r3, r3, #32
 8001912:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001914:	4b58      	ldr	r3, [pc, #352]	@ (8001a78 <HW_TS_Init+0x18c>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	b2db      	uxtb	r3, r3
 8001920:	f1c3 0304 	rsb	r3, r3, #4
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4b55      	ldr	r3, [pc, #340]	@ (8001a7c <HW_TS_Init+0x190>)
 8001928:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800192a:	4b53      	ldr	r3, [pc, #332]	@ (8001a78 <HW_TS_Init+0x18c>)
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001932:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8001936:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	fa92 f2a2 	rbit	r2, r2
 800193e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	2a00      	cmp	r2, #0
 8001948:	d101      	bne.n	800194e <HW_TS_Init+0x62>
  {
    return 32U;
 800194a:	2220      	movs	r2, #32
 800194c:	e003      	b.n	8001956 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	fab2 f282 	clz	r2, r2
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	40d3      	lsrs	r3, r2
 8001958:	b2db      	uxtb	r3, r3
 800195a:	3301      	adds	r3, #1
 800195c:	b2da      	uxtb	r2, r3
 800195e:	4b48      	ldr	r3, [pc, #288]	@ (8001a80 <HW_TS_Init+0x194>)
 8001960:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001962:	4b45      	ldr	r3, [pc, #276]	@ (8001a78 <HW_TS_Init+0x18c>)
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	b29b      	uxth	r3, r3
 8001968:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800196c:	b29b      	uxth	r3, r3
 800196e:	3301      	adds	r3, #1
 8001970:	b29a      	uxth	r2, r3
 8001972:	4b44      	ldr	r3, [pc, #272]	@ (8001a84 <HW_TS_Init+0x198>)
 8001974:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001976:	4b43      	ldr	r3, [pc, #268]	@ (8001a84 <HW_TS_Init+0x198>)
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	3b01      	subs	r3, #1
 800197c:	4a40      	ldr	r2, [pc, #256]	@ (8001a80 <HW_TS_Init+0x194>)
 800197e:	7812      	ldrb	r2, [r2, #0]
 8001980:	fb02 f303 	mul.w	r3, r2, r3
 8001984:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001988:	4a3c      	ldr	r2, [pc, #240]	@ (8001a7c <HW_TS_Init+0x190>)
 800198a:	7812      	ldrb	r2, [r2, #0]
 800198c:	40d3      	lsrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001996:	4293      	cmp	r3, r2
 8001998:	d904      	bls.n	80019a4 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800199a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a88 <HW_TS_Init+0x19c>)
 800199c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019a0:	801a      	strh	r2, [r3, #0]
 80019a2:	e003      	b.n	80019ac <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	4b37      	ldr	r3, [pc, #220]	@ (8001a88 <HW_TS_Init+0x19c>)
 80019aa:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80019ac:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80019b0:	f7ff fb9c 	bl	80010ec <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80019b4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80019b8:	f7ff fb84 	bl	80010c4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d13d      	bne.n	8001a3e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80019c2:	4b32      	ldr	r3, [pc, #200]	@ (8001a8c <HW_TS_Init+0x1a0>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80019c8:	4b31      	ldr	r3, [pc, #196]	@ (8001a90 <HW_TS_Init+0x1a4>)
 80019ca:	f04f 32ff 	mov.w	r2, #4294967295
 80019ce:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80019d0:	2300      	movs	r3, #0
 80019d2:	77fb      	strb	r3, [r7, #31]
 80019d4:	e00c      	b.n	80019f0 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80019d6:	7ffa      	ldrb	r2, [r7, #31]
 80019d8:	492e      	ldr	r1, [pc, #184]	@ (8001a94 <HW_TS_Init+0x1a8>)
 80019da:	4613      	mov	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	440b      	add	r3, r1
 80019e4:	330c      	adds	r3, #12
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80019ea:	7ffb      	ldrb	r3, [r7, #31]
 80019ec:	3301      	adds	r3, #1
 80019ee:	77fb      	strb	r3, [r7, #31]
 80019f0:	7ffb      	ldrb	r3, [r7, #31]
 80019f2:	2b05      	cmp	r3, #5
 80019f4:	d9ef      	bls.n	80019d6 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80019f6:	4b28      	ldr	r3, [pc, #160]	@ (8001a98 <HW_TS_Init+0x1ac>)
 80019f8:	2206      	movs	r2, #6
 80019fa:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80019fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a74 <HW_TS_Init+0x188>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	4b1c      	ldr	r3, [pc, #112]	@ (8001a74 <HW_TS_Init+0x188>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a0a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001a0c:	4b19      	ldr	r3, [pc, #100]	@ (8001a74 <HW_TS_Init+0x188>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	4b17      	ldr	r3, [pc, #92]	@ (8001a74 <HW_TS_Init+0x188>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001a1c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a9c <HW_TS_Init+0x1b0>)
 8001a20:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001a24:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001a26:	2003      	movs	r0, #3
 8001a28:	f006 f916 	bl	8007c58 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001a2c:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <HW_TS_Init+0x188>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	4b10      	ldr	r3, [pc, #64]	@ (8001a74 <HW_TS_Init+0x188>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	e009      	b.n	8001a52 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a74 <HW_TS_Init+0x188>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d002      	beq.n	8001a52 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001a4c:	2003      	movs	r0, #3
 8001a4e:	f006 f8f5 	bl	8007c3c <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001a52:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <HW_TS_Init+0x188>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	22ff      	movs	r2, #255	@ 0xff
 8001a58:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2103      	movs	r1, #3
 8001a5e:	2003      	movs	r0, #3
 8001a60:	f006 f8b6 	bl	8007bd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001a64:	2003      	movs	r0, #3
 8001a66:	f006 f8cd 	bl	8007c04 <HAL_NVIC_EnableIRQ>

  return;
 8001a6a:	bf00      	nop
}
 8001a6c:	3720      	adds	r7, #32
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20006688 	.word	0x20006688
 8001a78:	40002800 	.word	0x40002800
 8001a7c:	200004f1 	.word	0x200004f1
 8001a80:	200004f2 	.word	0x200004f2
 8001a84:	200004f4 	.word	0x200004f4
 8001a88:	200004f6 	.word	0x200004f6
 8001a8c:	200004f0 	.word	0x200004f0
 8001a90:	200004ec 	.word	0x200004ec
 8001a94:	20000458 	.word	0x20000458
 8001a98:	200004e8 	.word	0x200004e8
 8001a9c:	58000800 	.word	0x58000800

08001aa0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001aaa:	f3ef 8310 	mrs	r3, PRIMASK
 8001aae:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001ab2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab4:	b672      	cpsid	i
}
 8001ab6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001ab8:	2003      	movs	r0, #3
 8001aba:	f006 f8b1 	bl	8007c20 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001abe:	4b34      	ldr	r3, [pc, #208]	@ (8001b90 <HW_TS_Stop+0xf0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	22ca      	movs	r2, #202	@ 0xca
 8001ac4:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ac6:	4b32      	ldr	r3, [pc, #200]	@ (8001b90 <HW_TS_Stop+0xf0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2253      	movs	r2, #83	@ 0x53
 8001acc:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001ace:	79fa      	ldrb	r2, [r7, #7]
 8001ad0:	4930      	ldr	r1, [pc, #192]	@ (8001b94 <HW_TS_Stop+0xf4>)
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	440b      	add	r3, r1
 8001adc:	330c      	adds	r3, #12
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d142      	bne.n	8001b6c <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fc80 	bl	80013f0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001af0:	4b29      	ldr	r3, [pc, #164]	@ (8001b98 <HW_TS_Stop+0xf8>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001af6:	7cfb      	ldrb	r3, [r7, #19]
 8001af8:	2b06      	cmp	r3, #6
 8001afa:	d12f      	bne.n	8001b5c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001afc:	4b27      	ldr	r3, [pc, #156]	@ (8001b9c <HW_TS_Stop+0xfc>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b08:	d107      	bne.n	8001b1a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001b0a:	bf00      	nop
 8001b0c:	4b20      	ldr	r3, [pc, #128]	@ (8001b90 <HW_TS_Stop+0xf0>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f8      	bne.n	8001b0c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b90 <HW_TS_Stop+0xf0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	4b1b      	ldr	r3, [pc, #108]	@ (8001b90 <HW_TS_Stop+0xf0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b28:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001b2a:	bf00      	nop
 8001b2c:	4b18      	ldr	r3, [pc, #96]	@ (8001b90 <HW_TS_Stop+0xf0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f8      	beq.n	8001b2c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001b3a:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <HW_TS_Stop+0xf0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4b13      	ldr	r3, [pc, #76]	@ (8001b90 <HW_TS_Stop+0xf0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001b4a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001b4c:	4b14      	ldr	r3, [pc, #80]	@ (8001ba0 <HW_TS_Stop+0x100>)
 8001b4e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b52:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001b54:	2003      	movs	r0, #3
 8001b56:	f006 f87f 	bl	8007c58 <HAL_NVIC_ClearPendingIRQ>
 8001b5a:	e007      	b.n	8001b6c <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001b5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ba4 <HW_TS_Stop+0x104>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	7cfa      	ldrb	r2, [r7, #19]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d001      	beq.n	8001b6c <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001b68:	f7ff fd5e 	bl	8001628 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001b6c:	4b08      	ldr	r3, [pc, #32]	@ (8001b90 <HW_TS_Stop+0xf0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	22ff      	movs	r2, #255	@ 0xff
 8001b72:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001b74:	2003      	movs	r0, #3
 8001b76:	f006 f845 	bl	8007c04 <HAL_NVIC_EnableIRQ>
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	f383 8810 	msr	PRIMASK, r3
}
 8001b84:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001b86:	bf00      	nop
}
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20006688 	.word	0x20006688
 8001b94:	20000458 	.word	0x20000458
 8001b98:	200004e8 	.word	0x200004e8
 8001b9c:	40002800 	.word	0x40002800
 8001ba0:	58000800 	.word	0x58000800
 8001ba4:	200004e9 	.word	0x200004e9

08001ba8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	6039      	str	r1, [r7, #0]
 8001bb2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001bb4:	79fa      	ldrb	r2, [r7, #7]
 8001bb6:	493b      	ldr	r1, [pc, #236]	@ (8001ca4 <HW_TS_Start+0xfc>)
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	440b      	add	r3, r1
 8001bc2:	330c      	adds	r3, #12
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d103      	bne.n	8001bd4 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff ff66 	bl	8001aa0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bd4:	f3ef 8310 	mrs	r3, PRIMASK
 8001bd8:	60fb      	str	r3, [r7, #12]
  return(result);
 8001bda:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001bdc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bde:	b672      	cpsid	i
}
 8001be0:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001be2:	2003      	movs	r0, #3
 8001be4:	f006 f81c 	bl	8007c20 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001be8:	4b2f      	ldr	r3, [pc, #188]	@ (8001ca8 <HW_TS_Start+0x100>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	22ca      	movs	r2, #202	@ 0xca
 8001bee:	625a      	str	r2, [r3, #36]	@ 0x24
 8001bf0:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca8 <HW_TS_Start+0x100>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2253      	movs	r2, #83	@ 0x53
 8001bf6:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001bf8:	79fa      	ldrb	r2, [r7, #7]
 8001bfa:	492a      	ldr	r1, [pc, #168]	@ (8001ca4 <HW_TS_Start+0xfc>)
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4413      	add	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	440b      	add	r3, r1
 8001c06:	330c      	adds	r3, #12
 8001c08:	2202      	movs	r2, #2
 8001c0a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001c0c:	79fa      	ldrb	r2, [r7, #7]
 8001c0e:	4925      	ldr	r1, [pc, #148]	@ (8001ca4 <HW_TS_Start+0xfc>)
 8001c10:	4613      	mov	r3, r2
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	4413      	add	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	440b      	add	r3, r1
 8001c1a:	3308      	adds	r3, #8
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001c20:	79fa      	ldrb	r2, [r7, #7]
 8001c22:	4920      	ldr	r1, [pc, #128]	@ (8001ca4 <HW_TS_Start+0xfc>)
 8001c24:	4613      	mov	r3, r2
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	4413      	add	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	440b      	add	r3, r1
 8001c2e:	3304      	adds	r3, #4
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fb30 	bl	800129c <linkTimer>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001c40:	4b1a      	ldr	r3, [pc, #104]	@ (8001cac <HW_TS_Start+0x104>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001c46:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <HW_TS_Start+0x108>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	7c7a      	ldrb	r2, [r7, #17]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d002      	beq.n	8001c58 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001c52:	f7ff fce9 	bl	8001628 <RescheduleTimerList>
 8001c56:	e013      	b.n	8001c80 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001c58:	79fa      	ldrb	r2, [r7, #7]
 8001c5a:	4912      	ldr	r1, [pc, #72]	@ (8001ca4 <HW_TS_Start+0xfc>)
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	440b      	add	r3, r1
 8001c66:	3308      	adds	r3, #8
 8001c68:	6819      	ldr	r1, [r3, #0]
 8001c6a:	8a7b      	ldrh	r3, [r7, #18]
 8001c6c:	79fa      	ldrb	r2, [r7, #7]
 8001c6e:	1ac9      	subs	r1, r1, r3
 8001c70:	480c      	ldr	r0, [pc, #48]	@ (8001ca4 <HW_TS_Start+0xfc>)
 8001c72:	4613      	mov	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	4403      	add	r3, r0
 8001c7c:	3308      	adds	r3, #8
 8001c7e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001c80:	4b09      	ldr	r3, [pc, #36]	@ (8001ca8 <HW_TS_Start+0x100>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	22ff      	movs	r2, #255	@ 0xff
 8001c86:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001c88:	2003      	movs	r0, #3
 8001c8a:	f005 ffbb 	bl	8007c04 <HAL_NVIC_EnableIRQ>
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	f383 8810 	msr	PRIMASK, r3
}
 8001c98:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001c9a:	bf00      	nop
}
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000458 	.word	0x20000458
 8001ca8:	20006688 	.word	0x20006688
 8001cac:	200004e8 	.word	0x200004e8
 8001cb0:	200004e9 	.word	0x200004e9

08001cb4 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4798      	blx	r3

  return;
 8001cc6:	bf00      	nop
}
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b085      	sub	sp, #20
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001cd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cda:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001cdc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001ce6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4013      	ands	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d24:	68fb      	ldr	r3, [r7, #12]
}
 8001d26:	bf00      	nop
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <clampf>:
#define CURSOR_UP     2      /* kelios eilutės, kiek centrinė žyma ir
                                kursorius pakelti virš kontūro            */

/* pagalbinė funkcija, reikšmės apribojimas */
static inline float clampf(float v, float lo, float hi)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b085      	sub	sp, #20
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	ed87 0a03 	vstr	s0, [r7, #12]
 8001d3c:	edc7 0a02 	vstr	s1, [r7, #8]
 8001d40:	ed87 1a01 	vstr	s2, [r7, #4]
    return v < lo ? lo : (v > hi ? hi : v);
 8001d44:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d48:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d54:	d501      	bpl.n	8001d5a <clampf+0x28>
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	e00b      	b.n	8001d72 <clampf+0x40>
 8001d5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6a:	dd01      	ble.n	8001d70 <clampf+0x3e>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	e000      	b.n	8001d72 <clampf+0x40>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	ee07 3a90 	vmov	s15, r3
}
 8001d76:	eeb0 0a67 	vmov.f32	s0, s15
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <cents_to_x>:
/*  cents_to_x() paskirtis : paversti ±50 centų reikšmę į x koordinatę pikselių erdvėje.
 *               Kursorius gali judėti tik kontūro viduje (nenulipdamas
 *               ant rėmelio linijų).
 * ------------------------------------------------------------------------- */
static inline uint8_t cents_to_x(float cents)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	ed87 0a01 	vstr	s0, [r7, #4]
    cents = clampf(cents, -50.f, 50.f);
 8001d8e:	ed9f 1a14 	vldr	s2, [pc, #80]	@ 8001de0 <cents_to_x+0x5c>
 8001d92:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8001de4 <cents_to_x+0x60>
 8001d96:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d9a:	f7ff ffca 	bl	8001d32 <clampf>
 8001d9e:	ed87 0a01 	vstr	s0, [r7, #4]

    /* plotis, kuriame realiai judame = BAR_W-2 (praleidžiame abi vertikalias rėmo linijas) */
    return BAR_X + 1 +
           (uint8_t)((cents + 50.f) * (BAR_W - 2) / 100.f + 0.5f); /* +0.5 ir apvaliname */
 8001da2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001da6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001de0 <cents_to_x+0x5c>
 8001daa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dae:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001de8 <cents_to_x+0x64>
 8001db2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001db6:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8001dec <cents_to_x+0x68>
 8001dba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dbe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001dc2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dca:	edc7 7a00 	vstr	s15, [r7]
 8001dce:	783b      	ldrb	r3, [r7, #0]
 8001dd0:	b2db      	uxtb	r3, r3
    return BAR_X + 1 +
 8001dd2:	3305      	adds	r3, #5
 8001dd4:	b2db      	uxtb	r3, r3
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	42480000 	.word	0x42480000
 8001de4:	c2480000 	.word	0xc2480000
 8001de8:	42ec0000 	.word	0x42ec0000
 8001dec:	42c80000 	.word	0x42c80000

08001df0 <draw_slider>:
 *      su (`ssd1306_UpdateScreen()`) taip galima grupuoti piešimo operacijas.
 *    – SSD1306 aukštis = 32 px; visos „if (y < 32)“ patikros apsaugo nuo
 *      potencialaus išėjimo iš rėžių, jei keistųsi geometriją kitam OLED modeliui.
 * ------------------------------------------------------------------------- */
static inline void draw_slider(float cents)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	ed87 0a01 	vstr	s0, [r7, #4]
    /* Kontūro piešimas (viršutinė, apatinė, kairė, dešinė linijos) */
    for (uint8_t x = BAR_X; x < BAR_X + BAR_W; ++x) {
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	75fb      	strb	r3, [r7, #23]
 8001dfe:	e008      	b.n	8001e12 <draw_slider+0x22>
        if (BAR_Y < 32)                    ssd1306_DrawPixel(x, BAR_Y,                 White);
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
 8001e02:	2201      	movs	r2, #1
 8001e04:	211c      	movs	r1, #28
 8001e06:	4618      	mov	r0, r3
 8001e08:	f004 fa88 	bl	800631c <ssd1306_DrawPixel>
    for (uint8_t x = BAR_X; x < BAR_X + BAR_W; ++x) {
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	75fb      	strb	r3, [r7, #23]
 8001e12:	7dfb      	ldrb	r3, [r7, #23]
 8001e14:	2b7b      	cmp	r3, #123	@ 0x7b
 8001e16:	d9f3      	bls.n	8001e00 <draw_slider+0x10>
        if (BAR_Y + BAR_INNER_H + 1 < 32)  ssd1306_DrawPixel(x, BAR_Y + BAR_INNER_H + 1, White);
    }
    for (uint8_t y = BAR_Y; y <= BAR_Y + BAR_INNER_H + 1 && y < 32; ++y) {
 8001e18:	231c      	movs	r3, #28
 8001e1a:	75bb      	strb	r3, [r7, #22]
 8001e1c:	e00e      	b.n	8001e3c <draw_slider+0x4c>
        ssd1306_DrawPixel(BAR_X,            y, White);
 8001e1e:	7dbb      	ldrb	r3, [r7, #22]
 8001e20:	2201      	movs	r2, #1
 8001e22:	4619      	mov	r1, r3
 8001e24:	2004      	movs	r0, #4
 8001e26:	f004 fa79 	bl	800631c <ssd1306_DrawPixel>
        ssd1306_DrawPixel(BAR_X + BAR_W - 1, y, White);
 8001e2a:	7dbb      	ldrb	r3, [r7, #22]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4619      	mov	r1, r3
 8001e30:	207b      	movs	r0, #123	@ 0x7b
 8001e32:	f004 fa73 	bl	800631c <ssd1306_DrawPixel>
    for (uint8_t y = BAR_Y; y <= BAR_Y + BAR_INNER_H + 1 && y < 32; ++y) {
 8001e36:	7dbb      	ldrb	r3, [r7, #22]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	75bb      	strb	r3, [r7, #22]
 8001e3c:	7dbb      	ldrb	r3, [r7, #22]
 8001e3e:	2b20      	cmp	r3, #32
 8001e40:	d802      	bhi.n	8001e48 <draw_slider+0x58>
 8001e42:	7dbb      	ldrb	r3, [r7, #22]
 8001e44:	2b1f      	cmp	r3, #31
 8001e46:	d9ea      	bls.n	8001e1e <draw_slider+0x2e>
    }

    /* Centrinė nulinė žyma (0 ct) */
    uint8_t cx = BAR_X + BAR_W / 2;        /* X = juostos centras           */
 8001e48:	2340      	movs	r3, #64	@ 0x40
 8001e4a:	73fb      	strb	r3, [r7, #15]
    int16_t tick_top = (int16_t)BAR_Y - CURSOR_UP;
 8001e4c:	231a      	movs	r3, #26
 8001e4e:	81bb      	strh	r3, [r7, #12]
    for (int16_t y = tick_top; y <= (int16_t)BAR_Y + BAR_INNER_H + 1; ++y) {
 8001e50:	89bb      	ldrh	r3, [r7, #12]
 8001e52:	82bb      	strh	r3, [r7, #20]
 8001e54:	e012      	b.n	8001e7c <draw_slider+0x8c>
        if (y >= 0 && y < 32) ssd1306_DrawPixel(cx, (uint8_t)y, White);
 8001e56:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	db0a      	blt.n	8001e74 <draw_slider+0x84>
 8001e5e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e62:	2b1f      	cmp	r3, #31
 8001e64:	dc06      	bgt.n	8001e74 <draw_slider+0x84>
 8001e66:	8abb      	ldrh	r3, [r7, #20]
 8001e68:	b2d9      	uxtb	r1, r3
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f004 fa54 	bl	800631c <ssd1306_DrawPixel>
    for (int16_t y = tick_top; y <= (int16_t)BAR_Y + BAR_INNER_H + 1; ++y) {
 8001e74:	8abb      	ldrh	r3, [r7, #20]
 8001e76:	3301      	adds	r3, #1
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	82bb      	strh	r3, [r7, #20]
 8001e7c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e80:	2b20      	cmp	r3, #32
 8001e82:	dde8      	ble.n	8001e56 <draw_slider+0x66>
    }

    /* Kursorius – 5 px pločio × 5 px aukščio stačiakampis */
    uint8_t px = cents_to_x(cents);        /* X padėtis pagal nuokrypį      */
 8001e84:	ed97 0a01 	vldr	s0, [r7, #4]
 8001e88:	f7ff ff7c 	bl	8001d84 <cents_to_x>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	72fb      	strb	r3, [r7, #11]
    for (int8_t dx = -CURSOR_HALF_W; dx <= CURSOR_HALF_W; ++dx) {
 8001e90:	23fe      	movs	r3, #254	@ 0xfe
 8001e92:	74fb      	strb	r3, [r7, #19]
 8001e94:	e02f      	b.n	8001ef6 <draw_slider+0x106>
        int16_t x = (int16_t)px + dx;
 8001e96:	7afb      	ldrb	r3, [r7, #11]
 8001e98:	b21a      	sxth	r2, r3
 8001e9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001e9e:	b21b      	sxth	r3, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	813b      	strh	r3, [r7, #8]
        /* Sauga: kursorius turi likti juostos viduje (be kontūro) */
        if (x < BAR_X + 1 || x > BAR_X + BAR_W - 2) continue;
 8001ea4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	dd1f      	ble.n	8001eec <draw_slider+0xfc>
 8001eac:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001eb0:	2b7a      	cmp	r3, #122	@ 0x7a
 8001eb2:	dc1b      	bgt.n	8001eec <draw_slider+0xfc>

        for (int16_t y = (int16_t)BAR_Y - CURSOR_UP;
 8001eb4:	231a      	movs	r3, #26
 8001eb6:	823b      	strh	r3, [r7, #16]
 8001eb8:	e013      	b.n	8001ee2 <draw_slider+0xf2>
             y <= (int16_t)BAR_Y + BAR_INNER_H; ++y)
        {
            if (y >= 0 && y < 32) ssd1306_DrawPixel((uint8_t)x, (uint8_t)y, White);
 8001eba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	db0b      	blt.n	8001eda <draw_slider+0xea>
 8001ec2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ec6:	2b1f      	cmp	r3, #31
 8001ec8:	dc07      	bgt.n	8001eda <draw_slider+0xea>
 8001eca:	893b      	ldrh	r3, [r7, #8]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	8a3a      	ldrh	r2, [r7, #16]
 8001ed0:	b2d1      	uxtb	r1, r2
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f004 fa21 	bl	800631c <ssd1306_DrawPixel>
             y <= (int16_t)BAR_Y + BAR_INNER_H; ++y)
 8001eda:	8a3b      	ldrh	r3, [r7, #16]
 8001edc:	3301      	adds	r3, #1
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	823b      	strh	r3, [r7, #16]
 8001ee2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ee6:	2b1f      	cmp	r3, #31
 8001ee8:	dde7      	ble.n	8001eba <draw_slider+0xca>
 8001eea:	e000      	b.n	8001eee <draw_slider+0xfe>
        if (x < BAR_X + 1 || x > BAR_X + BAR_W - 2) continue;
 8001eec:	bf00      	nop
    for (int8_t dx = -CURSOR_HALF_W; dx <= CURSOR_HALF_W; ++dx) {
 8001eee:	7cfb      	ldrb	r3, [r7, #19]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	74fb      	strb	r3, [r7, #19]
 8001ef6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	ddcb      	ble.n	8001e96 <draw_slider+0xa6>
        }
    }
}
 8001efe:	bf00      	nop
 8001f00:	bf00      	nop
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_ADC_ConvCpltCallback>:
static void MX_RTC_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM17_Init(void);
static void MX_RF_Init(void);
/* USER CODE BEGIN PFP */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
    new_data_ready = 1;
 8001f10:	4b04      	ldr	r3, [pc, #16]	@ (8001f24 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	701a      	strb	r2, [r3, #0]
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20000508 	.word	0x20000508

08001f28 <Display_Debug_Info>:

static void Display_Debug_Info(const char* note, float freq) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af02      	add	r7, sp, #8
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	ed87 0a00 	vstr	s0, [r7]
    ssd1306_Fill(Black);
 8001f34:	2000      	movs	r0, #0
 8001f36:	f004 f9b1 	bl	800629c <ssd1306_Fill>

    //dažnio informacija
    snprintf(buffer, sizeof(buffer), "%s ", note);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a15      	ldr	r2, [pc, #84]	@ (8001f94 <Display_Debug_Info+0x6c>)
 8001f3e:	2120      	movs	r1, #32
 8001f40:	4815      	ldr	r0, [pc, #84]	@ (8001f98 <Display_Debug_Info+0x70>)
 8001f42:	f00e f9af 	bl	80102a4 <sniprintf>
    ssd1306_SetCursor(0, 0);
 8001f46:	2100      	movs	r1, #0
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f004 faf3 	bl	8006534 <ssd1306_SetCursor>
    ssd1306_WriteString(buffer, Font_16x26, White);
 8001f4e:	4b13      	ldr	r3, [pc, #76]	@ (8001f9c <Display_Debug_Info+0x74>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	9200      	str	r2, [sp, #0]
 8001f54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f56:	4810      	ldr	r0, [pc, #64]	@ (8001f98 <Display_Debug_Info+0x70>)
 8001f58:	f004 fac6 	bl	80064e8 <ssd1306_WriteString>

	snprintf(buffer, sizeof(buffer), "%3.0fHz", freq);
 8001f5c:	6838      	ldr	r0, [r7, #0]
 8001f5e:	f7fe facb 	bl	80004f8 <__aeabi_f2d>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	e9cd 2300 	strd	r2, r3, [sp]
 8001f6a:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa0 <Display_Debug_Info+0x78>)
 8001f6c:	2120      	movs	r1, #32
 8001f6e:	480a      	ldr	r0, [pc, #40]	@ (8001f98 <Display_Debug_Info+0x70>)
 8001f70:	f00e f998 	bl	80102a4 <sniprintf>
	ssd1306_SetCursor(70, 0);
 8001f74:	2100      	movs	r1, #0
 8001f76:	2046      	movs	r0, #70	@ 0x46
 8001f78:	f004 fadc 	bl	8006534 <ssd1306_SetCursor>
	ssd1306_WriteString(buffer, Font_11x18, White);
 8001f7c:	4b09      	ldr	r3, [pc, #36]	@ (8001fa4 <Display_Debug_Info+0x7c>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	9200      	str	r2, [sp, #0]
 8001f82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f84:	4804      	ldr	r0, [pc, #16]	@ (8001f98 <Display_Debug_Info+0x70>)
 8001f86:	f004 faaf 	bl	80064e8 <ssd1306_WriteString>

//    ssd1306_UpdateScreen();
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	0801325c 	.word	0x0801325c
 8001f98:	2000650c 	.word	0x2000650c
 8001f9c:	080291f0 	.word	0x080291f0
 8001fa0:	08013260 	.word	0x08013260
 8001fa4:	080291e4 	.word	0x080291e4

08001fa8 <IdentifyNote>:
    {"G#6", 1661.22}, {"A6", 1760.00}, {"A#6", 1864.66}, {"B6", 1975.53},

    {"C7", 2093.00}, {"C#7", 2217.46}, {"D7", 2349.32}
};

static const char* IdentifyNote(float freq) {
 8001fa8:	b480      	push	{r7}
 8001faa:	b087      	sub	sp, #28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	ed87 0a01 	vstr	s0, [r7, #4]
    float minDiff = 1e9f;			/* pradinis „begalinis“ skirtumas */
 8001fb2:	4b27      	ldr	r3, [pc, #156]	@ (8002050 <IdentifyNote+0xa8>)
 8001fb4:	617b      	str	r3, [r7, #20]
    const char* closestNote = "-";	/* kol kas nežinome artimiausios natos */
 8001fb6:	4b27      	ldr	r3, [pc, #156]	@ (8002054 <IdentifyNote+0xac>)
 8001fb8:	613b      	str	r3, [r7, #16]
    ref_note_freq = 0.0f;          /* iš naujo nustatyti kiekvieną kartą iškviečiant */
 8001fba:	4b27      	ldr	r3, [pc, #156]	@ (8002058 <IdentifyNote+0xb0>)
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]

    // rasti artimiausia natą
    for (int i = 0; i < sizeof(notes)/sizeof(notes[0]); i++) {
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	e029      	b.n	800201c <IdentifyNote+0x74>
        float diff = fabsf(freq - notes[i].freq);		/* absoliutus skirtumas */
 8001fc8:	4a24      	ldr	r2, [pc, #144]	@ (800205c <IdentifyNote+0xb4>)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4413      	add	r3, r2
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	edd3 7a00 	vldr	s15, [r3]
 8001fd6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001fda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fde:	eef0 7ae7 	vabs.f32	s15, s15
 8001fe2:	edc7 7a02 	vstr	s15, [r7, #8]
        if (diff < minDiff) {
 8001fe6:	ed97 7a02 	vldr	s14, [r7, #8]
 8001fea:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff6:	d50e      	bpl.n	8002016 <IdentifyNote+0x6e>
            minDiff = diff;						/* atnaujiname minimumą */
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	617b      	str	r3, [r7, #20]
            closestNote = notes[i].name;		/* įsimename pavadinimą */
 8001ffc:	4a17      	ldr	r2, [pc, #92]	@ (800205c <IdentifyNote+0xb4>)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002004:	613b      	str	r3, [r7, #16]
            ref_note_freq = notes[i].freq;    /* įsimename tikslų Hz  */
 8002006:	4a15      	ldr	r2, [pc, #84]	@ (800205c <IdentifyNote+0xb4>)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4413      	add	r3, r2
 800200e:	3304      	adds	r3, #4
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a11      	ldr	r2, [pc, #68]	@ (8002058 <IdentifyNote+0xb0>)
 8002014:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < sizeof(notes)/sizeof(notes[0]); i++) {
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	3301      	adds	r3, #1
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002020:	d9d2      	bls.n	8001fc8 <IdentifyNote+0x20>
        }
    }

    // Atmesti, jei skirtumas, paklaida per didelė (>3 % natų dažnio)
    if (minDiff > 0.03f * freq) {
 8002022:	edd7 7a01 	vldr	s15, [r7, #4]
 8002026:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002060 <IdentifyNote+0xb8>
 800202a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800202e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002032:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203a:	dd01      	ble.n	8002040 <IdentifyNote+0x98>
        return "-";
 800203c:	4b05      	ldr	r3, [pc, #20]	@ (8002054 <IdentifyNote+0xac>)
 800203e:	e000      	b.n	8002042 <IdentifyNote+0x9a>
    }

    return closestNote;
 8002040:	693b      	ldr	r3, [r7, #16]
}
 8002042:	4618      	mov	r0, r3
 8002044:	371c      	adds	r7, #28
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	4e6e6b28 	.word	0x4e6e6b28
 8002054:	08013364 	.word	0x08013364
 8002058:	20006530 	.word	0x20006530
 800205c:	20000008 	.word	0x20000008
 8002060:	3cf5c28f 	.word	0x3cf5c28f
 8002064:	00000000 	.word	0x00000000

08002068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	ed2d 8b02 	vpush	{d8}
 800206e:	b0b4      	sub	sp, #208	@ 0xd0
 8002070:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002072:	f004 faa9 	bl	80065c8 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002076:	f7fe fe93 	bl	8000da0 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800207a:	f000 fcad 	bl	80029d8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800207e:	f000 fd11 	bl	8002aa4 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002082:	f000 fdd5 	bl	8002c30 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002086:	f000 fefb 	bl	8002e80 <MX_GPIO_Init>
  MX_DMA_Init();
 800208a:	f000 fee7 	bl	8002e5c <MX_DMA_Init>
  MX_I2C1_Init();
 800208e:	f000 fd8f 	bl	8002bb0 <MX_I2C1_Init>
  MX_ADC1_Init();
 8002092:	f000 fd27 	bl	8002ae4 <MX_ADC1_Init>
  MX_RTC_Init();
 8002096:	f000 fde7 	bl	8002c68 <MX_RTC_Init>
  MX_TIM2_Init();
 800209a:	f000 fe19 	bl	8002cd0 <MX_TIM2_Init>
  MX_TIM17_Init();
 800209e:	f000 fe63 	bl	8002d68 <MX_TIM17_Init>
  MX_RF_Init();
 80020a2:	f000 fdd9 	bl	8002c58 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);     /* PA7 LED */
 80020a6:	2100      	movs	r1, #0
 80020a8:	48cf      	ldr	r0, [pc, #828]	@ (80023e8 <main+0x380>)
 80020aa:	f009 f843 	bl	800b134 <HAL_TIM_PWM_Start>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80020ae:	217f      	movs	r1, #127	@ 0x7f
 80020b0:	48ce      	ldr	r0, [pc, #824]	@ (80023ec <main+0x384>)
 80020b2:	f005 fc13 	bl	80078dc <HAL_ADCEx_Calibration_Start>
  sample_rate = 8000.0f;
 80020b6:	4bce      	ldr	r3, [pc, #824]	@ (80023f0 <main+0x388>)
 80020b8:	4ace      	ldr	r2, [pc, #824]	@ (80023f4 <main+0x38c>)
 80020ba:	601a      	str	r2, [r3, #0]
  min_bin = (MIN_FREQ_HZ * ADC_BUF_LEN) / (uint32_t)sample_rate;
 80020bc:	4bcc      	ldr	r3, [pc, #816]	@ (80023f0 <main+0x388>)
 80020be:	edd3 7a00 	vldr	s15, [r3]
 80020c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020c6:	ee17 2a90 	vmov	r2, s15
 80020ca:	f44f 330c 	mov.w	r3, #143360	@ 0x23000
 80020ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80020d2:	4ac9      	ldr	r2, [pc, #804]	@ (80023f8 <main+0x390>)
 80020d4:	6013      	str	r3, [r2, #0]
  max_bin = (MAX_FREQ_HZ * ADC_BUF_LEN) / (uint32_t)sample_rate;
 80020d6:	4bc6      	ldr	r3, [pc, #792]	@ (80023f0 <main+0x388>)
 80020d8:	edd3 7a00 	vldr	s15, [r3]
 80020dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020e0:	ee17 2a90 	vmov	r2, s15
 80020e4:	f44f 137a 	mov.w	r3, #4096000	@ 0x3e8000
 80020e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80020ec:	4ac3      	ldr	r2, [pc, #780]	@ (80023fc <main+0x394>)
 80020ee:	6013      	str	r3, [r2, #0]
  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN) != HAL_OK)
 80020f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020f4:	49c2      	ldr	r1, [pc, #776]	@ (8002400 <main+0x398>)
 80020f6:	48bd      	ldr	r0, [pc, #756]	@ (80023ec <main+0x384>)
 80020f8:	f004 fdf8 	bl	8006cec <HAL_ADC_Start_DMA>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <main+0x9e>
  Error_Handler();
 8002102:	f000 fedd 	bl	8002ec0 <Error_Handler>

  HAL_TIM_Base_Start(&htim2);                 // laikmatis paleidžiamas paskutinis
 8002106:	48bf      	ldr	r0, [pc, #764]	@ (8002404 <main+0x39c>)
 8002108:	f008 ff1e 	bl	800af48 <HAL_TIM_Base_Start>

  ssd1306_Init();
 800210c:	f004 f85c 	bl	80061c8 <ssd1306_Init>
  HAL_Delay(100);
 8002110:	2064      	movs	r0, #100	@ 0x64
 8002112:	f7fe ff80 	bl	8001016 <HAL_Delay>
  ssd1306_Fill(Black);
 8002116:	2000      	movs	r0, #0
 8002118:	f004 f8c0 	bl	800629c <ssd1306_Fill>
  ssd1306_SetCursor(0, 0);
 800211c:	2100      	movs	r1, #0
 800211e:	2000      	movs	r0, #0
 8002120:	f004 fa08 	bl	8006534 <ssd1306_SetCursor>
  ssd1306_WriteString("Gitaros", Font_16x15, White);
 8002124:	4bb8      	ldr	r3, [pc, #736]	@ (8002408 <main+0x3a0>)
 8002126:	2201      	movs	r2, #1
 8002128:	9200      	str	r2, [sp, #0]
 800212a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800212c:	48b7      	ldr	r0, [pc, #732]	@ (800240c <main+0x3a4>)
 800212e:	f004 f9db 	bl	80064e8 <ssd1306_WriteString>
  ssd1306_SetCursor(0, 15);
 8002132:	210f      	movs	r1, #15
 8002134:	2000      	movs	r0, #0
 8002136:	f004 f9fd 	bl	8006534 <ssd1306_SetCursor>
  ssd1306_WriteString("derintuvas", Font_16x15, White);
 800213a:	4bb3      	ldr	r3, [pc, #716]	@ (8002408 <main+0x3a0>)
 800213c:	2201      	movs	r2, #1
 800213e:	9200      	str	r2, [sp, #0]
 8002140:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002142:	48b3      	ldr	r0, [pc, #716]	@ (8002410 <main+0x3a8>)
 8002144:	f004 f9d0 	bl	80064e8 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8002148:	f004 f8c0 	bl	80062cc <ssd1306_UpdateScreen>

  arm_rfft_fast_instance_f32 fft;
  arm_rfft_fast_init_f32(&fft, ADC_BUF_LEN);
 800214c:	f107 0308 	add.w	r3, r7, #8
 8002150:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002154:	4618      	mov	r0, r3
 8002156:	f003 ff9d 	bl	8006094 <arm_rfft_fast_init_f32>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800215a:	f7fe fe2f 	bl	8000dbc <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(3000);
 800215e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002162:	f7fe ff58 	bl	8001016 <HAL_Delay>
  float mean_adc, freq, min_adc, max_adc;
  float avg_freq = 0.0f;
 8002166:	f04f 0300 	mov.w	r3, #0
 800216a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t maxBin;
  uint32_t last_update = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  const char* note;
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002174:	f7fe ff74 	bl	8001060 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    if (new_data_ready) {
 8002178:	4ba6      	ldr	r3, [pc, #664]	@ (8002414 <main+0x3ac>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 8396 	beq.w	80028b0 <main+0x848>
			// ADC duomenų apskaičiavimas
			mean_adc = 0.0f;
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			min_adc = 4096.0f;
 800218c:	f04f 438b 	mov.w	r3, #1166016512	@ 0x45800000
 8002190:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			max_adc = 0.0f;
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			for (int i = 0; i < ADC_BUF_LEN; i++) {
 800219c:	2300      	movs	r3, #0
 800219e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80021a2:	e049      	b.n	8002238 <main+0x1d0>
				mean_adc += adc_buf[i];
 80021a4:	4a96      	ldr	r2, [pc, #600]	@ (8002400 <main+0x398>)
 80021a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021ae:	ee07 3a90 	vmov	s15, r3
 80021b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b6:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 80021ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021be:	edc7 7a31 	vstr	s15, [r7, #196]	@ 0xc4
				if (adc_buf[i] < min_adc) min_adc = adc_buf[i];
 80021c2:	4a8f      	ldr	r2, [pc, #572]	@ (8002400 <main+0x398>)
 80021c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021cc:	ee07 3a90 	vmov	s15, r3
 80021d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021d4:	ed97 7a2f 	vldr	s14, [r7, #188]	@ 0xbc
 80021d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e0:	dd0a      	ble.n	80021f8 <main+0x190>
 80021e2:	4a87      	ldr	r2, [pc, #540]	@ (8002400 <main+0x398>)
 80021e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021ec:	ee07 3a90 	vmov	s15, r3
 80021f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021f4:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc
				if (adc_buf[i] > max_adc) max_adc = adc_buf[i];
 80021f8:	4a81      	ldr	r2, [pc, #516]	@ (8002400 <main+0x398>)
 80021fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002202:	ee07 3a90 	vmov	s15, r3
 8002206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800220a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800220e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002216:	d50a      	bpl.n	800222e <main+0x1c6>
 8002218:	4a79      	ldr	r2, [pc, #484]	@ (8002400 <main+0x398>)
 800221a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800221e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002222:	ee07 3a90 	vmov	s15, r3
 8002226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800222a:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
			for (int i = 0; i < ADC_BUF_LEN; i++) {
 800222e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002232:	3301      	adds	r3, #1
 8002234:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002238:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800223c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002240:	dbb0      	blt.n	80021a4 <main+0x13c>
			}
			mean_adc /= ADC_BUF_LEN;
 8002242:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 8002246:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8002418 <main+0x3b0>
 800224a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800224e:	edc7 7a31 	vstr	s15, [r7, #196]	@ 0xc4

			// DC pašalinimas + Blackman-Harris langas
			for (int i = 0; i < ADC_BUF_LEN; i++) {
 8002252:	2300      	movs	r3, #0
 8002254:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002258:	e08f      	b.n	800237a <main+0x312>
				float window = 0.35875f -
							   0.48829f * cosf(2 * M_PI * i / (ADC_BUF_LEN - 1)) +
 800225a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800225e:	f7fe f939 	bl	80004d4 <__aeabi_i2d>
 8002262:	a359      	add	r3, pc, #356	@ (adr r3, 80023c8 <main+0x360>)
 8002264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002268:	f7fe f99e 	bl	80005a8 <__aeabi_dmul>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	a356      	add	r3, pc, #344	@ (adr r3, 80023d0 <main+0x368>)
 8002276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227a:	f7fe fabf 	bl	80007fc <__aeabi_ddiv>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4610      	mov	r0, r2
 8002284:	4619      	mov	r1, r3
 8002286:	f7fe fc67 	bl	8000b58 <__aeabi_d2f>
 800228a:	4603      	mov	r3, r0
 800228c:	ee00 3a10 	vmov	s0, r3
 8002290:	f010 f99e 	bl	80125d0 <cosf>
 8002294:	eef0 7a40 	vmov.f32	s15, s0
 8002298:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 800241c <main+0x3b4>
 800229c:	ee67 7a87 	vmul.f32	s15, s15, s14
				float window = 0.35875f -
 80022a0:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8002420 <main+0x3b8>
 80022a4:	ee37 8a67 	vsub.f32	s16, s14, s15
							   0.14128f * cosf(4 * M_PI * i / (ADC_BUF_LEN - 1)) -
 80022a8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80022ac:	f7fe f912 	bl	80004d4 <__aeabi_i2d>
 80022b0:	a349      	add	r3, pc, #292	@ (adr r3, 80023d8 <main+0x370>)
 80022b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b6:	f7fe f977 	bl	80005a8 <__aeabi_dmul>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	4610      	mov	r0, r2
 80022c0:	4619      	mov	r1, r3
 80022c2:	a343      	add	r3, pc, #268	@ (adr r3, 80023d0 <main+0x368>)
 80022c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c8:	f7fe fa98 	bl	80007fc <__aeabi_ddiv>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4610      	mov	r0, r2
 80022d2:	4619      	mov	r1, r3
 80022d4:	f7fe fc40 	bl	8000b58 <__aeabi_d2f>
 80022d8:	4603      	mov	r3, r0
 80022da:	ee00 3a10 	vmov	s0, r3
 80022de:	f010 f977 	bl	80125d0 <cosf>
 80022e2:	eef0 7a40 	vmov.f32	s15, s0
 80022e6:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8002424 <main+0x3bc>
 80022ea:	ee67 7a87 	vmul.f32	s15, s15, s14
							   0.48829f * cosf(2 * M_PI * i / (ADC_BUF_LEN - 1)) +
 80022ee:	ee38 8a27 	vadd.f32	s16, s16, s15
							   0.01168f * cosf(6 * M_PI * i / (ADC_BUF_LEN - 1));
 80022f2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80022f6:	f7fe f8ed 	bl	80004d4 <__aeabi_i2d>
 80022fa:	a339      	add	r3, pc, #228	@ (adr r3, 80023e0 <main+0x378>)
 80022fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002300:	f7fe f952 	bl	80005a8 <__aeabi_dmul>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	a330      	add	r3, pc, #192	@ (adr r3, 80023d0 <main+0x368>)
 800230e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002312:	f7fe fa73 	bl	80007fc <__aeabi_ddiv>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	4610      	mov	r0, r2
 800231c:	4619      	mov	r1, r3
 800231e:	f7fe fc1b 	bl	8000b58 <__aeabi_d2f>
 8002322:	4603      	mov	r3, r0
 8002324:	ee00 3a10 	vmov	s0, r3
 8002328:	f010 f952 	bl	80125d0 <cosf>
 800232c:	eef0 7a40 	vmov.f32	s15, s0
 8002330:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8002428 <main+0x3c0>
 8002334:	ee67 7a87 	vmul.f32	s15, s15, s14
				float window = 0.35875f -
 8002338:	ee78 7a67 	vsub.f32	s15, s16, s15
 800233c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
				fft_input[i] = ((float)adc_buf[i] - mean_adc) * window;
 8002340:	4a2f      	ldr	r2, [pc, #188]	@ (8002400 <main+0x398>)
 8002342:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002346:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800234a:	ee07 3a90 	vmov	s15, r3
 800234e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002352:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8002356:	ee37 7a67 	vsub.f32	s14, s14, s15
 800235a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800235e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002362:	4a32      	ldr	r2, [pc, #200]	@ (800242c <main+0x3c4>)
 8002364:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	edc3 7a00 	vstr	s15, [r3]
			for (int i = 0; i < ADC_BUF_LEN; i++) {
 8002370:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002374:	3301      	adds	r3, #1
 8002376:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800237a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800237e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002382:	f6ff af6a 	blt.w	800225a <main+0x1f2>
			}

			// FFT transformacija ir amplitudžių apskaičiavimas
			arm_rfft_fast_f32(&fft, fft_input, fft_output, 0);
 8002386:	f107 0008 	add.w	r0, r7, #8
 800238a:	2300      	movs	r3, #0
 800238c:	4a28      	ldr	r2, [pc, #160]	@ (8002430 <main+0x3c8>)
 800238e:	4927      	ldr	r1, [pc, #156]	@ (800242c <main+0x3c4>)
 8002390:	f003 fd16 	bl	8005dc0 <arm_rfft_fast_f32>
			arm_cmplx_mag_f32(fft_output, magnitudes, ADC_BUF_LEN / 2);
 8002394:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002398:	4926      	ldr	r1, [pc, #152]	@ (8002434 <main+0x3cc>)
 800239a:	4825      	ldr	r0, [pc, #148]	@ (8002430 <main+0x3c8>)
 800239c:	f001 f9e1 	bl	8003762 <arm_cmplx_mag_f32>

			// Scale magnitudes
			float norm = 2.0f / (float)ADC_BUF_LEN;
 80023a0:	f04f 536a 	mov.w	r3, #981467136	@ 0x3a800000
 80023a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
			arm_scale_f32(magnitudes, norm, magnitudes, ADC_BUF_LEN / 2);
 80023a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023aa:	4922      	ldr	r1, [pc, #136]	@ (8002434 <main+0x3cc>)
 80023ac:	ed97 0a1b 	vldr	s0, [r7, #108]	@ 0x6c
 80023b0:	4820      	ldr	r0, [pc, #128]	@ (8002434 <main+0x3cc>)
 80023b2:	f001 f9b0 	bl	8003716 <arm_scale_f32>

			// Triukšmo žemutinė riba
			float noise_floor = 0.0f;
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			for (uint32_t i = 0; i < ADC_BUF_LEN / 2; i++) {
 80023be:	2300      	movs	r3, #0
 80023c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80023c4:	e04a      	b.n	800245c <main+0x3f4>
 80023c6:	bf00      	nop
 80023c8:	54442d18 	.word	0x54442d18
 80023cc:	401921fb 	.word	0x401921fb
 80023d0:	00000000 	.word	0x00000000
 80023d4:	409ffc00 	.word	0x409ffc00
 80023d8:	54442d18 	.word	0x54442d18
 80023dc:	402921fb 	.word	0x402921fb
 80023e0:	7f3321d2 	.word	0x7f3321d2
 80023e4:	4032d97c 	.word	0x4032d97c
 80023e8:	200066f8 	.word	0x200066f8
 80023ec:	20006534 	.word	0x20006534
 80023f0:	2000652c 	.word	0x2000652c
 80023f4:	45fa0000 	.word	0x45fa0000
 80023f8:	20000500 	.word	0x20000500
 80023fc:	20000504 	.word	0x20000504
 8002400:	2000050c 	.word	0x2000050c
 8002404:	200066ac 	.word	0x200066ac
 8002408:	080291fc 	.word	0x080291fc
 800240c:	08013368 	.word	0x08013368
 8002410:	08013370 	.word	0x08013370
 8002414:	20000508 	.word	0x20000508
 8002418:	45000000 	.word	0x45000000
 800241c:	3efa0126 	.word	0x3efa0126
 8002420:	3eb7ae14 	.word	0x3eb7ae14
 8002424:	3e10abb4 	.word	0x3e10abb4
 8002428:	3c3f5d79 	.word	0x3c3f5d79
 800242c:	2000150c 	.word	0x2000150c
 8002430:	2000350c 	.word	0x2000350c
 8002434:	2000550c 	.word	0x2000550c
				noise_floor += magnitudes[i];
 8002438:	4ab2      	ldr	r2, [pc, #712]	@ (8002704 <main+0x69c>)
 800243a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	edd3 7a00 	vldr	s15, [r3]
 8002446:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 800244a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800244e:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
			for (uint32_t i = 0; i < ADC_BUF_LEN / 2; i++) {
 8002452:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002456:	3301      	adds	r3, #1
 8002458:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800245c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002460:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002464:	d3e8      	bcc.n	8002438 <main+0x3d0>
			}
			noise_floor /= (ADC_BUF_LEN / 2);
 8002466:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 800246a:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8002708 <main+0x6a0>
 800246e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002472:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0

			// Nustatomas slenkstis
			float threshold = 20.0f * noise_floor;
 8002476:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 800247a:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800247e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002482:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

			// Rasti pirmą imtį virš slenksčio
			uint32_t i = min_bin;
 8002486:	4ba1      	ldr	r3, [pc, #644]	@ (800270c <main+0x6a4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			while (i <= max_bin && magnitudes[i] <= threshold) {
 800248e:	e004      	b.n	800249a <main+0x432>
				i++;
 8002490:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002494:	3301      	adds	r3, #1
 8002496:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			while (i <= max_bin && magnitudes[i] <= threshold) {
 800249a:	4b9d      	ldr	r3, [pc, #628]	@ (8002710 <main+0x6a8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d80d      	bhi.n	80024c2 <main+0x45a>
 80024a6:	4a97      	ldr	r2, [pc, #604]	@ (8002704 <main+0x69c>)
 80024a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	edd3 7a00 	vldr	s15, [r3]
 80024b4:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 80024b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c0:	dae6      	bge.n	8002490 <main+0x428>
			}

			if (i > max_bin || (max_adc - min_adc) <= 5) {
 80024c2:	4b93      	ldr	r3, [pc, #588]	@ (8002710 <main+0x6a8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d80c      	bhi.n	80024e8 <main+0x480>
 80024ce:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80024d2:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 80024d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024da:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80024de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e6:	d807      	bhi.n	80024f8 <main+0x490>
				freq = 0.0f;
 80024e8:	f04f 0300 	mov.w	r3, #0
 80024ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
				note = "-";
 80024f0:	4b88      	ldr	r3, [pc, #544]	@ (8002714 <main+0x6ac>)
 80024f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80024f6:	e0b2      	b.n	800265e <main+0x5f6>
			} else {
				// Rasti vietinį maksimumą aplink i
				uint32_t start = (i > 2) ? i - 2 : min_bin;
 80024f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d903      	bls.n	8002508 <main+0x4a0>
 8002500:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002504:	3b02      	subs	r3, #2
 8002506:	e001      	b.n	800250c <main+0x4a4>
 8002508:	4b80      	ldr	r3, [pc, #512]	@ (800270c <main+0x6a4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	667b      	str	r3, [r7, #100]	@ 0x64
				uint32_t end = (i + 2 < ADC_BUF_LEN / 2) ? i + 2 : max_bin;
 800250e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002512:	3302      	adds	r3, #2
 8002514:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002518:	d203      	bcs.n	8002522 <main+0x4ba>
 800251a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800251e:	3302      	adds	r3, #2
 8002520:	e001      	b.n	8002526 <main+0x4be>
 8002522:	4b7b      	ldr	r3, [pc, #492]	@ (8002710 <main+0x6a8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	663b      	str	r3, [r7, #96]	@ 0x60
				uint32_t local_max_bin = start;
 8002528:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800252a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
				float local_max_mag = magnitudes[start];
 800252e:	4a75      	ldr	r2, [pc, #468]	@ (8002704 <main+0x69c>)
 8002530:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

				for (uint32_t j = start + 1; j <= end; j++) {
 800253c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800253e:	3301      	adds	r3, #1
 8002540:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002544:	e01e      	b.n	8002584 <main+0x51c>
					if (magnitudes[j] > local_max_mag) {
 8002546:	4a6f      	ldr	r2, [pc, #444]	@ (8002704 <main+0x69c>)
 8002548:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	edd3 7a00 	vldr	s15, [r3]
 8002554:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8002558:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800255c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002560:	d50b      	bpl.n	800257a <main+0x512>
						local_max_mag = magnitudes[j];
 8002562:	4a68      	ldr	r2, [pc, #416]	@ (8002704 <main+0x69c>)
 8002564:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
						local_max_bin = j;
 8002572:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002576:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
				for (uint32_t j = start + 1; j <= end; j++) {
 800257a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800257e:	3301      	adds	r3, #1
 8002580:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002584:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002588:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800258a:	429a      	cmp	r2, r3
 800258c:	d9db      	bls.n	8002546 <main+0x4de>
					}
				}
				maxBin = local_max_bin;
 800258e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002592:	65fb      	str	r3, [r7, #92]	@ 0x5c

				// Kvadratinė interpoliacija dažnio tikslinimui
				if (maxBin > 0 && maxBin < ADC_BUF_LEN / 2 - 1) {
 8002594:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002596:	2b00      	cmp	r3, #0
 8002598:	d04b      	beq.n	8002632 <main+0x5ca>
 800259a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800259c:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d846      	bhi.n	8002632 <main+0x5ca>
					float y1 = magnitudes[maxBin - 1];
 80025a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025a6:	3b01      	subs	r3, #1
 80025a8:	4a56      	ldr	r2, [pc, #344]	@ (8002704 <main+0x69c>)
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	65bb      	str	r3, [r7, #88]	@ 0x58
					float y2 = magnitudes[maxBin];
 80025b2:	4a54      	ldr	r2, [pc, #336]	@ (8002704 <main+0x69c>)
 80025b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	657b      	str	r3, [r7, #84]	@ 0x54
					float y3 = magnitudes[maxBin + 1];
 80025be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025c0:	3301      	adds	r3, #1
 80025c2:	4a50      	ldr	r2, [pc, #320]	@ (8002704 <main+0x69c>)
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	653b      	str	r3, [r7, #80]	@ 0x50
					float delta = 0.5f * (y3 - y1) / (2.0f * y2 - y1 - y3);
 80025cc:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80025d0:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80025d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025d8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80025dc:	ee67 6a87 	vmul.f32	s13, s15, s14
 80025e0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80025e4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80025e8:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80025ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025f0:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80025f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025fc:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
					float fractionalBin = maxBin + delta;
 8002600:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002602:	ee07 3a90 	vmov	s15, r3
 8002606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800260a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800260e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002612:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
					freq = fractionalBin * sample_rate / ADC_BUF_LEN;
 8002616:	4b40      	ldr	r3, [pc, #256]	@ (8002718 <main+0x6b0>)
 8002618:	ed93 7a00 	vldr	s14, [r3]
 800261c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002620:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002624:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800271c <main+0x6b4>
 8002628:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800262c:	edc7 7a30 	vstr	s15, [r7, #192]	@ 0xc0
				if (maxBin > 0 && maxBin < ADC_BUF_LEN / 2 - 1) {
 8002630:	e00f      	b.n	8002652 <main+0x5ea>
				} else {
					freq = maxBin * sample_rate / ADC_BUF_LEN;
 8002632:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002634:	ee07 3a90 	vmov	s15, r3
 8002638:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800263c:	4b36      	ldr	r3, [pc, #216]	@ (8002718 <main+0x6b0>)
 800263e:	edd3 7a00 	vldr	s15, [r3]
 8002642:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002646:	eddf 6a35 	vldr	s13, [pc, #212]	@ 800271c <main+0x6b4>
 800264a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800264e:	edc7 7a30 	vstr	s15, [r7, #192]	@ 0xc0
				}

				note = IdentifyNote(freq);
 8002652:	ed97 0a30 	vldr	s0, [r7, #192]	@ 0xc0
 8002656:	f7ff fca7 	bl	8001fa8 <IdentifyNote>
 800265a:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
			}

			// Laikyti dažnį buferyje ir patikrinti stabilumą
			if (freq > 0) {                       /* Tik jeigu aptiktas dažnis yra > 0 Hz  */
 800265e:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8002662:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266a:	f340 80a2 	ble.w	80027b2 <main+0x74a>
			    /* Įdedame naujausią matavimą į žiedinį buferį */
			    freq_buffer[freq_index] = freq;   /* įrašome dažnį į einamą poziciją       */
 800266e:	4b2c      	ldr	r3, [pc, #176]	@ (8002720 <main+0x6b8>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	4a2c      	ldr	r2, [pc, #176]	@ (8002724 <main+0x6bc>)
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800267c:	601a      	str	r2, [r3, #0]
			    freq_index = (freq_index + 1) % AVG_FRAMES;     /* žiedo rodyklė pirmyn   */
 800267e:	4b28      	ldr	r3, [pc, #160]	@ (8002720 <main+0x6b8>)
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]

			    /* Suskaičiuojame vidurkį ir standartinį nuokrypį buferyje */
			    float sum = 0.0f;
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			    int   valid_count = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			    for (int k = 0; k < AVG_FRAMES; k++) {
 8002692:	2300      	movs	r3, #0
 8002694:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002698:	e022      	b.n	80026e0 <main+0x678>
			        if (freq_buffer[k] > 0) {     /* ignoruojame tuščias (0 Hz) vietas     */
 800269a:	4a22      	ldr	r2, [pc, #136]	@ (8002724 <main+0x6bc>)
 800269c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	edd3 7a00 	vldr	s15, [r3]
 80026a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b0:	dd11      	ble.n	80026d6 <main+0x66e>
			            sum += freq_buffer[k];
 80026b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002724 <main+0x6bc>)
 80026b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	edd3 7a00 	vldr	s15, [r3]
 80026c0:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 80026c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026c8:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
			            valid_count++;
 80026cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026d0:	3301      	adds	r3, #1
 80026d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			    for (int k = 0; k < AVG_FRAMES; k++) {
 80026d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026da:	3301      	adds	r3, #1
 80026dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80026e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	ddd8      	ble.n	800269a <main+0x632>
			        }
			    }

			    if (valid_count == AVG_FRAMES) {  /* buferis pilnas, galima vertinti      */
 80026e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d158      	bne.n	80027a2 <main+0x73a>
			        float mean_freq = sum / AVG_FRAMES;
 80026f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026f4:	647b      	str	r3, [r7, #68]	@ 0x44

			        /* standartinio nuokrypio formulė */
			        float sum_sq_diff = 0.0f;
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
			        for (int k = 0; k < AVG_FRAMES; k++) {
 80026fc:	2300      	movs	r3, #0
 80026fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002700:	e02b      	b.n	800275a <main+0x6f2>
 8002702:	bf00      	nop
 8002704:	2000550c 	.word	0x2000550c
 8002708:	44800000 	.word	0x44800000
 800270c:	20000500 	.word	0x20000500
 8002710:	20000504 	.word	0x20000504
 8002714:	08013364 	.word	0x08013364
 8002718:	2000652c 	.word	0x2000652c
 800271c:	45000000 	.word	0x45000000
 8002720:	200004fc 	.word	0x200004fc
 8002724:	200004f8 	.word	0x200004f8
			            float diff = freq_buffer[k] - mean_freq;
 8002728:	4a9f      	ldr	r2, [pc, #636]	@ (80029a8 <main+0x940>)
 800272a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	ed93 7a00 	vldr	s14, [r3]
 8002734:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800273c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
			            sum_sq_diff += diff * diff;
 8002740:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002744:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002748:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 800274c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002750:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
			        for (int k = 0; k < AVG_FRAMES; k++) {
 8002754:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002756:	3301      	adds	r3, #1
 8002758:	67bb      	str	r3, [r7, #120]	@ 0x78
 800275a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800275c:	2b00      	cmp	r3, #0
 800275e:	dde3      	ble.n	8002728 <main+0x6c0>
			        }
			        float std_dev = sqrtf(sum_sq_diff / AVG_FRAMES);
 8002760:	ed97 0a1f 	vldr	s0, [r7, #124]	@ 0x7c
 8002764:	f00f ff16 	bl	8012594 <sqrtf>
 8002768:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40

			        /* 3) Patikriname, ar dažnis pakankamai stabilus */
			        if (std_dev < STABILITY_THRESHOLD) {
 800276c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002770:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8002774:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800277c:	d509      	bpl.n	8002792 <main+0x72a>
			            avg_freq = mean_freq;             /* išlyginame („debounce“)       */
 800277e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002780:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			            note     = IdentifyNote(avg_freq);/* nustatome artimiausią natą    */
 8002784:	ed97 0a2d 	vldr	s0, [r7, #180]	@ 0xb4
 8002788:	f7ff fc0e 	bl	8001fa8 <IdentifyNote>
 800278c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8002790:	e016      	b.n	80027c0 <main+0x758>
			        } else {
			            note     = "-";                   /* per dideli svyravimai         */
 8002792:	4b86      	ldr	r3, [pc, #536]	@ (80029ac <main+0x944>)
 8002794:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			            avg_freq = 0.0f;
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027a0:	e00e      	b.n	80027c0 <main+0x758>
			        }
			    } else {                          /* buferis dar neužsipildė: laukiame     */
			        note     = "-";
 80027a2:	4b82      	ldr	r3, [pc, #520]	@ (80029ac <main+0x944>)
 80027a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			        avg_freq = 0.0f;
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027b0:	e006      	b.n	80027c0 <main+0x758>
			    }

			} else {                              /* signalas nerastas         */
			    note     = "-";
 80027b2:	4b7e      	ldr	r3, [pc, #504]	@ (80029ac <main+0x944>)
 80027b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			    avg_freq = 0.0f;
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			}

			// BLE atnaujinimas
			if (APP_BLE_Get_Server_Connection_Status() == APP_BLE_CONNECTED_SERVER) {
 80027c0:	f00c f802 	bl	800e7c8 <APP_BLE_Get_Server_Connection_Status>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b05      	cmp	r3, #5
 80027c8:	d134      	bne.n	8002834 <main+0x7cc>
				char msg[8] = {0};
 80027ca:	463b      	mov	r3, r7
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
				if (avg_freq > 0) {
 80027d2:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80027d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027de:	dd0d      	ble.n	80027fc <main+0x794>
					snprintf(msg, sizeof(msg), "%5.1f", avg_freq);
 80027e0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 80027e4:	f7fd fe88 	bl	80004f8 <__aeabi_f2d>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4638      	mov	r0, r7
 80027ee:	e9cd 2300 	strd	r2, r3, [sp]
 80027f2:	4a6f      	ldr	r2, [pc, #444]	@ (80029b0 <main+0x948>)
 80027f4:	2108      	movs	r1, #8
 80027f6:	f00d fd55 	bl	80102a4 <sniprintf>
 80027fa:	e005      	b.n	8002808 <main+0x7a0>
				} else {
					snprintf(msg, sizeof(msg), "     ");
 80027fc:	463b      	mov	r3, r7
 80027fe:	4a6d      	ldr	r2, [pc, #436]	@ (80029b4 <main+0x94c>)
 8002800:	2108      	movs	r1, #8
 8002802:	4618      	mov	r0, r3
 8002804:	f00d fd4e 	bl	80102a4 <sniprintf>
				}
				for (size_t i = strlen(msg); i < sizeof(msg); ++i) msg[i] = ' ';
 8002808:	463b      	mov	r3, r7
 800280a:	4618      	mov	r0, r3
 800280c:	f7fd fd08 	bl	8000220 <strlen>
 8002810:	6778      	str	r0, [r7, #116]	@ 0x74
 8002812:	e007      	b.n	8002824 <main+0x7bc>
 8002814:	463a      	mov	r2, r7
 8002816:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002818:	4413      	add	r3, r2
 800281a:	2220      	movs	r2, #32
 800281c:	701a      	strb	r2, [r3, #0]
 800281e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002820:	3301      	adds	r3, #1
 8002822:	677b      	str	r3, [r7, #116]	@ 0x74
 8002824:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002826:	2b07      	cmp	r3, #7
 8002828:	d9f4      	bls.n	8002814 <main+0x7ac>
				Custom_STM_App_Update_Char(CUSTOM_STM_CHARCAST, (uint8_t*)msg);
 800282a:	463b      	mov	r3, r7
 800282c:	4619      	mov	r1, r3
 800282e:	2000      	movs	r0, #0
 8002830:	f00c facc 	bl	800edcc <Custom_STM_App_Update_Char>
			}

			// Ekrano atnaujinimas
			Display_Debug_Info(note, avg_freq);
 8002834:	ed97 0a2d 	vldr	s0, [r7, #180]	@ 0xb4
 8002838:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800283c:	f7ff fb74 	bl	8001f28 <Display_Debug_Info>
			float cents = 0.0f;
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	673b      	str	r3, [r7, #112]	@ 0x70
			if (avg_freq > 0.5f && ref_note_freq > 0.0f) {
 8002846:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800284a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800284e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002856:	dd1e      	ble.n	8002896 <main+0x82e>
 8002858:	4b57      	ldr	r3, [pc, #348]	@ (80029b8 <main+0x950>)
 800285a:	edd3 7a00 	vldr	s15, [r3]
 800285e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002866:	dd16      	ble.n	8002896 <main+0x82e>
				#ifndef log2f
				#define log2f(x) (logf(x) * 1.442695041f)
				#endif
				cents = 1200.0f * log2f(avg_freq / ref_note_freq);
 8002868:	4b53      	ldr	r3, [pc, #332]	@ (80029b8 <main+0x950>)
 800286a:	edd3 7a00 	vldr	s15, [r3]
 800286e:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8002872:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002876:	eeb0 0a66 	vmov.f32	s0, s13
 800287a:	f00f fe5d 	bl	8012538 <logf>
 800287e:	eef0 7a40 	vmov.f32	s15, s0
 8002882:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80029bc <main+0x954>
 8002886:	ee67 7a87 	vmul.f32	s15, s15, s14
 800288a:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80029c0 <main+0x958>
 800288e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002892:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
			}
			draw_slider(cents);
 8002896:	ed97 0a1c 	vldr	s0, [r7, #112]	@ 0x70
 800289a:	f7ff faa9 	bl	8001df0 <draw_slider>
			ssd1306_UpdateScreen();
 800289e:	f003 fd15 	bl	80062cc <ssd1306_UpdateScreen>

			new_data_ready = 0;
 80028a2:	4b48      	ldr	r3, [pc, #288]	@ (80029c4 <main+0x95c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]
			last_update = HAL_GetTick();
 80028a8:	f003 fec2 	bl	8006630 <HAL_GetTick>
 80028ac:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0


    static uint32_t             led_last    = 0;     /* paskutine busena   */
    static uint8_t              led_on      = 0;     /* 0 = OFF, 1 = ON      */
    static uint8_t              pulse_count = 0;
    const uint32_t now = HAL_GetTick();
 80028b0:	f003 febe 	bl	8006630 <HAL_GetTick>
 80028b4:	6378      	str	r0, [r7, #52]	@ 0x34

    const uint32_t ON_MS     = 100;   /* ijungto LED laikas ms                       */
 80028b6:	2364      	movs	r3, #100	@ 0x64
 80028b8:	633b      	str	r3, [r7, #48]	@ 0x30
    const uint32_t GAP_IDLE  = 4000;  /* tarpas po vieno mirktelejimo (idle)     */
 80028ba:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80028be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t GAP_TRAIN = 100;   /* tarpas tarp trigubų impulsų       */
 80028c0:	2364      	movs	r3, #100	@ 0x64
 80028c2:	62bb      	str	r3, [r7, #40]	@ 0x28

    APP_BLE_ConnStatus_t conn = APP_BLE_Get_Server_Connection_Status();
 80028c4:	f00b ff80 	bl	800e7c8 <APP_BLE_Get_Server_Connection_Status>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bool connected = (conn == APP_BLE_CONNECTED_SERVER ||
 80028ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028d2:	2b05      	cmp	r3, #5
 80028d4:	d003      	beq.n	80028de <main+0x876>
 80028d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028da:	2b06      	cmp	r3, #6
 80028dc:	d101      	bne.n	80028e2 <main+0x87a>
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <main+0x87c>
 80028e2:	2300      	movs	r3, #0
 80028e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80028e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                      conn == APP_BLE_CONNECTED_CLIENT);

    /* -------- būsenos mašina ------------------------------------------- */
    if (led_on) {                                          /* LEDas ON  */
 80028f4:	4b34      	ldr	r3, [pc, #208]	@ (80029c8 <main+0x960>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d017      	beq.n	800292c <main+0x8c4>
        if (now - led_last >= ON_MS) {
 80028fc:	4b33      	ldr	r3, [pc, #204]	@ (80029cc <main+0x964>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002906:	429a      	cmp	r2, r3
 8002908:	d83e      	bhi.n	8002988 <main+0x920>
        	__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, LED_OFF_DUTY);
 800290a:	4b31      	ldr	r3, [pc, #196]	@ (80029d0 <main+0x968>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2200      	movs	r2, #0
 8002910:	635a      	str	r2, [r3, #52]	@ 0x34
            led_on   = 0;
 8002912:	4b2d      	ldr	r3, [pc, #180]	@ (80029c8 <main+0x960>)
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
            led_last = now;
 8002918:	4a2c      	ldr	r2, [pc, #176]	@ (80029cc <main+0x964>)
 800291a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800291c:	6013      	str	r3, [r2, #0]
            pulse_count++;                                 /* vienas pulsas atliktas    */
 800291e:	4b2d      	ldr	r3, [pc, #180]	@ (80029d4 <main+0x96c>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	3301      	adds	r3, #1
 8002924:	b2da      	uxtb	r2, r3
 8002926:	4b2b      	ldr	r3, [pc, #172]	@ (80029d4 <main+0x96c>)
 8002928:	701a      	strb	r2, [r3, #0]
 800292a:	e02d      	b.n	8002988 <main+0x920>
        }
    } else {                                               /* LEDas OFF */
        uint32_t gap = connected
                       ? (pulse_count < 3 ? GAP_TRAIN : GAP_IDLE)
                       : GAP_IDLE;
 800292c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002930:	2b00      	cmp	r3, #0
 8002932:	d007      	beq.n	8002944 <main+0x8dc>
                       ? (pulse_count < 3 ? GAP_TRAIN : GAP_IDLE)
 8002934:	4b27      	ldr	r3, [pc, #156]	@ (80029d4 <main+0x96c>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b02      	cmp	r3, #2
 800293a:	d801      	bhi.n	8002940 <main+0x8d8>
 800293c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293e:	e002      	b.n	8002946 <main+0x8de>
 8002940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002942:	e000      	b.n	8002946 <main+0x8de>
                       : GAP_IDLE;
 8002944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        uint32_t gap = connected
 8002946:	623b      	str	r3, [r7, #32]
        if (now - led_last >= gap) {
 8002948:	4b20      	ldr	r3, [pc, #128]	@ (80029cc <main+0x964>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	6a3a      	ldr	r2, [r7, #32]
 8002952:	429a      	cmp	r2, r3
 8002954:	d818      	bhi.n	8002988 <main+0x920>
        	__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, LED_ON_DUTY);
 8002956:	4b1e      	ldr	r3, [pc, #120]	@ (80029d0 <main+0x968>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800295e:	635a      	str	r2, [r3, #52]	@ 0x34
            led_on   = 1;
 8002960:	4b19      	ldr	r3, [pc, #100]	@ (80029c8 <main+0x960>)
 8002962:	2201      	movs	r2, #1
 8002964:	701a      	strb	r2, [r3, #0]
            led_last = now;
 8002966:	4a19      	ldr	r2, [pc, #100]	@ (80029cc <main+0x964>)
 8002968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800296a:	6013      	str	r3, [r2, #0]
            if (!connected || pulse_count >= 3)            /* restartuoti seka */
 800296c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002970:	f083 0301 	eor.w	r3, r3, #1
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d103      	bne.n	8002982 <main+0x91a>
 800297a:	4b16      	ldr	r3, [pc, #88]	@ (80029d4 <main+0x96c>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d902      	bls.n	8002988 <main+0x920>
                pulse_count = 0;
 8002982:	4b14      	ldr	r3, [pc, #80]	@ (80029d4 <main+0x96c>)
 8002984:	2200      	movs	r2, #0
 8002986:	701a      	strb	r2, [r3, #0]
        }
    }

	if (HAL_GetTick() - last_update >= 50) {
 8002988:	f003 fe52 	bl	8006630 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b31      	cmp	r3, #49	@ 0x31
 8002996:	f67f abed 	bls.w	8002174 <main+0x10c>
		last_update = HAL_GetTick();
 800299a:	f003 fe49 	bl	8006630 <HAL_GetTick>
 800299e:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
  {
 80029a2:	f7ff bbe7 	b.w	8002174 <main+0x10c>
 80029a6:	bf00      	nop
 80029a8:	200004f8 	.word	0x200004f8
 80029ac:	08013364 	.word	0x08013364
 80029b0:	0801337c 	.word	0x0801337c
 80029b4:	08013384 	.word	0x08013384
 80029b8:	20006530 	.word	0x20006530
 80029bc:	3fb8aa3b 	.word	0x3fb8aa3b
 80029c0:	44960000 	.word	0x44960000
 80029c4:	20000508 	.word	0x20000508
 80029c8:	20006744 	.word	0x20006744
 80029cc:	20006748 	.word	0x20006748
 80029d0:	200066f8 	.word	0x200066f8
 80029d4:	2000674c 	.word	0x2000674c

080029d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b09a      	sub	sp, #104	@ 0x68
 80029dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029de:	f107 0320 	add.w	r3, r7, #32
 80029e2:	2248      	movs	r2, #72	@ 0x48
 80029e4:	2100      	movs	r1, #0
 80029e6:	4618      	mov	r0, r3
 80029e8:	f00d fcd5 	bl	8010396 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029ec:	1d3b      	adds	r3, r7, #4
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	605a      	str	r2, [r3, #4]
 80029f4:	609a      	str	r2, [r3, #8]
 80029f6:	60da      	str	r2, [r3, #12]
 80029f8:	611a      	str	r2, [r3, #16]
 80029fa:	615a      	str	r2, [r3, #20]
 80029fc:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029fe:	4b28      	ldr	r3, [pc, #160]	@ (8002aa0 <SystemClock_Config+0xc8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a06:	4a26      	ldr	r2, [pc, #152]	@ (8002aa0 <SystemClock_Config+0xc8>)
 8002a08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	4b24      	ldr	r3, [pc, #144]	@ (8002aa0 <SystemClock_Config+0xc8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a16:	603b      	str	r3, [r7, #0]
 8002a18:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8002a1a:	230b      	movs	r3, #11
 8002a1c:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a22:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a2a:	2340      	movs	r3, #64	@ 0x40
 8002a2c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002a2e:	2305      	movs	r3, #5
 8002a30:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a32:	2302      	movs	r3, #2
 8002a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a36:	2303      	movs	r3, #3
 8002a38:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002a3a:	2310      	movs	r3, #16
 8002a3c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002a3e:	2308      	movs	r3, #8
 8002a40:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a42:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a46:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002a48:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002a4c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002a4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a52:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a54:	f107 0320 	add.w	r3, r7, #32
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f006 fdef 	bl	800963c <HAL_RCC_OscConfig>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002a64:	f000 fa2c 	bl	8002ec0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002a68:	236f      	movs	r3, #111	@ 0x6f
 8002a6a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a74:	2300      	movs	r3, #0
 8002a76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8002a7c:	2380      	movs	r3, #128	@ 0x80
 8002a7e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002a80:	2300      	movs	r3, #0
 8002a82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002a84:	1d3b      	adds	r3, r7, #4
 8002a86:	2103      	movs	r1, #3
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f007 f94b 	bl	8009d24 <HAL_RCC_ClockConfig>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002a94:	f000 fa14 	bl	8002ec0 <Error_Handler>
  }
}
 8002a98:	bf00      	nop
 8002a9a:	3768      	adds	r7, #104	@ 0x68
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	58000400 	.word	0x58000400

08002aa4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b094      	sub	sp, #80	@ 0x50
 8002aa8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002aaa:	463b      	mov	r3, r7
 8002aac:	2250      	movs	r2, #80	@ 0x50
 8002aae:	2100      	movs	r1, #0
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f00d fc70 	bl	8010396 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002ab6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002aba:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002abc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002ac0:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002ac6:	2310      	movs	r3, #16
 8002ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aca:	463b      	mov	r3, r7
 8002acc:	4618      	mov	r0, r3
 8002ace:	f007 fd82 	bl	800a5d6 <HAL_RCCEx_PeriphCLKConfig>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002ad8:	f000 f9f2 	bl	8002ec0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002adc:	bf00      	nop
 8002ade:	3750      	adds	r7, #80	@ 0x50
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002aea:	463b      	mov	r3, r7
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	611a      	str	r2, [r3, #16]
 8002af8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002afa:	4b2a      	ldr	r3, [pc, #168]	@ (8002ba4 <MX_ADC1_Init+0xc0>)
 8002afc:	4a2a      	ldr	r2, [pc, #168]	@ (8002ba8 <MX_ADC1_Init+0xc4>)
 8002afe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8002b00:	4b28      	ldr	r3, [pc, #160]	@ (8002ba4 <MX_ADC1_Init+0xc0>)
 8002b02:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002b06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b08:	4b26      	ldr	r3, [pc, #152]	@ (8002ba4 <MX_ADC1_Init+0xc0>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b0e:	4b25      	ldr	r3, [pc, #148]	@ (8002ba4 <MX_ADC1_Init+0xc0>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002b14:	4b23      	ldr	r3, [pc, #140]	@ (8002ba4 <MX_ADC1_Init+0xc0>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b1a:	4b22      	ldr	r3, [pc, #136]	@ (8002ba4 <MX_ADC1_Init+0xc0>)
 8002b1c:	2204      	movs	r2, #4
 8002b1e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002b20:	4b20      	ldr	r3, [pc, #128]	@ (8002ba4 <MX_ADC1_Init+0xc0>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b26:	4b1f      	ldr	r3, [pc, #124]	@ (8002ba4 <MX_ADC1_Init+0xc0>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba4 <MX_ADC1_Init+0xc0>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b32:	4b1c      	ldr	r3, [pc, #112]	@ (8002ba4 <MX_ADC1_Init+0xc0>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8002b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba4 <MX_ADC1_Init+0xc0>)
 8002b3c:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
 8002b40:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002b42:	4b18      	ldr	r3, [pc, #96]	@ (8002ba4 <MX_ADC1_Init+0xc0>)
 8002b44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b48:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002b4a:	4b16      	ldr	r3, [pc, #88]	@ (8002ba4 <MX_ADC1_Init+0xc0>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002b52:	4b14      	ldr	r3, [pc, #80]	@ (8002ba4 <MX_ADC1_Init+0xc0>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002b58:	4b12      	ldr	r3, [pc, #72]	@ (8002ba4 <MX_ADC1_Init+0xc0>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b60:	4810      	ldr	r0, [pc, #64]	@ (8002ba4 <MX_ADC1_Init+0xc0>)
 8002b62:	f003 ff77 	bl	8006a54 <HAL_ADC_Init>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8002b6c:	f000 f9a8 	bl	8002ec0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002b70:	4b0e      	ldr	r3, [pc, #56]	@ (8002bac <MX_ADC1_Init+0xc8>)
 8002b72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b74:	2306      	movs	r3, #6
 8002b76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8002b78:	2304      	movs	r3, #4
 8002b7a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002b7c:	237f      	movs	r3, #127	@ 0x7f
 8002b7e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002b80:	2304      	movs	r3, #4
 8002b82:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b88:	463b      	mov	r3, r7
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4805      	ldr	r0, [pc, #20]	@ (8002ba4 <MX_ADC1_Init+0xc0>)
 8002b8e:	f004 f945 	bl	8006e1c <HAL_ADC_ConfigChannel>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8002b98:	f000 f992 	bl	8002ec0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002b9c:	bf00      	nop
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	20006534 	.word	0x20006534
 8002ba8:	50040000 	.word	0x50040000
 8002bac:	14f00020 	.word	0x14f00020

08002bb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c24 <MX_I2C1_Init+0x74>)
 8002bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8002c28 <MX_I2C1_Init+0x78>)
 8002bb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 8002bba:	4b1a      	ldr	r3, [pc, #104]	@ (8002c24 <MX_I2C1_Init+0x74>)
 8002bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8002c2c <MX_I2C1_Init+0x7c>)
 8002bbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002bc0:	4b18      	ldr	r3, [pc, #96]	@ (8002c24 <MX_I2C1_Init+0x74>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bc6:	4b17      	ldr	r3, [pc, #92]	@ (8002c24 <MX_I2C1_Init+0x74>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bcc:	4b15      	ldr	r3, [pc, #84]	@ (8002c24 <MX_I2C1_Init+0x74>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002bd2:	4b14      	ldr	r3, [pc, #80]	@ (8002c24 <MX_I2C1_Init+0x74>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002bd8:	4b12      	ldr	r3, [pc, #72]	@ (8002c24 <MX_I2C1_Init+0x74>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bde:	4b11      	ldr	r3, [pc, #68]	@ (8002c24 <MX_I2C1_Init+0x74>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002be4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c24 <MX_I2C1_Init+0x74>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bea:	480e      	ldr	r0, [pc, #56]	@ (8002c24 <MX_I2C1_Init+0x74>)
 8002bec:	f005 fc4a 	bl	8008484 <HAL_I2C_Init>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002bf6:	f000 f963 	bl	8002ec0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	4809      	ldr	r0, [pc, #36]	@ (8002c24 <MX_I2C1_Init+0x74>)
 8002bfe:	f006 f85f 	bl	8008cc0 <HAL_I2CEx_ConfigAnalogFilter>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002c08:	f000 f95a 	bl	8002ec0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	4805      	ldr	r0, [pc, #20]	@ (8002c24 <MX_I2C1_Init+0x74>)
 8002c10:	f006 f8a1 	bl	8008d56 <HAL_I2CEx_ConfigDigitalFilter>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002c1a:	f000 f951 	bl	8002ec0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	200065f8 	.word	0x200065f8
 8002c28:	40005400 	.word	0x40005400
 8002c2c:	10b17db5 	.word	0x10b17db5

08002c30 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002c34:	4b06      	ldr	r3, [pc, #24]	@ (8002c50 <MX_IPCC_Init+0x20>)
 8002c36:	4a07      	ldr	r2, [pc, #28]	@ (8002c54 <MX_IPCC_Init+0x24>)
 8002c38:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002c3a:	4805      	ldr	r0, [pc, #20]	@ (8002c50 <MX_IPCC_Init+0x20>)
 8002c3c:	f006 f8d8 	bl	8008df0 <HAL_IPCC_Init>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002c46:	f000 f93b 	bl	8002ec0 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	2000664c 	.word	0x2000664c
 8002c54:	58000c00 	.word	0x58000c00

08002c58 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002c6c:	4b16      	ldr	r3, [pc, #88]	@ (8002cc8 <MX_RTC_Init+0x60>)
 8002c6e:	4a17      	ldr	r2, [pc, #92]	@ (8002ccc <MX_RTC_Init+0x64>)
 8002c70:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002c72:	4b15      	ldr	r3, [pc, #84]	@ (8002cc8 <MX_RTC_Init+0x60>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002c78:	4b13      	ldr	r3, [pc, #76]	@ (8002cc8 <MX_RTC_Init+0x60>)
 8002c7a:	220f      	movs	r2, #15
 8002c7c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002c7e:	4b12      	ldr	r3, [pc, #72]	@ (8002cc8 <MX_RTC_Init+0x60>)
 8002c80:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002c84:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002c86:	4b10      	ldr	r3, [pc, #64]	@ (8002cc8 <MX_RTC_Init+0x60>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc8 <MX_RTC_Init+0x60>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002c92:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc8 <MX_RTC_Init+0x60>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002c98:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc8 <MX_RTC_Init+0x60>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002c9e:	480a      	ldr	r0, [pc, #40]	@ (8002cc8 <MX_RTC_Init+0x60>)
 8002ca0:	f007 ff20 	bl	800aae4 <HAL_RTC_Init>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002caa:	f000 f909 	bl	8002ec0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4805      	ldr	r0, [pc, #20]	@ (8002cc8 <MX_RTC_Init+0x60>)
 8002cb4:	f008 f824 	bl	800ad00 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002cbe:	f000 f8ff 	bl	8002ec0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002cc2:	bf00      	nop
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20006688 	.word	0x20006688
 8002ccc:	40002800 	.word	0x40002800

08002cd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cd6:	f107 0310 	add.w	r3, r7, #16
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	605a      	str	r2, [r3, #4]
 8002ce0:	609a      	str	r2, [r3, #8]
 8002ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ce4:	1d3b      	adds	r3, r7, #4
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	605a      	str	r2, [r3, #4]
 8002cec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cee:	4b1d      	ldr	r3, [pc, #116]	@ (8002d64 <MX_TIM2_Init+0x94>)
 8002cf0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002cf4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8002cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d64 <MX_TIM2_Init+0x94>)
 8002cf8:	224f      	movs	r2, #79	@ 0x4f
 8002cfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cfc:	4b19      	ldr	r3, [pc, #100]	@ (8002d64 <MX_TIM2_Init+0x94>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8002d02:	4b18      	ldr	r3, [pc, #96]	@ (8002d64 <MX_TIM2_Init+0x94>)
 8002d04:	2263      	movs	r2, #99	@ 0x63
 8002d06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d08:	4b16      	ldr	r3, [pc, #88]	@ (8002d64 <MX_TIM2_Init+0x94>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d0e:	4b15      	ldr	r3, [pc, #84]	@ (8002d64 <MX_TIM2_Init+0x94>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d14:	4813      	ldr	r0, [pc, #76]	@ (8002d64 <MX_TIM2_Init+0x94>)
 8002d16:	f008 f8bf 	bl	800ae98 <HAL_TIM_Base_Init>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002d20:	f000 f8ce 	bl	8002ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d2a:	f107 0310 	add.w	r3, r7, #16
 8002d2e:	4619      	mov	r1, r3
 8002d30:	480c      	ldr	r0, [pc, #48]	@ (8002d64 <MX_TIM2_Init+0x94>)
 8002d32:	f008 fcf5 	bl	800b720 <HAL_TIM_ConfigClockSource>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002d3c:	f000 f8c0 	bl	8002ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002d40:	2320      	movs	r3, #32
 8002d42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d44:	2300      	movs	r3, #0
 8002d46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d48:	1d3b      	adds	r3, r7, #4
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4805      	ldr	r0, [pc, #20]	@ (8002d64 <MX_TIM2_Init+0x94>)
 8002d4e:	f009 f983 	bl	800c058 <HAL_TIMEx_MasterConfigSynchronization>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002d58:	f000 f8b2 	bl	8002ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d5c:	bf00      	nop
 8002d5e:	3720      	adds	r7, #32
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	200066ac 	.word	0x200066ac

08002d68 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b094      	sub	sp, #80	@ 0x50
 8002d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d6e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	605a      	str	r2, [r3, #4]
 8002d78:	609a      	str	r2, [r3, #8]
 8002d7a:	60da      	str	r2, [r3, #12]
 8002d7c:	611a      	str	r2, [r3, #16]
 8002d7e:	615a      	str	r2, [r3, #20]
 8002d80:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d82:	463b      	mov	r3, r7
 8002d84:	2234      	movs	r2, #52	@ 0x34
 8002d86:	2100      	movs	r1, #0
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f00d fb04 	bl	8010396 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002d8e:	4b31      	ldr	r3, [pc, #196]	@ (8002e54 <MX_TIM17_Init+0xec>)
 8002d90:	4a31      	ldr	r2, [pc, #196]	@ (8002e58 <MX_TIM17_Init+0xf0>)
 8002d92:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 63;
 8002d94:	4b2f      	ldr	r3, [pc, #188]	@ (8002e54 <MX_TIM17_Init+0xec>)
 8002d96:	223f      	movs	r2, #63	@ 0x3f
 8002d98:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d9a:	4b2e      	ldr	r3, [pc, #184]	@ (8002e54 <MX_TIM17_Init+0xec>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 8002da0:	4b2c      	ldr	r3, [pc, #176]	@ (8002e54 <MX_TIM17_Init+0xec>)
 8002da2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002da6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002da8:	4b2a      	ldr	r3, [pc, #168]	@ (8002e54 <MX_TIM17_Init+0xec>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002dae:	4b29      	ldr	r3, [pc, #164]	@ (8002e54 <MX_TIM17_Init+0xec>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002db4:	4b27      	ldr	r3, [pc, #156]	@ (8002e54 <MX_TIM17_Init+0xec>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002dba:	4826      	ldr	r0, [pc, #152]	@ (8002e54 <MX_TIM17_Init+0xec>)
 8002dbc:	f008 f86c 	bl	800ae98 <HAL_TIM_Base_Init>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8002dc6:	f000 f87b 	bl	8002ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002dca:	4822      	ldr	r0, [pc, #136]	@ (8002e54 <MX_TIM17_Init+0xec>)
 8002dcc:	f008 f950 	bl	800b070 <HAL_TIM_PWM_Init>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002dd6:	f000 f873 	bl	8002ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dda:	2360      	movs	r3, #96	@ 0x60
 8002ddc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002de2:	2300      	movs	r3, #0
 8002de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002de6:	2300      	movs	r3, #0
 8002de8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dea:	2300      	movs	r3, #0
 8002dec:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002dee:	2300      	movs	r3, #0
 8002df0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002df2:	2300      	movs	r3, #0
 8002df4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002df6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4815      	ldr	r0, [pc, #84]	@ (8002e54 <MX_TIM17_Init+0xec>)
 8002e00:	f008 fb7a 	bl	800b4f8 <HAL_TIM_PWM_ConfigChannel>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8002e0a:	f000 f859 	bl	8002ec0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e12:	2300      	movs	r3, #0
 8002e14:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e16:	2300      	movs	r3, #0
 8002e18:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e26:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002e30:	463b      	mov	r3, r7
 8002e32:	4619      	mov	r1, r3
 8002e34:	4807      	ldr	r0, [pc, #28]	@ (8002e54 <MX_TIM17_Init+0xec>)
 8002e36:	f009 f96f 	bl	800c118 <HAL_TIMEx_ConfigBreakDeadTime>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8002e40:	f000 f83e 	bl	8002ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002e44:	4803      	ldr	r0, [pc, #12]	@ (8002e54 <MX_TIM17_Init+0xec>)
 8002e46:	f000 fa05 	bl	8003254 <HAL_TIM_MspPostInit>

}
 8002e4a:	bf00      	nop
 8002e4c:	3750      	adds	r7, #80	@ 0x50
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	200066f8 	.word	0x200066f8
 8002e58:	40014800 	.word	0x40014800

08002e5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002e60:	2004      	movs	r0, #4
 8002e62:	f7fe ff34 	bl	8001cce <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e66:	2001      	movs	r0, #1
 8002e68:	f7fe ff31 	bl	8001cce <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2100      	movs	r1, #0
 8002e70:	200b      	movs	r0, #11
 8002e72:	f004 fead 	bl	8007bd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002e76:	200b      	movs	r0, #11
 8002e78:	f004 fec4 	bl	8007c04 <HAL_NVIC_EnableIRQ>

}
 8002e7c:	bf00      	nop
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e84:	2004      	movs	r0, #4
 8002e86:	f7fe ff3b 	bl	8001d00 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e8a:	2002      	movs	r0, #2
 8002e8c:	f7fe ff38 	bl	8001d00 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e90:	2001      	movs	r0, #1
 8002e92:	f7fe ff35 	bl	8001d00 <LL_AHB2_GRP1_EnableClock>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a04      	ldr	r2, [pc, #16]	@ (8002ebc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d101      	bne.n	8002eb2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002eae:	f003 fbab 	bl	8006608 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40012c00 	.word	0x40012c00

08002ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002ec4:	b672      	cpsid	i
}
 8002ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ec8:	bf00      	nop
 8002eca:	e7fd      	b.n	8002ec8 <Error_Handler+0x8>

08002ecc <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002ed0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002edc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ee0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <LL_AHB2_GRP1_EnableClock>:
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b085      	sub	sp, #20
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002ef6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002efa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002efc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002f06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f12:	68fb      	ldr	r3, [r7, #12]
}
 8002f14:	bf00      	nop
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002f28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002f38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4013      	ands	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f44:	68fb      	ldr	r3, [r7, #12]
}
 8002f46:	bf00      	nop
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b085      	sub	sp, #20
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002f5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f5e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002f60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002f6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f6e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4013      	ands	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f76:	68fb      	ldr	r3, [r7, #12]
}
 8002f78:	bf00      	nop
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002f8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f90:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002f9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fa0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
}
 8002faa:	bf00      	nop
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002fba:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002fbe:	f7ff ffaf 	bl	8002f20 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	202e      	movs	r0, #46	@ 0x2e
 8002fc8:	f004 fe02 	bl	8007bd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002fcc:	202e      	movs	r0, #46	@ 0x2e
 8002fce:	f004 fe19 	bl	8007c04 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fd2:	bf00      	nop
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b09c      	sub	sp, #112	@ 0x70
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ff0:	f107 030c 	add.w	r3, r7, #12
 8002ff4:	2250      	movs	r2, #80	@ 0x50
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f00d f9cc 	bl	8010396 <memset>
  if(hadc->Instance==ADC1)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a32      	ldr	r2, [pc, #200]	@ (80030cc <HAL_ADC_MspInit+0xf4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d15c      	bne.n	80030c2 <HAL_ADC_MspInit+0xea>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003008:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800300c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 8;
 800300e:	2308      	movs	r3, #8
 8003010:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8003012:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003016:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8003018:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800301c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800301e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003022:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8003024:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003028:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800302a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800302e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003030:	f107 030c 	add.w	r3, r7, #12
 8003034:	4618      	mov	r0, r3
 8003036:	f007 face 	bl	800a5d6 <HAL_RCCEx_PeriphCLKConfig>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 8003040:	f7ff ff3e 	bl	8002ec0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003044:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003048:	f7ff ff51 	bl	8002eee <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800304c:	2001      	movs	r0, #1
 800304e:	f7ff ff4e 	bl	8002eee <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003052:	2301      	movs	r3, #1
 8003054:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003056:	2303      	movs	r3, #3
 8003058:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305a:	2300      	movs	r3, #0
 800305c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800305e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003062:	4619      	mov	r1, r3
 8003064:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003068:	f005 f878 	bl	800815c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800306c:	4b18      	ldr	r3, [pc, #96]	@ (80030d0 <HAL_ADC_MspInit+0xf8>)
 800306e:	4a19      	ldr	r2, [pc, #100]	@ (80030d4 <HAL_ADC_MspInit+0xfc>)
 8003070:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003072:	4b17      	ldr	r3, [pc, #92]	@ (80030d0 <HAL_ADC_MspInit+0xf8>)
 8003074:	2205      	movs	r2, #5
 8003076:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003078:	4b15      	ldr	r3, [pc, #84]	@ (80030d0 <HAL_ADC_MspInit+0xf8>)
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800307e:	4b14      	ldr	r3, [pc, #80]	@ (80030d0 <HAL_ADC_MspInit+0xf8>)
 8003080:	2200      	movs	r2, #0
 8003082:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003084:	4b12      	ldr	r3, [pc, #72]	@ (80030d0 <HAL_ADC_MspInit+0xf8>)
 8003086:	2280      	movs	r2, #128	@ 0x80
 8003088:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800308a:	4b11      	ldr	r3, [pc, #68]	@ (80030d0 <HAL_ADC_MspInit+0xf8>)
 800308c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003090:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003092:	4b0f      	ldr	r3, [pc, #60]	@ (80030d0 <HAL_ADC_MspInit+0xf8>)
 8003094:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003098:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800309a:	4b0d      	ldr	r3, [pc, #52]	@ (80030d0 <HAL_ADC_MspInit+0xf8>)
 800309c:	2220      	movs	r2, #32
 800309e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80030a0:	4b0b      	ldr	r3, [pc, #44]	@ (80030d0 <HAL_ADC_MspInit+0xf8>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80030a6:	480a      	ldr	r0, [pc, #40]	@ (80030d0 <HAL_ADC_MspInit+0xf8>)
 80030a8:	f004 fde4 	bl	8007c74 <HAL_DMA_Init>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 80030b2:	f7ff ff05 	bl	8002ec0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a05      	ldr	r2, [pc, #20]	@ (80030d0 <HAL_ADC_MspInit+0xf8>)
 80030ba:	64da      	str	r2, [r3, #76]	@ 0x4c
 80030bc:	4a04      	ldr	r2, [pc, #16]	@ (80030d0 <HAL_ADC_MspInit+0xf8>)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80030c2:	bf00      	nop
 80030c4:	3770      	adds	r7, #112	@ 0x70
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	50040000 	.word	0x50040000
 80030d0:	20006598 	.word	0x20006598
 80030d4:	40020008 	.word	0x40020008

080030d8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b09c      	sub	sp, #112	@ 0x70
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030f0:	f107 030c 	add.w	r3, r7, #12
 80030f4:	2250      	movs	r2, #80	@ 0x50
 80030f6:	2100      	movs	r1, #0
 80030f8:	4618      	mov	r0, r3
 80030fa:	f00d f94c 	bl	8010396 <memset>
  if(hi2c->Instance==I2C1)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a17      	ldr	r2, [pc, #92]	@ (8003160 <HAL_I2C_MspInit+0x88>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d126      	bne.n	8003156 <HAL_I2C_MspInit+0x7e>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003108:	2304      	movs	r3, #4
 800310a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800310c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8003110:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003112:	f107 030c 	add.w	r3, r7, #12
 8003116:	4618      	mov	r0, r3
 8003118:	f007 fa5d 	bl	800a5d6 <HAL_RCCEx_PeriphCLKConfig>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003122:	f7ff fecd 	bl	8002ec0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003126:	2002      	movs	r0, #2
 8003128:	f7ff fee1 	bl	8002eee <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800312c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003130:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003132:	2312      	movs	r3, #18
 8003134:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	2300      	movs	r3, #0
 8003138:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313a:	2300      	movs	r3, #0
 800313c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800313e:	2304      	movs	r3, #4
 8003140:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003142:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003146:	4619      	mov	r1, r3
 8003148:	4806      	ldr	r0, [pc, #24]	@ (8003164 <HAL_I2C_MspInit+0x8c>)
 800314a:	f005 f807 	bl	800815c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800314e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8003152:	f7ff fefe 	bl	8002f52 <LL_APB1_GRP1_EnableClock>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003156:	bf00      	nop
 8003158:	3770      	adds	r7, #112	@ 0x70
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40005400 	.word	0x40005400
 8003164:	48000400 	.word	0x48000400

08003168 <HAL_IPCC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hipcc: IPCC handle pointer
  * @retval None
  */
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a0d      	ldr	r2, [pc, #52]	@ (80031ac <HAL_IPCC_MspInit+0x44>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d113      	bne.n	80031a2 <HAL_IPCC_MspInit+0x3a>
  {
    /* USER CODE BEGIN IPCC_MspInit 0 */

    /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800317a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800317e:	f7ff fecf 	bl	8002f20 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8003182:	2200      	movs	r2, #0
 8003184:	2100      	movs	r1, #0
 8003186:	202c      	movs	r0, #44	@ 0x2c
 8003188:	f004 fd22 	bl	8007bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800318c:	202c      	movs	r0, #44	@ 0x2c
 800318e:	f004 fd39 	bl	8007c04 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8003192:	2200      	movs	r2, #0
 8003194:	2100      	movs	r1, #0
 8003196:	202d      	movs	r0, #45	@ 0x2d
 8003198:	f004 fd1a 	bl	8007bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800319c:	202d      	movs	r0, #45	@ 0x2d
 800319e:	f004 fd31 	bl	8007c04 <HAL_NVIC_EnableIRQ>

    /* USER CODE END IPCC_MspInit 1 */

  }

}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	58000c00 	.word	0x58000c00

080031b0 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b096      	sub	sp, #88	@ 0x58
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031b8:	f107 0308 	add.w	r3, r7, #8
 80031bc:	2250      	movs	r2, #80	@ 0x50
 80031be:	2100      	movs	r1, #0
 80031c0:	4618      	mov	r0, r3
 80031c2:	f00d f8e8 	bl	8010396 <memset>
  if(hrtc->Instance==RTC)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a13      	ldr	r2, [pc, #76]	@ (8003218 <HAL_RTC_MspInit+0x68>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d11f      	bne.n	8003210 <HAL_RTC_MspInit+0x60>

    /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 80031d0:	f005 fe94 	bl	8008efc <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80031d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80031d8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80031da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80031de:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031e0:	f107 0308 	add.w	r3, r7, #8
 80031e4:	4618      	mov	r0, r3
 80031e6:	f007 f9f6 	bl	800a5d6 <HAL_RCCEx_PeriphCLKConfig>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 80031f0:	f7ff fe66 	bl	8002ec0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80031f4:	f7ff fe6a 	bl	8002ecc <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80031f8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80031fc:	f7ff fea9 	bl	8002f52 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003200:	2200      	movs	r2, #0
 8003202:	2100      	movs	r1, #0
 8003204:	2003      	movs	r0, #3
 8003206:	f004 fce3 	bl	8007bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800320a:	2003      	movs	r0, #3
 800320c:	f004 fcfa 	bl	8007c04 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8003210:	bf00      	nop
 8003212:	3758      	adds	r7, #88	@ 0x58
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40002800 	.word	0x40002800

0800321c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800322c:	d103      	bne.n	8003236 <HAL_TIM_Base_MspInit+0x1a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800322e:	2001      	movs	r0, #1
 8003230:	f7ff fe8f 	bl	8002f52 <LL_APB1_GRP1_EnableClock>
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003234:	e008      	b.n	8003248 <HAL_TIM_Base_MspInit+0x2c>
  else if(htim_base->Instance==TIM17)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a05      	ldr	r2, [pc, #20]	@ (8003250 <HAL_TIM_Base_MspInit+0x34>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d103      	bne.n	8003248 <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003240:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8003244:	f7ff fe9e 	bl	8002f84 <LL_APB2_GRP1_EnableClock>
}
 8003248:	bf00      	nop
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40014800 	.word	0x40014800

08003254 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800325c:	f107 030c 	add.w	r3, r7, #12
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	60da      	str	r2, [r3, #12]
 800326a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a0d      	ldr	r2, [pc, #52]	@ (80032a8 <HAL_TIM_MspPostInit+0x54>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d113      	bne.n	800329e <HAL_TIM_MspPostInit+0x4a>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003276:	2001      	movs	r0, #1
 8003278:	f7ff fe39 	bl	8002eee <LL_AHB2_GRP1_EnableClock>
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800327c:	2380      	movs	r3, #128	@ 0x80
 800327e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003280:	2302      	movs	r3, #2
 8003282:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003288:	2300      	movs	r3, #0
 800328a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 800328c:	230e      	movs	r3, #14
 800328e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003290:	f107 030c 	add.w	r3, r7, #12
 8003294:	4619      	mov	r1, r3
 8003296:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800329a:	f004 ff5f 	bl	800815c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800329e:	bf00      	nop
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40014800 	.word	0x40014800

080032ac <LL_APB2_GRP1_EnableClock>:
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80032b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80032ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80032c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032c8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4013      	ands	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80032d0:	68fb      	ldr	r3, [r7, #12]
}
 80032d2:	bf00      	nop
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
	...

080032e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08e      	sub	sp, #56	@ 0x38
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80032f6:	2200      	movs	r2, #0
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	2019      	movs	r0, #25
 80032fc:	f004 fc68 	bl	8007bd0 <HAL_NVIC_SetPriority>
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003300:	2019      	movs	r0, #25
 8003302:	f004 fc7f 	bl	8007c04 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003306:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800330a:	f7ff ffcf 	bl	80032ac <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800330e:	f107 020c 	add.w	r2, r7, #12
 8003312:	f107 0310 	add.w	r3, r7, #16
 8003316:	4611      	mov	r1, r2
 8003318:	4618      	mov	r0, r3
 800331a:	f006 fed9 	bl	800a0d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800331e:	f006 fec1 	bl	800a0a4 <HAL_RCC_GetPCLK2Freq>
 8003322:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003326:	4a21      	ldr	r2, [pc, #132]	@ (80033ac <HAL_InitTick+0xcc>)
 8003328:	fba2 2303 	umull	r2, r3, r2, r3
 800332c:	0c9b      	lsrs	r3, r3, #18
 800332e:	3b01      	subs	r3, #1
 8003330:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003332:	4b1f      	ldr	r3, [pc, #124]	@ (80033b0 <HAL_InitTick+0xd0>)
 8003334:	4a1f      	ldr	r2, [pc, #124]	@ (80033b4 <HAL_InitTick+0xd4>)
 8003336:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003338:	4b1d      	ldr	r3, [pc, #116]	@ (80033b0 <HAL_InitTick+0xd0>)
 800333a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800333e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003340:	4a1b      	ldr	r2, [pc, #108]	@ (80033b0 <HAL_InitTick+0xd0>)
 8003342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003344:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003346:	4b1a      	ldr	r3, [pc, #104]	@ (80033b0 <HAL_InitTick+0xd0>)
 8003348:	2200      	movs	r2, #0
 800334a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800334c:	4b18      	ldr	r3, [pc, #96]	@ (80033b0 <HAL_InitTick+0xd0>)
 800334e:	2200      	movs	r2, #0
 8003350:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8003352:	4817      	ldr	r0, [pc, #92]	@ (80033b0 <HAL_InitTick+0xd0>)
 8003354:	f007 fda0 	bl	800ae98 <HAL_TIM_Base_Init>
 8003358:	4603      	mov	r3, r0
 800335a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 800335e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003362:	2b00      	cmp	r3, #0
 8003364:	d11b      	bne.n	800339e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003366:	4812      	ldr	r0, [pc, #72]	@ (80033b0 <HAL_InitTick+0xd0>)
 8003368:	f007 fe34 	bl	800afd4 <HAL_TIM_Base_Start_IT>
 800336c:	4603      	mov	r3, r0
 800336e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8003372:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003376:	2b00      	cmp	r3, #0
 8003378:	d111      	bne.n	800339e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800337a:	2019      	movs	r0, #25
 800337c:	f004 fc42 	bl	8007c04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b0f      	cmp	r3, #15
 8003384:	d808      	bhi.n	8003398 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8003386:	2200      	movs	r2, #0
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	2019      	movs	r0, #25
 800338c:	f004 fc20 	bl	8007bd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003390:	4a09      	ldr	r2, [pc, #36]	@ (80033b8 <HAL_InitTick+0xd8>)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	e002      	b.n	800339e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

 /* Return function status */
  return status;
 800339e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3738      	adds	r7, #56	@ 0x38
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	431bde83 	.word	0x431bde83
 80033b0:	20006750 	.word	0x20006750
 80033b4:	40012c00 	.word	0x40012c00
 80033b8:	20000204 	.word	0x20000204

080033bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80033c0:	bf00      	nop
 80033c2:	e7fd      	b.n	80033c0 <NMI_Handler+0x4>

080033c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033c8:	bf00      	nop
 80033ca:	e7fd      	b.n	80033c8 <HardFault_Handler+0x4>

080033cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033d0:	bf00      	nop
 80033d2:	e7fd      	b.n	80033d0 <MemManage_Handler+0x4>

080033d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033d8:	bf00      	nop
 80033da:	e7fd      	b.n	80033d8 <BusFault_Handler+0x4>

080033dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033e0:	bf00      	nop
 80033e2:	e7fd      	b.n	80033e0 <UsageFault_Handler+0x4>

080033e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033e8:	bf00      	nop
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033f2:	b480      	push	{r7}
 80033f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033f6:	bf00      	nop
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003404:	bf00      	nop
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800340e:	b480      	push	{r7}
 8003410:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003412:	bf00      	nop
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003420:	f7fe f99c 	bl	800175c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003424:	bf00      	nop
 8003426:	bd80      	pop	{r7, pc}

08003428 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800342c:	4802      	ldr	r0, [pc, #8]	@ (8003438 <DMA1_Channel1_IRQHandler+0x10>)
 800342e:	f004 fd44 	bl	8007eba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003432:	bf00      	nop
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20006598 	.word	0x20006598

0800343c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003440:	4802      	ldr	r0, [pc, #8]	@ (800344c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003442:	f007 ff51 	bl	800b2e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003446:	bf00      	nop
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20006750 	.word	0x20006750

08003450 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003454:	f00b fdea 	bl	800f02c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003458:	bf00      	nop
 800345a:	bd80      	pop	{r7, pc}

0800345c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003460:	f00b fe1a 	bl	800f098 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003464:	bf00      	nop
 8003466:	bd80      	pop	{r7, pc}

08003468 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800346c:	f004 ffe6 	bl	800843c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003470:	bf00      	nop
 8003472:	bd80      	pop	{r7, pc}

08003474 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  return 1;
 8003478:	2301      	movs	r3, #1
}
 800347a:	4618      	mov	r0, r3
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <_kill>:

int _kill(int pid, int sig)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800348e:	f00c ffd5 	bl	801043c <__errno>
 8003492:	4603      	mov	r3, r0
 8003494:	2216      	movs	r2, #22
 8003496:	601a      	str	r2, [r3, #0]
  return -1;
 8003498:	f04f 33ff 	mov.w	r3, #4294967295
}
 800349c:	4618      	mov	r0, r3
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <_exit>:

void _exit (int status)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80034ac:	f04f 31ff 	mov.w	r1, #4294967295
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff ffe7 	bl	8003484 <_kill>
  while (1) {}    /* Make sure we hang here */
 80034b6:	bf00      	nop
 80034b8:	e7fd      	b.n	80034b6 <_exit+0x12>

080034ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b086      	sub	sp, #24
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	e00a      	b.n	80034e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034cc:	f3af 8000 	nop.w
 80034d0:	4601      	mov	r1, r0
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	1c5a      	adds	r2, r3, #1
 80034d6:	60ba      	str	r2, [r7, #8]
 80034d8:	b2ca      	uxtb	r2, r1
 80034da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	3301      	adds	r3, #1
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	dbf0      	blt.n	80034cc <_read+0x12>
  }

  return len;
 80034ea:	687b      	ldr	r3, [r7, #4]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	e009      	b.n	800351a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	60ba      	str	r2, [r7, #8]
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	3301      	adds	r3, #1
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	429a      	cmp	r2, r3
 8003520:	dbf1      	blt.n	8003506 <_write+0x12>
  }
  return len;
 8003522:	687b      	ldr	r3, [r7, #4]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <_close>:

int _close(int file)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003534:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003554:	605a      	str	r2, [r3, #4]
  return 0;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <_isatty>:

int _isatty(int file)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800356c:	2301      	movs	r3, #1
}
 800356e:	4618      	mov	r0, r3
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800357a:	b480      	push	{r7}
 800357c:	b085      	sub	sp, #20
 800357e:	af00      	add	r7, sp, #0
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800359c:	4a14      	ldr	r2, [pc, #80]	@ (80035f0 <_sbrk+0x5c>)
 800359e:	4b15      	ldr	r3, [pc, #84]	@ (80035f4 <_sbrk+0x60>)
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035a8:	4b13      	ldr	r3, [pc, #76]	@ (80035f8 <_sbrk+0x64>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d102      	bne.n	80035b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035b0:	4b11      	ldr	r3, [pc, #68]	@ (80035f8 <_sbrk+0x64>)
 80035b2:	4a12      	ldr	r2, [pc, #72]	@ (80035fc <_sbrk+0x68>)
 80035b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035b6:	4b10      	ldr	r3, [pc, #64]	@ (80035f8 <_sbrk+0x64>)
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4413      	add	r3, r2
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d207      	bcs.n	80035d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035c4:	f00c ff3a 	bl	801043c <__errno>
 80035c8:	4603      	mov	r3, r0
 80035ca:	220c      	movs	r2, #12
 80035cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035ce:	f04f 33ff 	mov.w	r3, #4294967295
 80035d2:	e009      	b.n	80035e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035d4:	4b08      	ldr	r3, [pc, #32]	@ (80035f8 <_sbrk+0x64>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035da:	4b07      	ldr	r3, [pc, #28]	@ (80035f8 <_sbrk+0x64>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4413      	add	r3, r2
 80035e2:	4a05      	ldr	r2, [pc, #20]	@ (80035f8 <_sbrk+0x64>)
 80035e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035e6:	68fb      	ldr	r3, [r7, #12]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20030000 	.word	0x20030000
 80035f4:	00000400 	.word	0x00000400
 80035f8:	2000679c 	.word	0x2000679c
 80035fc:	20006ca8 	.word	0x20006ca8

08003600 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003604:	4b24      	ldr	r3, [pc, #144]	@ (8003698 <SystemInit+0x98>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800360a:	4a23      	ldr	r2, [pc, #140]	@ (8003698 <SystemInit+0x98>)
 800360c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003610:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003614:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003624:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003628:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800362c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800362e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003638:	4b18      	ldr	r3, [pc, #96]	@ (800369c <SystemInit+0x9c>)
 800363a:	4013      	ands	r3, r2
 800363c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800363e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003642:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003646:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800364a:	f023 0305 	bic.w	r3, r3, #5
 800364e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003652:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003656:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800365a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800365e:	f023 0301 	bic.w	r3, r3, #1
 8003662:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003666:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800366a:	4a0d      	ldr	r2, [pc, #52]	@ (80036a0 <SystemInit+0xa0>)
 800366c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800366e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003672:	4a0b      	ldr	r2, [pc, #44]	@ (80036a0 <SystemInit+0xa0>)
 8003674:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003676:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003680:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003684:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003686:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800368a:	2200      	movs	r2, #0
 800368c:	619a      	str	r2, [r3, #24]
}
 800368e:	bf00      	nop
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	e000ed00 	.word	0xe000ed00
 800369c:	faf6fefb 	.word	0xfaf6fefb
 80036a0:	22041000 	.word	0x22041000

080036a4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80036a4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036a6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036a8:	3304      	adds	r3, #4

080036aa <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036aa:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036ac:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80036ae:	d3f9      	bcc.n	80036a4 <CopyDataInit>
  bx lr
 80036b0:	4770      	bx	lr

080036b2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80036b2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80036b4:	3004      	adds	r0, #4

080036b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80036b6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80036b8:	d3fb      	bcc.n	80036b2 <FillZerobss>
  bx lr
 80036ba:	4770      	bx	lr

080036bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80036bc:	480c      	ldr	r0, [pc, #48]	@ (80036f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80036be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80036c0:	f7ff ff9e 	bl	8003600 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80036c4:	480b      	ldr	r0, [pc, #44]	@ (80036f4 <LoopForever+0x6>)
 80036c6:	490c      	ldr	r1, [pc, #48]	@ (80036f8 <LoopForever+0xa>)
 80036c8:	4a0c      	ldr	r2, [pc, #48]	@ (80036fc <LoopForever+0xe>)
 80036ca:	2300      	movs	r3, #0
 80036cc:	f7ff ffed 	bl	80036aa <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80036d0:	480b      	ldr	r0, [pc, #44]	@ (8003700 <LoopForever+0x12>)
 80036d2:	490c      	ldr	r1, [pc, #48]	@ (8003704 <LoopForever+0x16>)
 80036d4:	4a0c      	ldr	r2, [pc, #48]	@ (8003708 <LoopForever+0x1a>)
 80036d6:	2300      	movs	r3, #0
 80036d8:	f7ff ffe7 	bl	80036aa <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80036dc:	480b      	ldr	r0, [pc, #44]	@ (800370c <LoopForever+0x1e>)
 80036de:	490c      	ldr	r1, [pc, #48]	@ (8003710 <LoopForever+0x22>)
 80036e0:	2300      	movs	r3, #0
 80036e2:	f7ff ffe8 	bl	80036b6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80036e6:	f00c feaf 	bl	8010448 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80036ea:	f7fe fcbd 	bl	8002068 <main>

080036ee <LoopForever>:

LoopForever:
  b LoopForever
 80036ee:	e7fe      	b.n	80036ee <LoopForever>
  ldr   r0, =_estack
 80036f0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80036f4:	20000008 	.word	0x20000008
 80036f8:	200003f0 	.word	0x200003f0
 80036fc:	08029984 	.word	0x08029984
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003700:	200301e4 	.word	0x200301e4
 8003704:	20030a67 	.word	0x20030a67
 8003708:	08029db2 	.word	0x08029db2
  INIT_BSS _sbss, _ebss
 800370c:	2000043c 	.word	0x2000043c
 8003710:	20006ca4 	.word	0x20006ca4

08003714 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003714:	e7fe      	b.n	8003714 <ADC1_IRQHandler>

08003716 <arm_scale_f32>:
void arm_scale_f32(
  const float32_t *pSrc,
        float32_t scale,
        float32_t *pDst,
        uint32_t blockSize)
{
 8003716:	b480      	push	{r7}
 8003718:	b087      	sub	sp, #28
 800371a:	af00      	add	r7, sp, #0
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	ed87 0a02 	vstr	s0, [r7, #8]
 8003722:	6079      	str	r1, [r7, #4]
 8003724:	603a      	str	r2, [r7, #0]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON_EXPERIMENTAL) */

  while (blkCnt > 0U)
 800372a:	e010      	b.n	800374e <arm_scale_f32+0x38>
  {
    /* C = A * scale */

    /* Scale input and store result in destination buffer. */
    *pDst++ = (*pSrc++) * scale;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	1d1a      	adds	r2, r3, #4
 8003730:	60fa      	str	r2, [r7, #12]
 8003732:	ed93 7a00 	vldr	s14, [r3]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	1d1a      	adds	r2, r3, #4
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003744:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement loop counter */
    blkCnt--;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	3b01      	subs	r3, #1
 800374c:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1eb      	bne.n	800372c <arm_scale_f32+0x16>
  }

}
 8003754:	bf00      	nop
 8003756:	bf00      	nop
 8003758:	371c      	adds	r7, #28
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t numSamples)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b08a      	sub	sp, #40	@ 0x28
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
  blkCnt = numSamples % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = numSamples;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8003772:	e032      	b.n	80037da <arm_cmplx_mag_f32+0x78>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */

    real = *pSrc++;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	1d1a      	adds	r2, r3, #4
 8003778:	60fa      	str	r2, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	623b      	str	r3, [r7, #32]
    imag = *pSrc++;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1d1a      	adds	r2, r3, #4
 8003782:	60fa      	str	r2, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	61fb      	str	r3, [r7, #28]

    /* store result in destination buffer. */
    arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 8003788:	edd7 7a08 	vldr	s15, [r7, #32]
 800378c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003790:	edd7 7a07 	vldr	s15, [r7, #28]
 8003794:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	1d1a      	adds	r2, r3, #4
 80037a0:	60ba      	str	r2, [r7, #8]
 80037a2:	edc7 7a06 	vstr	s15, [r7, #24]
 80037a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80037a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80037ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b4:	db09      	blt.n	80037ca <arm_cmplx_mag_f32+0x68>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 80037b6:	ed97 0a06 	vldr	s0, [r7, #24]
 80037ba:	f00e feeb 	bl	8012594 <sqrtf>
 80037be:	eef0 7a40 	vmov.f32	s15, s0
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 80037c8:	e004      	b.n	80037d4 <arm_cmplx_mag_f32+0x72>
    }
    else
    {
      *pOut = 0.0f;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80037d2:	bf00      	nop

    /* Decrement loop counter */
    blkCnt--;
 80037d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d6:	3b01      	subs	r3, #1
 80037d8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (blkCnt > 0U)
 80037da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1c9      	bne.n	8003774 <arm_cmplx_mag_f32+0x12>
  }

}
 80037e0:	bf00      	nop
 80037e2:	bf00      	nop
 80037e4:	3728      	adds	r7, #40	@ 0x28
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc, 
  const uint16_t bitRevLen, 
  const uint16_t *pBitRevTab)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b089      	sub	sp, #36	@ 0x24
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	460b      	mov	r3, r1
 80037f4:	607a      	str	r2, [r7, #4]
 80037f6:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 80037f8:	2300      	movs	r3, #0
 80037fa:	61fb      	str	r3, [r7, #28]
 80037fc:	e043      	b.n	8003886 <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	4413      	add	r3, r2
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	089b      	lsrs	r3, r3, #2
 800380a:	b29b      	uxth	r3, r3
 800380c:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	3301      	adds	r3, #1
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	4413      	add	r3, r2
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	089b      	lsrs	r3, r3, #2
 800381c:	b29b      	uxth	r3, r3
 800381e:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	4413      	add	r3, r2
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	441a      	add	r2, r3
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	68f9      	ldr	r1, [r7, #12]
 800383a:	440b      	add	r3, r1
 800383c:	6812      	ldr	r2, [r2, #0]
 800383e:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	4413      	add	r3, r2
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	3301      	adds	r3, #1
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	4413      	add	r3, r2
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	3301      	adds	r3, #1
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	441a      	add	r2, r3
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	3301      	adds	r3, #1
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	68f9      	ldr	r1, [r7, #12]
 800386c:	440b      	add	r3, r1
 800386e:	6812      	ldr	r2, [r2, #0]
 8003870:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	3301      	adds	r3, #1
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4413      	add	r3, r2
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	601a      	str	r2, [r3, #0]

    i += 2;
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	3302      	adds	r3, #2
 8003884:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 8003886:	897b      	ldrh	r3, [r7, #10]
 8003888:	69fa      	ldr	r2, [r7, #28]
 800388a:	429a      	cmp	r2, r3
 800388c:	d3b7      	bcc.n	80037fe <arm_bitreversal_32+0x14>
  }
}
 800388e:	bf00      	nop
 8003890:	bf00      	nop
 8003892:	3724      	adds	r7, #36	@ 0x24
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b0a0      	sub	sp, #128	@ 0x80
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	66bb      	str	r3, [r7, #104]	@ 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 80038ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	4413      	add	r3, r2
 80038b4:	677b      	str	r3, [r7, #116]	@ 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	673b      	str	r3, [r7, #112]	@ 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	667b      	str	r3, [r7, #100]	@ 0x64
  pCol2 = p2;
 80038c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038c2:	663b      	str	r3, [r7, #96]	@ 0x60

  /* Define new length */
  L >>= 1;
 80038c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038c6:	085b      	lsrs	r3, r3, #1
 80038c8:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 80038ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	4413      	add	r3, r2
 80038d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pMid2 = p2 + L;
 80038d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80038da:	4413      	add	r3, r2
 80038dc:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 80038de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038e0:	089b      	lsrs	r3, r3, #2
 80038e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038e4:	e1b6      	b.n	8003c54 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	63bb      	str	r3, [r7, #56]	@ 0x38
    t1[1] = p1[1];
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    t1[2] = p1[2];
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	643b      	str	r3, [r7, #64]	@ 0x40
    t1[3] = p1[3];
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	647b      	str	r3, [r7, #68]	@ 0x44

    t2[0] = p2[0];
 80038fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	62bb      	str	r3, [r7, #40]	@ 0x28
    t2[1] = p2[1];
 8003904:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t2[2] = p2[2];
 800390a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	633b      	str	r3, [r7, #48]	@ 0x30
    t2[3] = p2[3];
 8003910:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	637b      	str	r3, [r7, #52]	@ 0x34

    t3[0] = pMid1[0];
 8003916:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 800391c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8003922:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 8003928:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	627b      	str	r3, [r7, #36]	@ 0x24

    t4[0] = pMid2[0];
 800392e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 8003934:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 800393a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 8003940:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 8003946:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800394a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	1d1a      	adds	r2, r3, #4
 8003952:	603a      	str	r2, [r7, #0]
 8003954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003958:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 800395c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003960:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	1d1a      	adds	r2, r3, #4
 8003968:	603a      	str	r2, [r7, #0]
 800396a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800396e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 8003972:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8003976:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	1d1a      	adds	r2, r3, #4
 800397e:	603a      	str	r2, [r7, #0]
 8003980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003984:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 8003988:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800398c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	1d1a      	adds	r2, r3, #4
 8003994:	603a      	str	r2, [r7, #0]
 8003996:	ee77 7a27 	vadd.f32	s15, s14, s15
 800399a:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 800399e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80039a2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80039a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039aa:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    t2[1] = t1[1] - t2[1];
 80039ae:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80039b2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80039b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039ba:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[2] = t1[2] - t2[2];
 80039be:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80039c2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80039c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039ca:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 80039ce:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80039d2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80039d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039da:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    *pMid1++ = t3[0] + t4[0];
 80039de:	ed97 7a06 	vldr	s14, [r7, #24]
 80039e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80039e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039e8:	1d1a      	adds	r2, r3, #4
 80039ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80039ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039f0:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 80039f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80039f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80039fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039fe:	1d1a      	adds	r2, r3, #4
 8003a00:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a06:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 8003a0a:	ed97 7a08 	vldr	s14, [r7, #32]
 8003a0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a14:	1d1a      	adds	r2, r3, #4
 8003a16:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a1c:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8003a20:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003a24:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a28:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a2a:	1d1a      	adds	r2, r3, #4
 8003a2c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a32:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 8003a36:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a3a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a42:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 8003a46:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a4a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a52:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 8003a56:	ed97 7a04 	vldr	s14, [r7, #16]
 8003a5a:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a62:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8003a66:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a6a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003a6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a72:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 8003a76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a78:	1d1a      	adds	r2, r3, #4
 8003a7a:	673a      	str	r2, [r7, #112]	@ 0x70
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    twI = *tw++;
 8003a80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a82:	1d1a      	adds	r2, r3, #4
 8003a84:	673a      	str	r2, [r7, #112]	@ 0x70
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 8003a8a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003a8e:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a96:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t2[1] * twI;
 8003a9a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003a9e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8003aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa6:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t2[1] * twR;
 8003aaa:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003aae:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab6:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t2[0] * twI;
 8003aba:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003abe:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8003ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac6:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 8003aca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003acc:	1d1a      	adds	r2, r3, #4
 8003ace:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ad0:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8003ad4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8003ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003adc:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 8003ae0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ae2:	1d1a      	adds	r2, r3, #4
 8003ae4:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ae6:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003aea:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003aee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003af2:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 8003af6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003afa:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8003afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b02:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t4[1] * twR;
 8003b06:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b0a:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b12:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t4[1] * twI;
 8003b16:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b1a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8003b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b22:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t4[0] * twR;
 8003b26:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b2a:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b32:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *pMid2++ = m0 - m1;
 8003b36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b38:	1d1a      	adds	r2, r3, #4
 8003b3a:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003b3c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8003b40:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8003b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b48:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8003b4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b4e:	1d1a      	adds	r2, r3, #4
 8003b50:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003b52:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003b56:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b5e:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 8003b62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b64:	1d1a      	adds	r2, r3, #4
 8003b66:	673a      	str	r2, [r7, #112]	@ 0x70
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    twI = *tw++;
 8003b6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b6e:	1d1a      	adds	r2, r3, #4
 8003b70:	673a      	str	r2, [r7, #112]	@ 0x70
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	65bb      	str	r3, [r7, #88]	@ 0x58

    m0 = t2[2] * twR;
 8003b76:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003b7a:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b82:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t2[3] * twI;
 8003b86:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003b8a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8003b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b92:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t2[3] * twR;
 8003b96:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003b9a:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba2:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t2[2] * twI;
 8003ba6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003baa:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8003bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb2:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *p2++ = m0 + m1;
 8003bb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bb8:	1d1a      	adds	r2, r3, #4
 8003bba:	677a      	str	r2, [r7, #116]	@ 0x74
 8003bbc:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8003bc0:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8003bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bc8:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8003bcc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bce:	1d1a      	adds	r2, r3, #4
 8003bd0:	677a      	str	r2, [r7, #116]	@ 0x74
 8003bd2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003bd6:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003bda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bde:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 8003be2:	edd7 7a04 	vldr	s15, [r7, #16]
 8003be6:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8003bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bee:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t4[3] * twR;
 8003bf2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bf6:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bfe:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t4[3] * twI;
 8003c02:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c06:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8003c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c0e:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t4[2] * twR;
 8003c12:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c16:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c1e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *pMid2++ = m0 - m1;
 8003c22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c24:	1d1a      	adds	r2, r3, #4
 8003c26:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003c28:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8003c2c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8003c30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c34:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8003c38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c3a:	1d1a      	adds	r2, r3, #4
 8003c3c:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003c3e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003c42:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003c46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c4a:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 8003c4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c50:	3b01      	subs	r3, #1
 8003c52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f47f ae45 	bne.w	80038e6 <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8003c5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c5e:	b299      	uxth	r1, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	2302      	movs	r3, #2
 8003c66:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003c68:	f000 fef6 	bl	8004a58 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8003c6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c6e:	b299      	uxth	r1, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	2302      	movs	r3, #2
 8003c76:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003c78:	f000 feee 	bl	8004a58 <arm_radix8_butterfly_f32>
}
 8003c7c:	bf00      	nop
 8003c7e:	3780      	adds	r7, #128	@ 0x80
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b0ac      	sub	sp, #176	@ 0xb0
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	085b      	lsrs	r3, r3, #1
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8003c9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    float32_t * p3 = p2 + L;
 8003ca8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    float32_t * p4 = p3 + L;
 8003cb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	67fb      	str	r3, [r7, #124]	@ 0x7c
    pCol2 = p2;
 8003ccc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003cd0:	67bb      	str	r3, [r7, #120]	@ 0x78
    pCol3 = p3;
 8003cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cd6:	677b      	str	r3, [r7, #116]	@ 0x74
    pCol4 = p4;
 8003cd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003cdc:	673b      	str	r3, [r7, #112]	@ 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 8003cde:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ce2:	3b04      	subs	r3, #4
 8003ce4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    pEnd2 = p3 - 1;
 8003ce8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cec:	3b04      	subs	r3, #4
 8003cee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    pEnd3 = p4 - 1;
 8003cf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003cf6:	3b04      	subs	r3, #4
 8003cf8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    pEnd4 = pEnd3 + L;
 8003cfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003d06:	4413      	add	r3, r2
 8003d08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d14:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    L >>= 1;
 8003d24:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d28:	085b      	lsrs	r3, r3, #1
 8003d2a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 8003d2e:	2302      	movs	r3, #2
 8003d30:	66fb      	str	r3, [r7, #108]	@ 0x6c
    twMod3 = 4;
 8003d32:	2304      	movs	r3, #4
 8003d34:	66bb      	str	r3, [r7, #104]	@ 0x68
    twMod4 = 6;
 8003d36:	2306      	movs	r3, #6
 8003d38:	667b      	str	r3, [r7, #100]	@ 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	ed93 7a00 	vldr	s14, [r3]
 8003d40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d44:	edd3 7a00 	vldr	s15, [r3]
 8003d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d4c:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    p1sp3_0 = p1[0] - p3[0];
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	ed93 7a00 	vldr	s14, [r3]
 8003d56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d5a:	edd3 7a00 	vldr	s15, [r3]
 8003d5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d62:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	ed93 7a00 	vldr	s14, [r3]
 8003d6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d72:	3304      	adds	r3, #4
 8003d74:	edd3 7a00 	vldr	s15, [r3]
 8003d78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d7c:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    p1sp3_1 = p1[1] - p3[1];
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	3304      	adds	r3, #4
 8003d84:	ed93 7a00 	vldr	s14, [r3]
 8003d88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	edd3 7a00 	vldr	s15, [r3]
 8003d92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d96:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8003d9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d9e:	3304      	adds	r3, #4
 8003da0:	ed93 7a00 	vldr	s14, [r3]
 8003da4:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003da8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003db0:	3304      	adds	r3, #4
 8003db2:	edd3 7a00 	vldr	s15, [r3]
 8003db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dba:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8003dbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003dc2:	edd3 7a00 	vldr	s15, [r3]
 8003dc6:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8003dca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003dce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003dd2:	edd3 7a00 	vldr	s15, [r3]
 8003dd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dda:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8003dde:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003de2:	edd3 7a00 	vldr	s15, [r3]
 8003de6:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003dea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003dee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003df2:	edd3 7a00 	vldr	s15, [r3]
 8003df6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dfa:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8003dfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e02:	3304      	adds	r3, #4
 8003e04:	edd3 7a00 	vldr	s15, [r3]
 8003e08:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8003e0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e14:	3304      	adds	r3, #4
 8003e16:	edd3 7a00 	vldr	s15, [r3]
 8003e1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e1e:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8003e22:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e26:	3304      	adds	r3, #4
 8003e28:	edd3 7a00 	vldr	s15, [r3]
 8003e2c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003e30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e38:	3304      	adds	r3, #4
 8003e3a:	edd3 7a00 	vldr	s15, [r3]
 8003e3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e42:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8003e46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e4a:	ed93 7a00 	vldr	s14, [r3]
 8003e4e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003e52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e56:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e5a:	edd3 7a00 	vldr	s15, [r3]
 8003e5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e62:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8003e66:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e6a:	ed93 7a00 	vldr	s14, [r3]
 8003e6e:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003e72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e76:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e7a:	edd3 7a00 	vldr	s15, [r3]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	1d1a      	adds	r2, r3, #4
 8003e82:	603a      	str	r2, [r7, #0]
 8003e84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e88:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8003e8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e90:	3304      	adds	r3, #4
 8003e92:	ed93 7a00 	vldr	s14, [r3]
 8003e96:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8003e9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	edd3 7a00 	vldr	s15, [r3]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	1d1a      	adds	r2, r3, #4
 8003eac:	603a      	str	r2, [r7, #0]
 8003eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eb2:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8003eb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003eba:	1d1a      	adds	r2, r3, #4
 8003ebc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8003ec0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ec2:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8003ec4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ec8:	1d1a      	adds	r2, r3, #4
 8003eca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8003ece:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ed0:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8003ed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ed6:	1d1a      	adds	r2, r3, #4
 8003ed8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003edc:	69fa      	ldr	r2, [r7, #28]
 8003ede:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8003ee0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ee4:	1d1a      	adds	r2, r3, #4
 8003ee6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003eea:	6a3a      	ldr	r2, [r7, #32]
 8003eec:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8003eee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ef2:	1d1a      	adds	r2, r3, #4
 8003ef4:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8003efc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f00:	1d1a      	adds	r2, r3, #4
 8003f02:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8003f0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8003f12:	4413      	add	r3, r2
 8003f14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tw3 += twMod3;
 8003f18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8003f20:	4413      	add	r3, r2
 8003f22:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tw4 += twMod4;
 8003f26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f2e:	4413      	add	r3, r2
 8003f30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 8003f34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f38:	3b02      	subs	r3, #2
 8003f3a:	085b      	lsrs	r3, r3, #1
 8003f3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f40:	e31c      	b.n	800457c <arm_cfft_radix8by4_f32+0x8f8>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	ed93 7a00 	vldr	s14, [r3]
 8003f48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f4c:	edd3 7a00 	vldr	s15, [r3]
 8003f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f54:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
      p1sp3_0 = p1[0] - p3[0];
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	ed93 7a00 	vldr	s14, [r3]
 8003f5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f62:	edd3 7a00 	vldr	s15, [r3]
 8003f66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f6a:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      p1ap3_1 = p1[1] + p3[1];
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	3304      	adds	r3, #4
 8003f72:	ed93 7a00 	vldr	s14, [r3]
 8003f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	edd3 7a00 	vldr	s15, [r3]
 8003f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f84:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
      p1sp3_1 = p1[1] - p3[1];
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	ed93 7a00 	vldr	s14, [r3]
 8003f90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f94:	3304      	adds	r3, #4
 8003f96:	edd3 7a00 	vldr	s15, [r3]
 8003f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f9e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8003fa2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	ed93 7a00 	vldr	s14, [r3]
 8003fac:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003fb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003fb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003fb8:	3304      	adds	r3, #4
 8003fba:	edd3 7a00 	vldr	s15, [r3]
 8003fbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fc2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8003fc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003fca:	edd3 7a00 	vldr	s15, [r3]
 8003fce:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8003fd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003fda:	edd3 7a00 	vldr	s15, [r3]
 8003fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fe2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8003fe6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003fea:	edd3 7a00 	vldr	s15, [r3]
 8003fee:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003ff2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ff6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ffa:	edd3 7a00 	vldr	s15, [r3]
 8003ffe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004002:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8004006:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800400a:	3304      	adds	r3, #4
 800400c:	edd3 7a00 	vldr	s15, [r3]
 8004010:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8004014:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004018:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800401c:	3304      	adds	r3, #4
 800401e:	edd3 7a00 	vldr	s15, [r3]
 8004022:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004026:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 800402a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800402e:	3304      	adds	r3, #4
 8004030:	edd3 7a00 	vldr	s15, [r3]
 8004034:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8004038:	ee37 7a67 	vsub.f32	s14, s14, s15
 800403c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004040:	3304      	adds	r3, #4
 8004042:	edd3 7a00 	vldr	s15, [r3]
 8004046:	ee77 7a27 	vadd.f32	s15, s14, s15
 800404a:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 800404e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004052:	ed93 7a00 	vldr	s14, [r3]
 8004056:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800405a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800405e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004062:	edd3 7a00 	vldr	s15, [r3]
 8004066:	ee77 7a67 	vsub.f32	s15, s14, s15
 800406a:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 800406e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004072:	ed93 7a00 	vldr	s14, [r3]
 8004076:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800407a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800407e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004082:	edd3 7a00 	vldr	s15, [r3]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	1d1a      	adds	r2, r3, #4
 800408a:	603a      	str	r2, [r7, #0]
 800408c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004090:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8004094:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004098:	3304      	adds	r3, #4
 800409a:	ed93 7a00 	vldr	s14, [r3]
 800409e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80040a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80040a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040aa:	3304      	adds	r3, #4
 80040ac:	edd3 7a00 	vldr	s15, [r3]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	1d1a      	adds	r2, r3, #4
 80040b4:	603a      	str	r2, [r7, #0]
 80040b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040ba:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 80040be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040c2:	3b04      	subs	r3, #4
 80040c4:	ed93 7a00 	vldr	s14, [r3]
 80040c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80040cc:	3b04      	subs	r3, #4
 80040ce:	edd3 7a00 	vldr	s15, [r3]
 80040d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040d6:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 80040da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040de:	3b04      	subs	r3, #4
 80040e0:	ed93 7a00 	vldr	s14, [r3]
 80040e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80040e8:	3b04      	subs	r3, #4
 80040ea:	edd3 7a00 	vldr	s15, [r3]
 80040ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040f2:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 80040f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040fa:	ed93 7a00 	vldr	s14, [r3]
 80040fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004102:	edd3 7a00 	vldr	s15, [r3]
 8004106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800410a:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 800410e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004112:	ed93 7a00 	vldr	s14, [r3]
 8004116:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800411a:	edd3 7a00 	vldr	s15, [r3]
 800411e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004122:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8004126:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800412a:	ed93 7a00 	vldr	s14, [r3]
 800412e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004132:	edd3 7a00 	vldr	s15, [r3]
 8004136:	ee37 7a67 	vsub.f32	s14, s14, s15
 800413a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800413e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004142:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8004146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800414a:	ed93 7a00 	vldr	s14, [r3]
 800414e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004152:	edd3 7a00 	vldr	s15, [r3]
 8004156:	ee37 7a67 	vsub.f32	s14, s14, s15
 800415a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800415e:	3b04      	subs	r3, #4
 8004160:	edd3 7a00 	vldr	s15, [r3]
 8004164:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004168:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800416c:	3b04      	subs	r3, #4
 800416e:	edd3 7a00 	vldr	s15, [r3]
 8004172:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004176:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800417a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800417e:	3b04      	subs	r3, #4
 8004180:	edd3 7a00 	vldr	s15, [r3]
 8004184:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8004188:	ee37 7a67 	vsub.f32	s14, s14, s15
 800418c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004190:	3b04      	subs	r3, #4
 8004192:	edd3 7a00 	vldr	s15, [r3]
 8004196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800419a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 800419e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80041a2:	edd3 7a00 	vldr	s15, [r3]
 80041a6:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80041aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041b2:	edd3 7a00 	vldr	s15, [r3]
 80041b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041ba:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 80041be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80041c2:	ed93 7a00 	vldr	s14, [r3]
 80041c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041ca:	edd3 7a00 	vldr	s15, [r3]
 80041ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041d2:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80041d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041da:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 80041de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041e2:	3b04      	subs	r3, #4
 80041e4:	ed93 7a00 	vldr	s14, [r3]
 80041e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80041ec:	3b04      	subs	r3, #4
 80041ee:	edd3 7a00 	vldr	s15, [r3]
 80041f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041f6:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80041fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041fe:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8004202:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004206:	ed93 7a00 	vldr	s14, [r3]
 800420a:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800420e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004212:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004216:	edd3 7a00 	vldr	s15, [r3]
 800421a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800421e:	1f1a      	subs	r2, r3, #4
 8004220:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004228:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 800422c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004230:	3b04      	subs	r3, #4
 8004232:	ed93 7a00 	vldr	s14, [r3]
 8004236:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800423a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800423e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004242:	3b04      	subs	r3, #4
 8004244:	edd3 7a00 	vldr	s15, [r3]
 8004248:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800424c:	1f1a      	subs	r2, r3, #4
 800424e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004256:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 800425a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800425e:	1d1a      	adds	r2, r3, #4
 8004260:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = *tw2++;
 8004268:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800426c:	1d1a      	adds	r2, r3, #4
 800426e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	64fb      	str	r3, [r7, #76]	@ 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 8004276:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800427a:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800427e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004282:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t2[1] * twI;
 8004286:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800428a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800428e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004292:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t2[1] * twR;
 8004296:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800429a:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800429e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042a2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t2[0] * twI;
 80042a6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80042aa:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80042ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042b2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p2++ = m0 + m1;
 80042b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042ba:	1d1a      	adds	r2, r3, #4
 80042bc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80042c0:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80042c4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80042c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042cc:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 80042d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042d4:	1d1a      	adds	r2, r3, #4
 80042d6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80042da:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80042de:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80042e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042e6:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 80042ea:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80042ee:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80042f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042f6:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t2[2] * twR;
 80042fa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80042fe:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8004302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004306:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t2[2] * twI;
 800430a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800430e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8004312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004316:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t2[3] * twR;
 800431a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800431e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8004322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004326:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd2-- = m0 - m1;
 800432a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800432e:	1f1a      	subs	r2, r3, #4
 8004330:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004334:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8004338:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800433c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004340:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8004344:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004348:	1f1a      	subs	r2, r3, #4
 800434a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800434e:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8004352:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800435a:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 800435e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = tw3[1];
 8004366:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800436a:	3304      	adds	r3, #4
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tw3 += twMod3;
 8004370:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8004378:	4413      	add	r3, r2
 800437a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      /* Top */
      m0 = t3[0] * twR;
 800437e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004382:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8004386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800438a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t3[1] * twI;
 800438e:	edd7 7a08 	vldr	s15, [r7, #32]
 8004392:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8004396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800439a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t3[1] * twR;
 800439e:	edd7 7a08 	vldr	s15, [r7, #32]
 80043a2:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80043a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043aa:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t3[0] * twI;
 80043ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80043b2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80043b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ba:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p3++ = m0 + m1;
 80043be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043c2:	1d1a      	adds	r2, r3, #4
 80043c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043c8:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80043cc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80043d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043d4:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 80043d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043dc:	1d1a      	adds	r2, r3, #4
 80043de:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043e2:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80043e6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80043ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043ee:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 80043f2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80043f6:	eef1 7a67 	vneg.f32	s15, s15
 80043fa:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80043fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004402:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 =  t3[2] * twI;
 8004406:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800440a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800440e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004412:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 =  t3[2] * twR;
 8004416:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800441a:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800441e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004422:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 =  t3[3] * twI;
 8004426:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800442a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800442e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004432:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd3-- = m0 - m1;
 8004436:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800443a:	1f1a      	subs	r2, r3, #4
 800443c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004440:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8004444:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004448:	ee77 7a67 	vsub.f32	s15, s14, s15
 800444c:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8004450:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004454:	1f1a      	subs	r2, r3, #4
 8004456:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800445a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800445e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004462:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004466:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 800446a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = tw4[1];
 8004472:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004476:	3304      	adds	r3, #4
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tw4 += twMod4;
 800447c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004484:	4413      	add	r3, r2
 8004486:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      /* Top */
      m0 = t4[0] * twR;
 800448a:	edd7 7a03 	vldr	s15, [r7, #12]
 800448e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8004492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004496:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t4[1] * twI;
 800449a:	edd7 7a04 	vldr	s15, [r7, #16]
 800449e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80044a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a6:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t4[1] * twR;
 80044aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80044ae:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80044b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044b6:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t4[0] * twI;
 80044ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80044be:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80044c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c6:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p4++ = m0 + m1;
 80044ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044ce:	1d1a      	adds	r2, r3, #4
 80044d0:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80044d4:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80044d8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80044dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044e0:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 80044e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044e8:	1d1a      	adds	r2, r3, #4
 80044ea:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80044ee:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80044f2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80044f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044fa:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 80044fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8004502:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8004506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800450a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t4[2] * twR;
 800450e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004512:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8004516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800451a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t4[2] * twI;
 800451e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004522:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8004526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800452a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t4[3] * twR;
 800452e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004532:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8004536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800453a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd4-- = m0 - m1;
 800453e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004542:	1f1a      	subs	r2, r3, #4
 8004544:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8004548:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800454c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004550:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004554:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8004558:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800455c:	1f1a      	subs	r2, r3, #4
 800455e:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8004562:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8004566:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800456a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800456e:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8004572:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004576:	3b01      	subs	r3, #1
 8004578:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800457c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004580:	2b00      	cmp	r3, #0
 8004582:	f47f acde 	bne.w	8003f42 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	ed93 7a00 	vldr	s14, [r3]
 800458c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004590:	edd3 7a00 	vldr	s15, [r3]
 8004594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004598:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    p1sp3_0 = p1[0] - p3[0];
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	ed93 7a00 	vldr	s14, [r3]
 80045a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045a6:	edd3 7a00 	vldr	s15, [r3]
 80045aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045ae:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    p1ap3_1 = p1[1] + p3[1];
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	3304      	adds	r3, #4
 80045b6:	ed93 7a00 	vldr	s14, [r3]
 80045ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045be:	3304      	adds	r3, #4
 80045c0:	edd3 7a00 	vldr	s15, [r3]
 80045c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045c8:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    p1sp3_1 = p1[1] - p3[1];
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	3304      	adds	r3, #4
 80045d0:	ed93 7a00 	vldr	s14, [r3]
 80045d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045d8:	3304      	adds	r3, #4
 80045da:	edd3 7a00 	vldr	s15, [r3]
 80045de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045e2:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80045e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80045ea:	3304      	adds	r3, #4
 80045ec:	ed93 7a00 	vldr	s14, [r3]
 80045f0:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80045f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80045fc:	3304      	adds	r3, #4
 80045fe:	edd3 7a00 	vldr	s15, [r3]
 8004602:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004606:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800460a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800460e:	edd3 7a00 	vldr	s15, [r3]
 8004612:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8004616:	ee37 7a67 	vsub.f32	s14, s14, s15
 800461a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800461e:	edd3 7a00 	vldr	s15, [r3]
 8004622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004626:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800462a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800462e:	edd3 7a00 	vldr	s15, [r3]
 8004632:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8004636:	ee37 7a67 	vsub.f32	s14, s14, s15
 800463a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800463e:	edd3 7a00 	vldr	s15, [r3]
 8004642:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004646:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800464a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800464e:	3304      	adds	r3, #4
 8004650:	edd3 7a00 	vldr	s15, [r3]
 8004654:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8004658:	ee37 7a67 	vsub.f32	s14, s14, s15
 800465c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004660:	3304      	adds	r3, #4
 8004662:	edd3 7a00 	vldr	s15, [r3]
 8004666:	ee77 7a67 	vsub.f32	s15, s14, s15
 800466a:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800466e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004672:	3304      	adds	r3, #4
 8004674:	edd3 7a00 	vldr	s15, [r3]
 8004678:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800467c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004680:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004684:	3304      	adds	r3, #4
 8004686:	edd3 7a00 	vldr	s15, [r3]
 800468a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800468e:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8004692:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004696:	ed93 7a00 	vldr	s14, [r3]
 800469a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800469e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80046a6:	edd3 7a00 	vldr	s15, [r3]
 80046aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ae:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80046b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80046b6:	ed93 7a00 	vldr	s14, [r3]
 80046ba:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80046be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80046c6:	edd3 7a00 	vldr	s15, [r3]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	1d1a      	adds	r2, r3, #4
 80046ce:	603a      	str	r2, [r7, #0]
 80046d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046d4:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80046d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80046dc:	3304      	adds	r3, #4
 80046de:	ed93 7a00 	vldr	s14, [r3]
 80046e2:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80046e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80046ee:	3304      	adds	r3, #4
 80046f0:	edd3 7a00 	vldr	s15, [r3]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	1d1a      	adds	r2, r3, #4
 80046f8:	603a      	str	r2, [r7, #0]
 80046fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046fe:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 8004702:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw2[1];
 800470a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800470e:	3304      	adds	r3, #4
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t2[0] * twR;
 8004714:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004718:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800471c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004720:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t2[1] * twI;
 8004724:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004728:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800472c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004730:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t2[1] * twR;
 8004734:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004738:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800473c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004740:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t2[0] * twI;
 8004744:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004748:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800474c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004750:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p2++ = m0 + m1;
 8004754:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004758:	1d1a      	adds	r2, r3, #4
 800475a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800475e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8004762:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800476a:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800476e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004772:	1d1a      	adds	r2, r3, #4
 8004774:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8004778:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800477c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004780:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004784:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 8004788:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw3[1];
 8004790:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004794:	3304      	adds	r3, #4
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t3[0] * twR;
 800479a:	edd7 7a07 	vldr	s15, [r7, #28]
 800479e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80047a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a6:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t3[1] * twI;
 80047aa:	edd7 7a08 	vldr	s15, [r7, #32]
 80047ae:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80047b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b6:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t3[1] * twR;
 80047ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80047be:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80047c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047c6:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t3[0] * twI;
 80047ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80047ce:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80047d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d6:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p3++ = m0 + m1;
 80047da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047de:	1d1a      	adds	r2, r3, #4
 80047e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80047e4:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80047e8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80047ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047f0:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 80047f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047f8:	1d1a      	adds	r2, r3, #4
 80047fa:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80047fe:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8004802:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004806:	ee77 7a67 	vsub.f32	s15, s14, s15
 800480a:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 800480e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw4[1];
 8004816:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800481a:	3304      	adds	r3, #4
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t4[0] * twR;
 8004820:	edd7 7a03 	vldr	s15, [r7, #12]
 8004824:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8004828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800482c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t4[1] * twI;
 8004830:	edd7 7a04 	vldr	s15, [r7, #16]
 8004834:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8004838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800483c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t4[1] * twR;
 8004840:	edd7 7a04 	vldr	s15, [r7, #16]
 8004844:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8004848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800484c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t4[0] * twI;
 8004850:	edd7 7a03 	vldr	s15, [r7, #12]
 8004854:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8004858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800485c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p4++ = m0 + m1;
 8004860:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004864:	1d1a      	adds	r2, r3, #4
 8004866:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800486a:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800486e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004872:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004876:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 800487a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800487e:	1d1a      	adds	r2, r3, #4
 8004880:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8004884:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8004888:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800488c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004890:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8004894:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004898:	b299      	uxth	r1, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	2304      	movs	r3, #4
 80048a0:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80048a2:	f000 f8d9 	bl	8004a58 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 80048a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80048aa:	b299      	uxth	r1, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	2304      	movs	r3, #4
 80048b2:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80048b4:	f000 f8d0 	bl	8004a58 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 80048b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80048bc:	b299      	uxth	r1, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	2304      	movs	r3, #4
 80048c4:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80048c6:	f000 f8c7 	bl	8004a58 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 80048ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80048ce:	b299      	uxth	r1, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	2304      	movs	r3, #4
 80048d6:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80048d8:	f000 f8be 	bl	8004a58 <arm_radix8_butterfly_f32>
}
 80048dc:	bf00      	nop
 80048de:	37b0      	adds	r7, #176	@ 0xb0
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	4611      	mov	r1, r2
 80048f0:	461a      	mov	r2, r3
 80048f2:	460b      	mov	r3, r1
 80048f4:	71fb      	strb	r3, [r7, #7]
 80048f6:	4613      	mov	r3, r2
 80048f8:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8004900:	79fb      	ldrb	r3, [r7, #7]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d117      	bne.n	8004936 <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	3304      	adds	r3, #4
 800490a:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 800490c:	2300      	movs	r3, #0
 800490e:	61fb      	str	r3, [r7, #28]
 8004910:	e00d      	b.n	800492e <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	edd3 7a00 	vldr	s15, [r3]
 8004918:	eef1 7a67 	vneg.f32	s15, s15
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	3308      	adds	r3, #8
 8004926:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	3301      	adds	r3, #1
 800492c:	61fb      	str	r3, [r7, #28]
 800492e:	69fa      	ldr	r2, [r7, #28]
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	429a      	cmp	r2, r3
 8004934:	d3ed      	bcc.n	8004912 <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800493c:	d040      	beq.n	80049c0 <arm_cfft_f32+0xdc>
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004944:	d845      	bhi.n	80049d2 <arm_cfft_f32+0xee>
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800494c:	d033      	beq.n	80049b6 <arm_cfft_f32+0xd2>
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004954:	d83d      	bhi.n	80049d2 <arm_cfft_f32+0xee>
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800495c:	d026      	beq.n	80049ac <arm_cfft_f32+0xc8>
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004964:	d835      	bhi.n	80049d2 <arm_cfft_f32+0xee>
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800496c:	d028      	beq.n	80049c0 <arm_cfft_f32+0xdc>
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004974:	d82d      	bhi.n	80049d2 <arm_cfft_f32+0xee>
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800497c:	d01b      	beq.n	80049b6 <arm_cfft_f32+0xd2>
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004984:	d825      	bhi.n	80049d2 <arm_cfft_f32+0xee>
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2b80      	cmp	r3, #128	@ 0x80
 800498a:	d00f      	beq.n	80049ac <arm_cfft_f32+0xc8>
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2b80      	cmp	r3, #128	@ 0x80
 8004990:	d81f      	bhi.n	80049d2 <arm_cfft_f32+0xee>
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2b40      	cmp	r3, #64	@ 0x40
 8004996:	d013      	beq.n	80049c0 <arm_cfft_f32+0xdc>
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	2b40      	cmp	r3, #64	@ 0x40
 800499c:	d819      	bhi.n	80049d2 <arm_cfft_f32+0xee>
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2b10      	cmp	r3, #16
 80049a2:	d003      	beq.n	80049ac <arm_cfft_f32+0xc8>
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	d005      	beq.n	80049b6 <arm_cfft_f32+0xd2>
 80049aa:	e012      	b.n	80049d2 <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80049ac:	68b9      	ldr	r1, [r7, #8]
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f7fe ff74 	bl	800389c <arm_cfft_radix8by2_f32>
    break;
 80049b4:	e00d      	b.n	80049d2 <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80049b6:	68b9      	ldr	r1, [r7, #8]
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f7ff f963 	bl	8003c84 <arm_cfft_radix8by4_f32>
    break;
 80049be:	e008      	b.n	80049d2 <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	b299      	uxth	r1, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	2301      	movs	r3, #1
 80049ca:	68b8      	ldr	r0, [r7, #8]
 80049cc:	f000 f844 	bl	8004a58 <arm_radix8_butterfly_f32>
    break;
 80049d0:	bf00      	nop
  }

  if ( bitReverseFlag )
 80049d2:	79bb      	ldrb	r3, [r7, #6]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d007      	beq.n	80049e8 <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8999      	ldrh	r1, [r3, #12]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	461a      	mov	r2, r3
 80049e2:	68b8      	ldr	r0, [r7, #8]
 80049e4:	f7fe ff01 	bl	80037ea <arm_bitreversal_32>

  if (ifftFlag == 1U)
 80049e8:	79fb      	ldrb	r3, [r7, #7]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d130      	bne.n	8004a50 <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	ee07 3a90 	vmov	s15, r3
 80049f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a00:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8004a08:	2300      	movs	r3, #0
 8004a0a:	61fb      	str	r3, [r7, #28]
 8004a0c:	e01c      	b.n	8004a48 <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	1d1a      	adds	r2, r3, #4
 8004a12:	61ba      	str	r2, [r7, #24]
 8004a14:	ed93 7a00 	vldr	s14, [r3]
 8004a18:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a20:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	edd3 7a00 	vldr	s15, [r3]
 8004a2a:	eeb1 7a67 	vneg.f32	s14, s15
 8004a2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	3301      	adds	r3, #1
 8004a46:	61fb      	str	r3, [r7, #28]
 8004a48:	69fa      	ldr	r2, [r7, #28]
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d3de      	bcc.n	8004a0e <arm_cfft_f32+0x12a>
    }
  }
}
 8004a50:	bf00      	nop
 8004a52:	3720      	adds	r7, #32
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b0bd      	sub	sp, #244	@ 0xf4
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	607a      	str	r2, [r7, #4]
 8004a62:	461a      	mov	r2, r3
 8004a64:	460b      	mov	r3, r1
 8004a66:	817b      	strh	r3, [r7, #10]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8004a6c:	4b09      	ldr	r3, [pc, #36]	@ (8004a94 <arm_radix8_butterfly_f32+0x3c>)
 8004a6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

   n2 = fftLen;
 8004a72:	897b      	ldrh	r3, [r7, #10]
 8004a74:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

   do
   {
      n1 = n2;
 8004a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      n2 = n2 >> 3;
 8004a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a84:	08db      	lsrs	r3, r3, #3
 8004a86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      i1 = 0;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a90:	e002      	b.n	8004a98 <arm_radix8_butterfly_f32+0x40>
 8004a92:	bf00      	nop
 8004a94:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8004a98:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8004a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
         i3 = i2 + n2;
 8004aa6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8004aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aae:	4413      	add	r3, r2
 8004ab0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
         i4 = i3 + n2;
 8004ab4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004abc:	4413      	add	r3, r2
 8004abe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
         i5 = i4 + n2;
 8004ac2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8004ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aca:	4413      	add	r3, r2
 8004acc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
         i6 = i5 + n2;
 8004ad0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ad8:	4413      	add	r3, r2
 8004ada:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
         i7 = i6 + n2;
 8004ade:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
         i8 = i7 + n2;
 8004aec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004af4:	4413      	add	r3, r2
 8004af6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8004afa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	4413      	add	r3, r2
 8004b04:	ed93 7a00 	vldr	s14, [r3]
 8004b08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4413      	add	r3, r2
 8004b12:	edd3 7a00 	vldr	s15, [r3]
 8004b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b1a:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8004b1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4413      	add	r3, r2
 8004b28:	ed93 7a00 	vldr	s14, [r3]
 8004b2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4413      	add	r3, r2
 8004b36:	edd3 7a00 	vldr	s15, [r3]
 8004b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b3e:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8004b42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	ed93 7a00 	vldr	s14, [r3]
 8004b50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	4413      	add	r3, r2
 8004b5a:	edd3 7a00 	vldr	s15, [r3]
 8004b5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b62:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8004b66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4413      	add	r3, r2
 8004b70:	ed93 7a00 	vldr	s14, [r3]
 8004b74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	edd3 7a00 	vldr	s15, [r3]
 8004b82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b86:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8004b8a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	4413      	add	r3, r2
 8004b94:	ed93 7a00 	vldr	s14, [r3]
 8004b98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b9c:	00db      	lsls	r3, r3, #3
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	edd3 7a00 	vldr	s15, [r3]
 8004ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004baa:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8004bae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	ed93 7a00 	vldr	s14, [r3]
 8004bbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	edd3 7a00 	vldr	s15, [r3]
 8004bca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bce:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8004bd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	4413      	add	r3, r2
 8004bdc:	ed93 7a00 	vldr	s14, [r3]
 8004be0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	4413      	add	r3, r2
 8004bea:	edd3 7a00 	vldr	s15, [r3]
 8004bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bf2:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8004bf6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	4413      	add	r3, r2
 8004c00:	ed93 7a00 	vldr	s14, [r3]
 8004c04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	edd3 7a00 	vldr	s15, [r3]
 8004c12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c16:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
         t1 = r1 - r3;
 8004c1a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8004c1e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8004c22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c26:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
         r1 = r1 + r3;
 8004c2a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8004c2e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8004c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c36:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r3 = r2 - r4;
 8004c3a:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8004c3e:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8004c42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c46:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         r2 = r2 + r4;
 8004c4a:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8004c4e:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8004c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c56:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         pSrc[2 * i1] = r1 + r2;
 8004c5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	4413      	add	r3, r2
 8004c64:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8004c68:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8004c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c70:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8004c74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004c78:	00db      	lsls	r3, r3, #3
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8004c82:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8004c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c8a:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8004c8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	3304      	adds	r3, #4
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	4413      	add	r3, r2
 8004c9a:	ed93 7a00 	vldr	s14, [r3]
 8004c9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	4413      	add	r3, r2
 8004caa:	edd3 7a00 	vldr	s15, [r3]
 8004cae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cb2:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8004cb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	ed93 7a00 	vldr	s14, [r3]
 8004cc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	3304      	adds	r3, #4
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	edd3 7a00 	vldr	s15, [r3]
 8004cd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cda:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8004cde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4413      	add	r3, r2
 8004cea:	ed93 7a00 	vldr	s14, [r3]
 8004cee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	edd3 7a00 	vldr	s15, [r3]
 8004cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d02:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8004d06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	4413      	add	r3, r2
 8004d12:	ed93 7a00 	vldr	s14, [r3]
 8004d16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4413      	add	r3, r2
 8004d22:	edd3 7a00 	vldr	s15, [r3]
 8004d26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d2a:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8004d2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	3304      	adds	r3, #4
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	4413      	add	r3, r2
 8004d3a:	ed93 7a00 	vldr	s14, [r3]
 8004d3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	3304      	adds	r3, #4
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	4413      	add	r3, r2
 8004d4a:	edd3 7a00 	vldr	s15, [r3]
 8004d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d52:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8004d56:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	4413      	add	r3, r2
 8004d62:	ed93 7a00 	vldr	s14, [r3]
 8004d66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	3304      	adds	r3, #4
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	4413      	add	r3, r2
 8004d72:	edd3 7a00 	vldr	s15, [r3]
 8004d76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d7a:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8004d7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	3304      	adds	r3, #4
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	4413      	add	r3, r2
 8004d8a:	ed93 7a00 	vldr	s14, [r3]
 8004d8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	3304      	adds	r3, #4
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	4413      	add	r3, r2
 8004d9a:	edd3 7a00 	vldr	s15, [r3]
 8004d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004da2:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8004da6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	3304      	adds	r3, #4
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4413      	add	r3, r2
 8004db2:	ed93 7a00 	vldr	s14, [r3]
 8004db6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	edd3 7a00 	vldr	s15, [r3]
 8004dc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dca:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         t2 = r1 - s3;
 8004dce:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8004dd2:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8004dd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dda:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         r1 = r1 + s3;
 8004dde:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8004de2:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8004de6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dea:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         s3 = r2 - r4;
 8004dee:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8004df2:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8004df6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dfa:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
         r2 = r2 + r4;
 8004dfe:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8004e02:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8004e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e0a:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8004e0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	3304      	adds	r3, #4
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	4413      	add	r3, r2
 8004e1a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8004e1e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8004e22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e26:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8004e2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	3304      	adds	r3, #4
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4413      	add	r3, r2
 8004e36:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8004e3a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8004e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e42:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8004e46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8004e54:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8004e58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e5c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8004e60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	4413      	add	r3, r2
 8004e6a:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8004e6e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8004e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e76:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8004e7a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	3304      	adds	r3, #4
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4413      	add	r3, r2
 8004e86:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8004e8a:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8004e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e92:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8004e96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8004ea6:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8004eaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eae:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8004eb2:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8004eb6:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8004eba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ebe:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8004ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ec6:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r6 = (r6 + r8) * C81;
 8004eca:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8004ece:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8004ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ed6:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8004eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ede:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         r2 = (s6 - s8) * C81;
 8004ee2:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8004ee6:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8004eea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004eee:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8004ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef6:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         s6 = (s6 + s8) * C81;
 8004efa:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8004efe:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8004f02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f06:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8004f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f0e:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
         t1 = r5 - r1;
 8004f12:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8004f16:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8004f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f1e:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
         r5 = r5 + r1;
 8004f22:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8004f26:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8004f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f2e:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
         r8 = r7 - r6;
 8004f32:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8004f36:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8004f3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f3e:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
         r7 = r7 + r6;
 8004f42:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8004f46:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8004f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f4e:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
         t2 = s5 - r2;
 8004f52:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8004f56:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8004f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f5e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         s5 = s5 + r2;
 8004f62:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8004f66:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8004f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f6e:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
         s8 = s7 - s6;
 8004f72:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8004f76:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8004f7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f7e:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         s7 = s7 + s6;
 8004f82:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8004f86:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8004f8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f8e:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
         pSrc[2 * i2]     = r5 + s7;
 8004f92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8004fa0:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8004fa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fa8:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8004fac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8004fba:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8004fbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fc2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8004fc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004fca:	00db      	lsls	r3, r3, #3
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8004fd4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8004fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fdc:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8004fe0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4413      	add	r3, r2
 8004fea:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8004fee:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8004ff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ff6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8004ffa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	3304      	adds	r3, #4
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	4413      	add	r3, r2
 8005006:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800500a:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800500e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005012:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8005016:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	3304      	adds	r3, #4
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4413      	add	r3, r2
 8005022:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8005026:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800502a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800502e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8005032:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	3304      	adds	r3, #4
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4413      	add	r3, r2
 800503e:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8005042:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8005046:	ee77 7a67 	vsub.f32	s15, s14, s15
 800504a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 800504e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	3304      	adds	r3, #4
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4413      	add	r3, r2
 800505a:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800505e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8005062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005066:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 800506a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800506e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005072:	4413      	add	r3, r2
 8005074:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      } while (i1 < fftLen);
 8005078:	897b      	ldrh	r3, [r7, #10]
 800507a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800507e:	429a      	cmp	r2, r3
 8005080:	f4ff ad0a 	bcc.w	8004a98 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8005084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005088:	2b07      	cmp	r3, #7
 800508a:	f240 84e3 	bls.w	8005a54 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 800508e:	2300      	movs	r3, #0
 8005090:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
      j = 1;
 8005094:	2301      	movs	r3, #1
 8005096:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 800509a:	893b      	ldrh	r3, [r7, #8]
 800509c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80050a0:	4413      	add	r3, r2
 80050a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
         ia1 = id;
 80050a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80050a6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
         ia2 = ia1 + id;
 80050aa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80050ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80050b0:	4413      	add	r3, r2
 80050b2:	67bb      	str	r3, [r7, #120]	@ 0x78
         ia3 = ia2 + id;
 80050b4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80050b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80050b8:	4413      	add	r3, r2
 80050ba:	677b      	str	r3, [r7, #116]	@ 0x74
         ia4 = ia3 + id;
 80050bc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80050be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80050c0:	4413      	add	r3, r2
 80050c2:	673b      	str	r3, [r7, #112]	@ 0x70
         ia5 = ia4 + id;
 80050c4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80050c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80050c8:	4413      	add	r3, r2
 80050ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
         ia6 = ia5 + id;
 80050cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80050d0:	4413      	add	r3, r2
 80050d2:	66bb      	str	r3, [r7, #104]	@ 0x68
         ia7 = ia6 + id;
 80050d4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80050d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80050d8:	4413      	add	r3, r2
 80050da:	667b      	str	r3, [r7, #100]	@ 0x64

         co2 = pCoef[2 * ia1];
 80050dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80050e0:	00db      	lsls	r3, r3, #3
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	4413      	add	r3, r2
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	663b      	str	r3, [r7, #96]	@ 0x60
         co3 = pCoef[2 * ia2];
 80050ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	4413      	add	r3, r2
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
         co4 = pCoef[2 * ia3];
 80050f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	4413      	add	r3, r2
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	65bb      	str	r3, [r7, #88]	@ 0x58
         co5 = pCoef[2 * ia4];
 8005102:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	4413      	add	r3, r2
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	657b      	str	r3, [r7, #84]	@ 0x54
         co6 = pCoef[2 * ia5];
 800510e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	4413      	add	r3, r2
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	653b      	str	r3, [r7, #80]	@ 0x50
         co7 = pCoef[2 * ia6];
 800511a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	4413      	add	r3, r2
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	64fb      	str	r3, [r7, #76]	@ 0x4c
         co8 = pCoef[2 * ia7];
 8005126:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	4413      	add	r3, r2
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	64bb      	str	r3, [r7, #72]	@ 0x48
         si2 = pCoef[2 * ia1 + 1];
 8005132:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	3304      	adds	r3, #4
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	4413      	add	r3, r2
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	647b      	str	r3, [r7, #68]	@ 0x44
         si3 = pCoef[2 * ia2 + 1];
 8005142:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	3304      	adds	r3, #4
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	4413      	add	r3, r2
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	643b      	str	r3, [r7, #64]	@ 0x40
         si4 = pCoef[2 * ia3 + 1];
 8005150:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	3304      	adds	r3, #4
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	4413      	add	r3, r2
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	63fb      	str	r3, [r7, #60]	@ 0x3c
         si5 = pCoef[2 * ia4 + 1];
 800515e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	3304      	adds	r3, #4
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	4413      	add	r3, r2
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	63bb      	str	r3, [r7, #56]	@ 0x38
         si6 = pCoef[2 * ia5 + 1];
 800516c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	3304      	adds	r3, #4
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	4413      	add	r3, r2
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	637b      	str	r3, [r7, #52]	@ 0x34
         si7 = pCoef[2 * ia6 + 1];
 800517a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	3304      	adds	r3, #4
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	4413      	add	r3, r2
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	633b      	str	r3, [r7, #48]	@ 0x30
         si8 = pCoef[2 * ia7 + 1];
 8005188:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	3304      	adds	r3, #4
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	4413      	add	r3, r2
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	62fb      	str	r3, [r7, #44]	@ 0x2c

         i1 = j;
 8005196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800519a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 800519e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80051a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051a6:	4413      	add	r3, r2
 80051a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
            i3 = i2 + n2;
 80051ac:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80051b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051b4:	4413      	add	r3, r2
 80051b6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            i4 = i3 + n2;
 80051ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80051be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051c2:	4413      	add	r3, r2
 80051c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
            i5 = i4 + n2;
 80051c8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80051cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051d0:	4413      	add	r3, r2
 80051d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
            i6 = i5 + n2;
 80051d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80051da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051de:	4413      	add	r3, r2
 80051e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
            i7 = i6 + n2;
 80051e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80051e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051ec:	4413      	add	r3, r2
 80051ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            i8 = i7 + n2;
 80051f2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80051f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051fa:	4413      	add	r3, r2
 80051fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8005200:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4413      	add	r3, r2
 800520a:	ed93 7a00 	vldr	s14, [r3]
 800520e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4413      	add	r3, r2
 8005218:	edd3 7a00 	vldr	s15, [r3]
 800521c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005220:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8005224:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4413      	add	r3, r2
 800522e:	ed93 7a00 	vldr	s14, [r3]
 8005232:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4413      	add	r3, r2
 800523c:	edd3 7a00 	vldr	s15, [r3]
 8005240:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005244:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8005248:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800524c:	00db      	lsls	r3, r3, #3
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4413      	add	r3, r2
 8005252:	ed93 7a00 	vldr	s14, [r3]
 8005256:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4413      	add	r3, r2
 8005260:	edd3 7a00 	vldr	s15, [r3]
 8005264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005268:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800526c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4413      	add	r3, r2
 8005276:	ed93 7a00 	vldr	s14, [r3]
 800527a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	edd3 7a00 	vldr	s15, [r3]
 8005288:	ee77 7a67 	vsub.f32	s15, s14, s15
 800528c:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8005290:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4413      	add	r3, r2
 800529a:	ed93 7a00 	vldr	s14, [r3]
 800529e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	4413      	add	r3, r2
 80052a8:	edd3 7a00 	vldr	s15, [r3]
 80052ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052b0:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80052b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	4413      	add	r3, r2
 80052be:	ed93 7a00 	vldr	s14, [r3]
 80052c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	4413      	add	r3, r2
 80052cc:	edd3 7a00 	vldr	s15, [r3]
 80052d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052d4:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80052d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052dc:	00db      	lsls	r3, r3, #3
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	4413      	add	r3, r2
 80052e2:	ed93 7a00 	vldr	s14, [r3]
 80052e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4413      	add	r3, r2
 80052f0:	edd3 7a00 	vldr	s15, [r3]
 80052f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052f8:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80052fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	4413      	add	r3, r2
 8005306:	ed93 7a00 	vldr	s14, [r3]
 800530a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4413      	add	r3, r2
 8005314:	edd3 7a00 	vldr	s15, [r3]
 8005318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800531c:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
            t1 = r1 - r3;
 8005320:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8005324:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8005328:	ee77 7a67 	vsub.f32	s15, s14, s15
 800532c:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            r1 = r1 + r3;
 8005330:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8005334:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8005338:	ee77 7a27 	vadd.f32	s15, s14, s15
 800533c:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r3 = r2 - r4;
 8005340:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8005344:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8005348:	ee77 7a67 	vsub.f32	s15, s14, s15
 800534c:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            r2 = r2 + r4;
 8005350:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8005354:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8005358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800535c:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            pSrc[2 * i1] = r1 + r2;
 8005360:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4413      	add	r3, r2
 800536a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800536e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8005372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005376:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 800537a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800537e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8005382:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005386:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800538a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	3304      	adds	r3, #4
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4413      	add	r3, r2
 8005396:	ed93 7a00 	vldr	s14, [r3]
 800539a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	3304      	adds	r3, #4
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4413      	add	r3, r2
 80053a6:	edd3 7a00 	vldr	s15, [r3]
 80053aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053ae:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80053b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	3304      	adds	r3, #4
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4413      	add	r3, r2
 80053be:	ed93 7a00 	vldr	s14, [r3]
 80053c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	3304      	adds	r3, #4
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	4413      	add	r3, r2
 80053ce:	edd3 7a00 	vldr	s15, [r3]
 80053d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053d6:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80053da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	3304      	adds	r3, #4
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	4413      	add	r3, r2
 80053e6:	ed93 7a00 	vldr	s14, [r3]
 80053ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	3304      	adds	r3, #4
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	4413      	add	r3, r2
 80053f6:	edd3 7a00 	vldr	s15, [r3]
 80053fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053fe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8005402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	3304      	adds	r3, #4
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	4413      	add	r3, r2
 800540e:	ed93 7a00 	vldr	s14, [r3]
 8005412:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	3304      	adds	r3, #4
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	4413      	add	r3, r2
 800541e:	edd3 7a00 	vldr	s15, [r3]
 8005422:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005426:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800542a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	3304      	adds	r3, #4
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	4413      	add	r3, r2
 8005436:	ed93 7a00 	vldr	s14, [r3]
 800543a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800543e:	00db      	lsls	r3, r3, #3
 8005440:	3304      	adds	r3, #4
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4413      	add	r3, r2
 8005446:	edd3 7a00 	vldr	s15, [r3]
 800544a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800544e:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8005452:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	3304      	adds	r3, #4
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	4413      	add	r3, r2
 800545e:	ed93 7a00 	vldr	s14, [r3]
 8005462:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	3304      	adds	r3, #4
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4413      	add	r3, r2
 800546e:	edd3 7a00 	vldr	s15, [r3]
 8005472:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005476:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800547a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	3304      	adds	r3, #4
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	4413      	add	r3, r2
 8005486:	ed93 7a00 	vldr	s14, [r3]
 800548a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	3304      	adds	r3, #4
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	4413      	add	r3, r2
 8005496:	edd3 7a00 	vldr	s15, [r3]
 800549a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800549e:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 80054a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054a6:	00db      	lsls	r3, r3, #3
 80054a8:	3304      	adds	r3, #4
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4413      	add	r3, r2
 80054ae:	ed93 7a00 	vldr	s14, [r3]
 80054b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80054b6:	00db      	lsls	r3, r3, #3
 80054b8:	3304      	adds	r3, #4
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4413      	add	r3, r2
 80054be:	edd3 7a00 	vldr	s15, [r3]
 80054c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054c6:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            t2 = s1 - s3;
 80054ca:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80054ce:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80054d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054d6:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            s1 = s1 + s3;
 80054da:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80054de:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80054e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054e6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s3 = s2 - s4;
 80054ea:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80054ee:	edd7 7a08 	vldr	s15, [r7, #32]
 80054f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054f6:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            s2 = s2 + s4;
 80054fa:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80054fe:	edd7 7a08 	vldr	s15, [r7, #32]
 8005502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005506:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            r1 = t1 + s3;
 800550a:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 800550e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8005512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005516:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            t1 = t1 - s3;
 800551a:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 800551e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8005522:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005526:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 800552a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	3304      	adds	r3, #4
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	4413      	add	r3, r2
 8005536:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800553a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800553e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005542:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8005546:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800554a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800554e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005552:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            s1 = t2 - r3;
 8005556:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800555a:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800555e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005562:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            t2 = t2 + r3;
 8005566:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800556a:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800556e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005572:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            p1 = co5 * r2;
 8005576:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800557a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800557e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005582:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8005586:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800558a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800558e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005592:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8005596:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800559a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800559e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a2:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 80055a6:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80055aa:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80055ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055b2:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 80055b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	ed97 7a07 	vldr	s14, [r7, #28]
 80055c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80055c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055cc:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 80055d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80055d4:	00db      	lsls	r3, r3, #3
 80055d6:	3304      	adds	r3, #4
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	4413      	add	r3, r2
 80055dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80055e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80055e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055e8:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 80055ec:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80055f0:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80055f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055f8:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 80055fc:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8005600:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005608:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 800560c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8005610:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005618:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 800561c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8005620:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8005624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005628:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 800562c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005630:	00db      	lsls	r3, r3, #3
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	4413      	add	r3, r2
 8005636:	ed97 7a07 	vldr	s14, [r7, #28]
 800563a:	edd7 7a06 	vldr	s15, [r7, #24]
 800563e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005642:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8005646:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	3304      	adds	r3, #4
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	4413      	add	r3, r2
 8005652:	ed97 7a05 	vldr	s14, [r7, #20]
 8005656:	edd7 7a04 	vldr	s15, [r7, #16]
 800565a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800565e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8005662:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8005666:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800566a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800566e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8005672:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8005676:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800567a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800567e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8005682:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8005686:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800568a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800568e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8005692:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8005696:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800569a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800569e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 80056a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4413      	add	r3, r2
 80056ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80056b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80056b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056b8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 80056bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	3304      	adds	r3, #4
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80056cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80056d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056d4:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 80056d8:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80056dc:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80056e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056e4:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80056e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ec:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r6 = (r6 + r8) * C81;
 80056f0:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80056f4:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80056f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056fc:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8005700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005704:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            s1 = (s6 - s8) * C81;
 8005708:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 800570c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8005710:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005714:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8005718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800571c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s6 = (s6 + s8) * C81;
 8005720:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8005724:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8005728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800572c:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8005730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005734:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            t1 = r5 - r1;
 8005738:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800573c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8005740:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005744:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            r5 = r5 + r1;
 8005748:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800574c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8005750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005754:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r8 = r7 - r6;
 8005758:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 800575c:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8005760:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005764:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
            r7 = r7 + r6;
 8005768:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 800576c:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8005770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005774:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            t2 = s5 - s1;
 8005778:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800577c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005780:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005784:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            s5 = s5 + s1;
 8005788:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800578c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005794:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s8 = s7 - s6;
 8005798:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 800579c:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80057a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057a4:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            s7 = s7 + s6;
 80057a8:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 80057ac:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80057b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057b4:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            r1 = r5 + s7;
 80057b8:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80057bc:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80057c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057c4:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r5 = r5 - s7;
 80057c8:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80057cc:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80057d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057d4:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r6 = t1 + s8;
 80057d8:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80057dc:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80057e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057e4:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            t1 = t1 - s8;
 80057e8:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80057ec:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80057f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057f4:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            s1 = s5 - r7;
 80057f8:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80057fc:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8005800:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005804:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s5 = s5 + r7;
 8005808:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800580c:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8005810:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005814:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s6 = t2 - r8;
 8005818:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800581c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8005820:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005824:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            t2 = t2 + r8;
 8005828:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800582c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8005830:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005834:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            p1 = co2 * r1;
 8005838:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800583c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8005840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005844:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8005848:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800584c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005854:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8005858:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800585c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005864:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8005868:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800586c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8005870:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005874:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8005878:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800587c:	00db      	lsls	r3, r3, #3
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	4413      	add	r3, r2
 8005882:	ed97 7a07 	vldr	s14, [r7, #28]
 8005886:	edd7 7a06 	vldr	s15, [r7, #24]
 800588a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800588e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8005892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	3304      	adds	r3, #4
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	4413      	add	r3, r2
 800589e:	ed97 7a05 	vldr	s14, [r7, #20]
 80058a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80058a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058aa:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 80058ae:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80058b2:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80058b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ba:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 80058be:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80058c2:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80058c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ca:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 80058ce:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80058d2:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80058d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058da:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 80058de:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80058e2:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80058e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ea:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 80058ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80058f2:	00db      	lsls	r3, r3, #3
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4413      	add	r3, r2
 80058f8:	ed97 7a07 	vldr	s14, [r7, #28]
 80058fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8005900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005904:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8005908:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	3304      	adds	r3, #4
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	4413      	add	r3, r2
 8005914:	ed97 7a05 	vldr	s14, [r7, #20]
 8005918:	edd7 7a04 	vldr	s15, [r7, #16]
 800591c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005920:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8005924:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8005928:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800592c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005930:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8005934:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8005938:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800593c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005940:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8005944:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8005948:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800594c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005950:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8005954:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8005958:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800595c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005960:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8005964:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4413      	add	r3, r2
 800596e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005972:	edd7 7a06 	vldr	s15, [r7, #24]
 8005976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800597a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800597e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	3304      	adds	r3, #4
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	4413      	add	r3, r2
 800598a:	ed97 7a05 	vldr	s14, [r7, #20]
 800598e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005992:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005996:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800599a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800599e:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80059a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059a6:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 80059aa:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80059ae:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80059b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059b6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 80059ba:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80059be:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80059c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 80059ca:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80059ce:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80059d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059d6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 80059da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	4413      	add	r3, r2
 80059e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80059e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80059ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059f0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 80059f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	3304      	adds	r3, #4
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	ed97 7a05 	vldr	s14, [r7, #20]
 8005a04:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a0c:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8005a10:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8005a14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a18:	4413      	add	r3, r2
 8005a1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
         } while (i1 < fftLen);
 8005a1e:	897b      	ldrh	r3, [r7, #10]
 8005a20:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8005a24:	429a      	cmp	r2, r3
 8005a26:	f4ff abba 	bcc.w	800519e <arm_radix8_butterfly_f32+0x746>

         j++;
 8005a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a2e:	3301      	adds	r3, #1
 8005a30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      } while (j < n2);
 8005a34:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	f4ff ab2c 	bcc.w	800509a <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 8005a42:	893b      	ldrh	r3, [r7, #8]
 8005a44:	00db      	lsls	r3, r3, #3
 8005a46:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8005a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a4c:	2b07      	cmp	r3, #7
 8005a4e:	f63f a813 	bhi.w	8004a78 <arm_radix8_butterfly_f32+0x20>
}
 8005a52:	e000      	b.n	8005a56 <arm_radix8_butterfly_f32+0xffe>
         break;
 8005a54:	bf00      	nop
}
 8005a56:	bf00      	nop
 8005a58:	37f4      	adds	r7, #244	@ 0xf4
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop

08005a64 <stage_rfft_f32>:

void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b095      	sub	sp, #84	@ 0x54
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
        uint32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	64bb      	str	r3, [r7, #72]	@ 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	647b      	str	r3, [r7, #68]	@ 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	643b      	str	r3, [r7, #64]	@ 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	3b01      	subs	r3, #1
 8005a84:	64fb      	str	r3, [r7, #76]	@ 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 8005a86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   xBI = pB[1];
 8005a8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	63bb      	str	r3, [r7, #56]	@ 0x38
   xAR = pA[0];
 8005a92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	637b      	str	r3, [r7, #52]	@ 0x34
   xAI = pA[1];
 8005a98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	633b      	str	r3, [r7, #48]	@ 0x30

   twR = *pCoeff++ ;
 8005a9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005aa0:	1d1a      	adds	r2, r3, #4
 8005aa2:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   twI = *pCoeff++ ;
 8005aa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005aaa:	1d1a      	adds	r2, r3, #4
 8005aac:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	62bb      	str	r3, [r7, #40]	@ 0x28

   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 8005ab2:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8005ab6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005aba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005abe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 8005ac2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8005ac6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ace:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 8005ad2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8005ad6:	edd7 7a08 	vldr	s15, [r7, #32]
 8005ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	1d1a      	adds	r2, r3, #4
 8005ae2:	607a      	str	r2, [r7, #4]
 8005ae4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005aec:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 8005af0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8005af4:	edd7 7a08 	vldr	s15, [r7, #32]
 8005af8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	1d1a      	adds	r2, r3, #4
 8005b00:	607a      	str	r2, [r7, #4]
 8005b02:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005b06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b0a:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 8005b0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	4413      	add	r3, r2
 8005b16:	643b      	str	r3, [r7, #64]	@ 0x40
   pA += 2;
 8005b18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b1a:	3308      	adds	r3, #8
 8005b1c:	647b      	str	r3, [r7, #68]	@ 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 8005b1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	63bb      	str	r3, [r7, #56]	@ 0x38
      xBR = pB[0];
 8005b24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
      xAR = pA[0];
 8005b2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	637b      	str	r3, [r7, #52]	@ 0x34
      xAI = pA[1];
 8005b30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	633b      	str	r3, [r7, #48]	@ 0x30

      twR = *pCoeff++;
 8005b36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b38:	1d1a      	adds	r2, r3, #4
 8005b3a:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      twI = *pCoeff++;
 8005b40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b42:	1d1a      	adds	r2, r3, #4
 8005b44:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	62bb      	str	r3, [r7, #40]	@ 0x28

      t1a = xBR - xAR ;
 8005b4a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8005b4e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005b52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b56:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t1b = xBI + xAI ;
 8005b5a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8005b5e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b66:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 8005b6a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8005b6e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b76:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 8005b7a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005b7e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b86:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 8005b8a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8005b8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b96:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 8005b9a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005b9e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ba6:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8005baa:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8005bae:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8005bb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bb6:	edd7 7a07 	vldr	s15, [r7, #28]
 8005bba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8005bc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	1d1a      	adds	r2, r3, #4
 8005bca:	607a      	str	r2, [r7, #4]
 8005bcc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005bd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bd4:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8005bd8:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8005bdc:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8005be0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005be4:	edd7 7a06 	vldr	s15, [r7, #24]
 8005be8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bec:	edd7 7a05 	vldr	s15, [r7, #20]
 8005bf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	1d1a      	adds	r2, r3, #4
 8005bf8:	607a      	str	r2, [r7, #4]
 8005bfa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005bfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c02:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8005c06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c08:	3308      	adds	r3, #8
 8005c0a:	647b      	str	r3, [r7, #68]	@ 0x44
      pB -= 2;
 8005c0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c0e:	3b08      	subs	r3, #8
 8005c10:	643b      	str	r3, [r7, #64]	@ 0x40
      k--;
 8005c12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c14:	3b01      	subs	r3, #1
 8005c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   } while (k > 0U);
 8005c18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f47f af7f 	bne.w	8005b1e <stage_rfft_f32+0xba>
}
 8005c20:	bf00      	nop
 8005c22:	bf00      	nop
 8005c24:	3754      	adds	r7, #84	@ 0x54
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b095      	sub	sp, #84	@ 0x54
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	60f8      	str	r0, [r7, #12]
 8005c36:	60b9      	str	r1, [r7, #8]
 8005c38:	607a      	str	r2, [r7, #4]
        uint32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	647b      	str	r3, [r7, #68]	@ 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	643b      	str	r3, [r7, #64]	@ 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c

   xAR = pA[0];
 8005c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   xAI = pA[1];
 8005c56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	63bb      	str	r3, [r7, #56]	@ 0x38

   pCoeff += 2 ;
 8005c5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c5e:	3308      	adds	r3, #8
 8005c60:	64bb      	str	r3, [r7, #72]	@ 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 8005c62:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8005c66:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8005c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	1d1a      	adds	r2, r3, #4
 8005c72:	607a      	str	r2, [r7, #4]
 8005c74:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005c78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c7c:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 8005c80:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8005c84:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8005c88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	1d1a      	adds	r2, r3, #4
 8005c90:	607a      	str	r2, [r7, #4]
 8005c92:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005c96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c9a:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 8005c9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ca0:	00db      	lsls	r3, r3, #3
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	643b      	str	r3, [r7, #64]	@ 0x40
   pA +=  2	   ;
 8005ca8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005caa:	3308      	adds	r3, #8
 8005cac:	647b      	str	r3, [r7, #68]	@ 0x44

   while (k > 0U)
 8005cae:	e07c      	b.n	8005daa <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 8005cb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	637b      	str	r3, [r7, #52]	@ 0x34
      xBR =   pB[0]    ;
 8005cb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	633b      	str	r3, [r7, #48]	@ 0x30
      xAR =  pA[0];
 8005cbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      xAI =  pA[1];
 8005cc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	63bb      	str	r3, [r7, #56]	@ 0x38

      twR = *pCoeff++;
 8005cc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cca:	1d1a      	adds	r2, r3, #4
 8005ccc:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      twI = *pCoeff++;
 8005cd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cd4:	1d1a      	adds	r2, r3, #4
 8005cd6:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	62bb      	str	r3, [r7, #40]	@ 0x28

      t1a = xAR - xBR ;
 8005cdc:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8005ce0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005ce4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ce8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t1b = xAI + xBI ;
 8005cec:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8005cf0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cf8:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 8005cfc:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8005d00:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d08:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 8005d0c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005d10:	edd7 7a08 	vldr	s15, [r7, #32]
 8005d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d18:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 8005d1c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005d20:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d28:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8005d2c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8005d30:	edd7 7a08 	vldr	s15, [r7, #32]
 8005d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d38:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8005d3c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8005d40:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005d44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d48:	edd7 7a07 	vldr	s15, [r7, #28]
 8005d4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d50:	edd7 7a06 	vldr	s15, [r7, #24]
 8005d54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	1d1a      	adds	r2, r3, #4
 8005d5c:	607a      	str	r2, [r7, #4]
 8005d5e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005d62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d66:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8005d6a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8005d6e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005d72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d76:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	1d1a      	adds	r2, r3, #4
 8005d8a:	607a      	str	r2, [r7, #4]
 8005d8c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005d90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d94:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8005d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d9a:	3308      	adds	r3, #8
 8005d9c:	647b      	str	r3, [r7, #68]	@ 0x44
      pB -= 2;
 8005d9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005da0:	3b08      	subs	r3, #8
 8005da2:	643b      	str	r3, [r7, #64]	@ 0x40
      k--;
 8005da4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005da6:	3b01      	subs	r3, #1
 8005da8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   while (k > 0U)
 8005daa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f47f af7f 	bne.w	8005cb0 <merge_rfft_f32+0x82>
   }

}
 8005db2:	bf00      	nop
 8005db4:	bf00      	nop
 8005db6:	3754      	adds	r7, #84	@ 0x54
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
 8005dcc:	70fb      	strb	r3, [r7, #3]
   arm_cfft_instance_f32 * Sint = &(S->Sint);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	617b      	str	r3, [r7, #20]
   Sint->fftLen = S->fftLenRFFT / 2;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8a1b      	ldrh	r3, [r3, #16]
 8005dd6:	085b      	lsrs	r3, r3, #1
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	801a      	strh	r2, [r3, #0]

   /* Calculation of Real FFT */
   if (ifftFlag)
 8005dde:	78fb      	ldrb	r3, [r7, #3]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00b      	beq.n	8005dfc <arm_rfft_fast_f32+0x3c>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	68b9      	ldr	r1, [r7, #8]
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f7ff ff20 	bl	8005c2e <merge_rfft_f32>

      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 8005dee:	78fa      	ldrb	r2, [r7, #3]
 8005df0:	2301      	movs	r3, #1
 8005df2:	6879      	ldr	r1, [r7, #4]
 8005df4:	6978      	ldr	r0, [r7, #20]
 8005df6:	f7fe fd75 	bl	80048e4 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 8005dfa:	e00a      	b.n	8005e12 <arm_rfft_fast_f32+0x52>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 8005dfc:	78fa      	ldrb	r2, [r7, #3]
 8005dfe:	2301      	movs	r3, #1
 8005e00:	68b9      	ldr	r1, [r7, #8]
 8005e02:	6978      	ldr	r0, [r7, #20]
 8005e04:	f7fe fd6e 	bl	80048e4 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	68b9      	ldr	r1, [r7, #8]
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f7ff fe29 	bl	8005a64 <stage_rfft_f32>
}
 8005e12:	bf00      	nop
 8005e14:	3718      	adds	r7, #24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
	...

08005e1c <arm_rfft_32_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_32_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]

  arm_cfft_instance_f32 * Sint;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d102      	bne.n	8005e30 <arm_rfft_32_fast_init_f32+0x14>
 8005e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e2e:	e014      	b.n	8005e5a <arm_rfft_32_fast_init_f32+0x3e>

  Sint = &(S->Sint);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	60fb      	str	r3, [r7, #12]
  Sint->fftLen = 16U;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2210      	movs	r2, #16
 8005e38:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = 32U;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	821a      	strh	r2, [r3, #16]

  Sint->bitRevLength = ARMBITREVINDEXTABLE_16_TABLE_LENGTH;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2214      	movs	r2, #20
 8005e44:	819a      	strh	r2, [r3, #12]
  Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable16;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	4a07      	ldr	r2, [pc, #28]	@ (8005e68 <arm_rfft_32_fast_init_f32+0x4c>)
 8005e4a:	609a      	str	r2, [r3, #8]
  Sint->pTwiddle     = (float32_t *) twiddleCoef_16;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4a07      	ldr	r2, [pc, #28]	@ (8005e6c <arm_rfft_32_fast_init_f32+0x50>)
 8005e50:	605a      	str	r2, [r3, #4]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a06      	ldr	r2, [pc, #24]	@ (8005e70 <arm_rfft_32_fast_init_f32+0x54>)
 8005e56:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	0801b350 	.word	0x0801b350
 8005e6c:	080135d0 	.word	0x080135d0
 8005e70:	0801e838 	.word	0x0801e838

08005e74 <arm_rfft_64_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_64_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]

  arm_cfft_instance_f32 * Sint;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d102      	bne.n	8005e88 <arm_rfft_64_fast_init_f32+0x14>
 8005e82:	f04f 33ff 	mov.w	r3, #4294967295
 8005e86:	e014      	b.n	8005eb2 <arm_rfft_64_fast_init_f32+0x3e>

  Sint = &(S->Sint);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	60fb      	str	r3, [r7, #12]
  Sint->fftLen = 32U;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = 64U;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2240      	movs	r2, #64	@ 0x40
 8005e96:	821a      	strh	r2, [r3, #16]

  Sint->bitRevLength = ARMBITREVINDEXTABLE_32_TABLE_LENGTH;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2230      	movs	r2, #48	@ 0x30
 8005e9c:	819a      	strh	r2, [r3, #12]
  Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable32;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	4a07      	ldr	r2, [pc, #28]	@ (8005ec0 <arm_rfft_64_fast_init_f32+0x4c>)
 8005ea2:	609a      	str	r2, [r3, #8]
  Sint->pTwiddle     = (float32_t *) twiddleCoef_32;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4a07      	ldr	r2, [pc, #28]	@ (8005ec4 <arm_rfft_64_fast_init_f32+0x50>)
 8005ea8:	605a      	str	r2, [r3, #4]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a06      	ldr	r2, [pc, #24]	@ (8005ec8 <arm_rfft_64_fast_init_f32+0x54>)
 8005eae:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	0801b378 	.word	0x0801b378
 8005ec4:	08013650 	.word	0x08013650
 8005ec8:	0801e8b8 	.word	0x0801e8b8

08005ecc <arm_rfft_256_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

arm_status arm_rfft_256_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]

  arm_cfft_instance_f32 * Sint;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d102      	bne.n	8005ee0 <arm_rfft_256_fast_init_f32+0x14>
 8005eda:	f04f 33ff 	mov.w	r3, #4294967295
 8005ede:	e015      	b.n	8005f0c <arm_rfft_256_fast_init_f32+0x40>

  Sint = &(S->Sint);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	60fb      	str	r3, [r7, #12]
  Sint->fftLen = 128U;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2280      	movs	r2, #128	@ 0x80
 8005ee8:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = 256U;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ef0:	821a      	strh	r2, [r3, #16]

  Sint->bitRevLength = ARMBITREVINDEXTABLE_128_TABLE_LENGTH;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	22d0      	movs	r2, #208	@ 0xd0
 8005ef6:	819a      	strh	r2, [r3, #12]
  Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable128;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4a07      	ldr	r2, [pc, #28]	@ (8005f18 <arm_rfft_256_fast_init_f32+0x4c>)
 8005efc:	609a      	str	r2, [r3, #8]
  Sint->pTwiddle     = (float32_t *) twiddleCoef_128;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4a06      	ldr	r2, [pc, #24]	@ (8005f1c <arm_rfft_256_fast_init_f32+0x50>)
 8005f02:	605a      	str	r2, [r3, #4]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a06      	ldr	r2, [pc, #24]	@ (8005f20 <arm_rfft_256_fast_init_f32+0x54>)
 8005f08:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	0801b3d8 	.word	0x0801b3d8
 8005f1c:	08013750 	.word	0x08013750
 8005f20:	0801e9b8 	.word	0x0801e9b8

08005f24 <arm_rfft_512_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_512_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]

  arm_cfft_instance_f32 * Sint;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d102      	bne.n	8005f38 <arm_rfft_512_fast_init_f32+0x14>
 8005f32:	f04f 33ff 	mov.w	r3, #4294967295
 8005f36:	e017      	b.n	8005f68 <arm_rfft_512_fast_init_f32+0x44>

  Sint = &(S->Sint);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	60fb      	str	r3, [r7, #12]
  Sint->fftLen = 256U;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f42:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = 512U;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f4a:	821a      	strh	r2, [r3, #16]

  Sint->bitRevLength = ARMBITREVINDEXTABLE_256_TABLE_LENGTH;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8005f52:	819a      	strh	r2, [r3, #12]
  Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable256;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	4a07      	ldr	r2, [pc, #28]	@ (8005f74 <arm_rfft_512_fast_init_f32+0x50>)
 8005f58:	609a      	str	r2, [r3, #8]
  Sint->pTwiddle     = (float32_t *) twiddleCoef_256;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4a06      	ldr	r2, [pc, #24]	@ (8005f78 <arm_rfft_512_fast_init_f32+0x54>)
 8005f5e:	605a      	str	r2, [r3, #4]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a06      	ldr	r2, [pc, #24]	@ (8005f7c <arm_rfft_512_fast_init_f32+0x58>)
 8005f64:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	0801b578 	.word	0x0801b578
 8005f78:	08013b50 	.word	0x08013b50
 8005f7c:	0801edb8 	.word	0x0801edb8

08005f80 <arm_rfft_1024_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_1024_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]

  arm_cfft_instance_f32 * Sint;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d102      	bne.n	8005f94 <arm_rfft_1024_fast_init_f32+0x14>
 8005f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f92:	e017      	b.n	8005fc4 <arm_rfft_1024_fast_init_f32+0x44>

  Sint = &(S->Sint);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	60fb      	str	r3, [r7, #12]
  Sint->fftLen = 512U;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f9e:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = 1024U;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005fa6:	821a      	strh	r2, [r3, #16]

  Sint->bitRevLength = ARMBITREVINDEXTABLE_512_TABLE_LENGTH;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 8005fae:	819a      	strh	r2, [r3, #12]
  Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable512;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4a07      	ldr	r2, [pc, #28]	@ (8005fd0 <arm_rfft_1024_fast_init_f32+0x50>)
 8005fb4:	609a      	str	r2, [r3, #8]
  Sint->pTwiddle     = (float32_t *) twiddleCoef_512;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	4a06      	ldr	r2, [pc, #24]	@ (8005fd4 <arm_rfft_1024_fast_init_f32+0x54>)
 8005fba:	605a      	str	r2, [r3, #4]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a06      	ldr	r2, [pc, #24]	@ (8005fd8 <arm_rfft_1024_fast_init_f32+0x58>)
 8005fc0:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	0801b8e8 	.word	0x0801b8e8
 8005fd4:	08014350 	.word	0x08014350
 8005fd8:	0801f5b8 	.word	0x0801f5b8

08005fdc <arm_rfft_2048_fast_init_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
arm_status arm_rfft_2048_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]

  arm_cfft_instance_f32 * Sint;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d102      	bne.n	8005ff0 <arm_rfft_2048_fast_init_f32+0x14>
 8005fea:	f04f 33ff 	mov.w	r3, #4294967295
 8005fee:	e017      	b.n	8006020 <arm_rfft_2048_fast_init_f32+0x44>

  Sint = &(S->Sint);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	60fb      	str	r3, [r7, #12]
  Sint->fftLen = 1024U;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005ffa:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = 2048U;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006002:	821a      	strh	r2, [r3, #16]

  Sint->bitRevLength = ARMBITREVINDEXTABLE_1024_TABLE_LENGTH;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 800600a:	819a      	strh	r2, [r3, #12]
  Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable1024;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4a07      	ldr	r2, [pc, #28]	@ (800602c <arm_rfft_2048_fast_init_f32+0x50>)
 8006010:	609a      	str	r2, [r3, #8]
  Sint->pTwiddle     = (float32_t *) twiddleCoef_1024;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	4a06      	ldr	r2, [pc, #24]	@ (8006030 <arm_rfft_2048_fast_init_f32+0x54>)
 8006016:	605a      	str	r2, [r3, #4]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a06      	ldr	r2, [pc, #24]	@ (8006034 <arm_rfft_2048_fast_init_f32+0x58>)
 800601c:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	0801bc68 	.word	0x0801bc68
 8006030:	08015350 	.word	0x08015350
 8006034:	080205b8 	.word	0x080205b8

08006038 <arm_rfft_4096_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_4096_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]

  arm_cfft_instance_f32 * Sint;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d102      	bne.n	800604c <arm_rfft_4096_fast_init_f32+0x14>
 8006046:	f04f 33ff 	mov.w	r3, #4294967295
 800604a:	e017      	b.n	800607c <arm_rfft_4096_fast_init_f32+0x44>

  Sint = &(S->Sint);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	60fb      	str	r3, [r7, #12]
  Sint->fftLen = 2048U;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006056:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = 4096U;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800605e:	821a      	strh	r2, [r3, #16]

  Sint->bitRevLength = ARMBITREVINDEXTABLE_2048_TABLE_LENGTH;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f44f 626e 	mov.w	r2, #3808	@ 0xee0
 8006066:	819a      	strh	r2, [r3, #12]
  Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable2048;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	4a07      	ldr	r2, [pc, #28]	@ (8006088 <arm_rfft_4096_fast_init_f32+0x50>)
 800606c:	609a      	str	r2, [r3, #8]
  Sint->pTwiddle     = (float32_t *) twiddleCoef_2048;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	4a06      	ldr	r2, [pc, #24]	@ (800608c <arm_rfft_4096_fast_init_f32+0x54>)
 8006072:	605a      	str	r2, [r3, #4]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a06      	ldr	r2, [pc, #24]	@ (8006090 <arm_rfft_4096_fast_init_f32+0x58>)
 8006078:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3714      	adds	r7, #20
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	0801ca78 	.word	0x0801ca78
 800608c:	08017350 	.word	0x08017350
 8006090:	080225b8 	.word	0x080225b8

08006094 <arm_rfft_fast_init_f32>:
 */

arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	460b      	mov	r3, r1
 800609e:	807b      	strh	r3, [r7, #2]
  typedef arm_status(*fft_init_ptr)( arm_rfft_fast_instance_f32 *);
  fft_init_ptr fptr = 0x0;
 80060a0:	2300      	movs	r3, #0
 80060a2:	60fb      	str	r3, [r7, #12]

  switch (fftLen)
 80060a4:	887b      	ldrh	r3, [r7, #2]
 80060a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060aa:	d01f      	beq.n	80060ec <arm_rfft_fast_init_f32+0x58>
 80060ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060b0:	dc31      	bgt.n	8006116 <arm_rfft_fast_init_f32+0x82>
 80060b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060b6:	d01c      	beq.n	80060f2 <arm_rfft_fast_init_f32+0x5e>
 80060b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060bc:	dc2b      	bgt.n	8006116 <arm_rfft_fast_init_f32+0x82>
 80060be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060c2:	d019      	beq.n	80060f8 <arm_rfft_fast_init_f32+0x64>
 80060c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060c8:	dc25      	bgt.n	8006116 <arm_rfft_fast_init_f32+0x82>
 80060ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060ce:	d016      	beq.n	80060fe <arm_rfft_fast_init_f32+0x6a>
 80060d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060d4:	dc1f      	bgt.n	8006116 <arm_rfft_fast_init_f32+0x82>
 80060d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060da:	d013      	beq.n	8006104 <arm_rfft_fast_init_f32+0x70>
 80060dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060e0:	dc19      	bgt.n	8006116 <arm_rfft_fast_init_f32+0x82>
 80060e2:	2b20      	cmp	r3, #32
 80060e4:	d014      	beq.n	8006110 <arm_rfft_fast_init_f32+0x7c>
 80060e6:	2b40      	cmp	r3, #64	@ 0x40
 80060e8:	d00f      	beq.n	800610a <arm_rfft_fast_init_f32+0x76>
 80060ea:	e014      	b.n	8006116 <arm_rfft_fast_init_f32+0x82>
  {
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048) && defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_4096))
  case 4096U:
    fptr = arm_rfft_4096_fast_init_f32;
 80060ec:	4b12      	ldr	r3, [pc, #72]	@ (8006138 <arm_rfft_fast_init_f32+0xa4>)
 80060ee:	60fb      	str	r3, [r7, #12]
    break;
 80060f0:	e014      	b.n	800611c <arm_rfft_fast_init_f32+0x88>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024) && defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_2048))
  case 2048U:
    fptr = arm_rfft_2048_fast_init_f32;
 80060f2:	4b12      	ldr	r3, [pc, #72]	@ (800613c <arm_rfft_fast_init_f32+0xa8>)
 80060f4:	60fb      	str	r3, [r7, #12]
    break;
 80060f6:	e011      	b.n	800611c <arm_rfft_fast_init_f32+0x88>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512) && defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_1024))
  case 1024U:
    fptr = arm_rfft_1024_fast_init_f32;
 80060f8:	4b11      	ldr	r3, [pc, #68]	@ (8006140 <arm_rfft_fast_init_f32+0xac>)
 80060fa:	60fb      	str	r3, [r7, #12]
    break;
 80060fc:	e00e      	b.n	800611c <arm_rfft_fast_init_f32+0x88>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256) && defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_512))
  case 512U:
    fptr = arm_rfft_512_fast_init_f32;
 80060fe:	4b11      	ldr	r3, [pc, #68]	@ (8006144 <arm_rfft_fast_init_f32+0xb0>)
 8006100:	60fb      	str	r3, [r7, #12]
    break;
 8006102:	e00b      	b.n	800611c <arm_rfft_fast_init_f32+0x88>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128) && defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_256))
  case 256U:
    fptr = arm_rfft_256_fast_init_f32;
 8006104:	4b10      	ldr	r3, [pc, #64]	@ (8006148 <arm_rfft_fast_init_f32+0xb4>)
 8006106:	60fb      	str	r3, [r7, #12]
    break;
 8006108:	e008      	b.n	800611c <arm_rfft_fast_init_f32+0x88>
    fptr = arm_rfft_128_fast_init_f32;
    break;
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32) && defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_64))
  case 64U:
    fptr = arm_rfft_64_fast_init_f32;
 800610a:	4b10      	ldr	r3, [pc, #64]	@ (800614c <arm_rfft_fast_init_f32+0xb8>)
 800610c:	60fb      	str	r3, [r7, #12]
    break;
 800610e:	e005      	b.n	800611c <arm_rfft_fast_init_f32+0x88>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16) && defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_32))
  case 32U:
    fptr = arm_rfft_32_fast_init_f32;
 8006110:	4b0f      	ldr	r3, [pc, #60]	@ (8006150 <arm_rfft_fast_init_f32+0xbc>)
 8006112:	60fb      	str	r3, [r7, #12]
    break;
 8006114:	e002      	b.n	800611c <arm_rfft_fast_init_f32+0x88>
#endif
  default:
    return ARM_MATH_ARGUMENT_ERROR;
 8006116:	f04f 33ff 	mov.w	r3, #4294967295
 800611a:	e009      	b.n	8006130 <arm_rfft_fast_init_f32+0x9c>
  }

  if( ! fptr ) return ARM_MATH_ARGUMENT_ERROR;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d102      	bne.n	8006128 <arm_rfft_fast_init_f32+0x94>
 8006122:	f04f 33ff 	mov.w	r3, #4294967295
 8006126:	e003      	b.n	8006130 <arm_rfft_fast_init_f32+0x9c>
  return fptr( S );
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	4798      	blx	r3
 800612e:	4603      	mov	r3, r0

}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	08006039 	.word	0x08006039
 800613c:	08005fdd 	.word	0x08005fdd
 8006140:	08005f81 	.word	0x08005f81
 8006144:	08005f25 	.word	0x08005f25
 8006148:	08005ecd 	.word	0x08005ecd
 800614c:	08005e75 	.word	0x08005e75
 8006150:	08005e1d 	.word	0x08005e1d

08006154 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8006154:	b480      	push	{r7}
 8006156:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8006158:	bf00      	nop
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
	...

08006164 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af04      	add	r7, sp, #16
 800616a:	4603      	mov	r3, r0
 800616c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800616e:	f04f 33ff 	mov.w	r3, #4294967295
 8006172:	9302      	str	r3, [sp, #8]
 8006174:	2301      	movs	r3, #1
 8006176:	9301      	str	r3, [sp, #4]
 8006178:	1dfb      	adds	r3, r7, #7
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	2301      	movs	r3, #1
 800617e:	2200      	movs	r2, #0
 8006180:	2178      	movs	r1, #120	@ 0x78
 8006182:	4803      	ldr	r0, [pc, #12]	@ (8006190 <ssd1306_WriteCommand+0x2c>)
 8006184:	f002 fa1a 	bl	80085bc <HAL_I2C_Mem_Write>
}
 8006188:	bf00      	nop
 800618a:	3708      	adds	r7, #8
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	200065f8 	.word	0x200065f8

08006194 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af04      	add	r7, sp, #16
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	f04f 32ff 	mov.w	r2, #4294967295
 80061a6:	9202      	str	r2, [sp, #8]
 80061a8:	9301      	str	r3, [sp, #4]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	2301      	movs	r3, #1
 80061b0:	2240      	movs	r2, #64	@ 0x40
 80061b2:	2178      	movs	r1, #120	@ 0x78
 80061b4:	4803      	ldr	r0, [pc, #12]	@ (80061c4 <ssd1306_WriteData+0x30>)
 80061b6:	f002 fa01 	bl	80085bc <HAL_I2C_Mem_Write>
}
 80061ba:	bf00      	nop
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	200065f8 	.word	0x200065f8

080061c8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80061cc:	f7ff ffc2 	bl	8006154 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80061d0:	2064      	movs	r0, #100	@ 0x64
 80061d2:	f7fa ff20 	bl	8001016 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80061d6:	2000      	movs	r0, #0
 80061d8:	f000 f9d8 	bl	800658c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80061dc:	2020      	movs	r0, #32
 80061de:	f7ff ffc1 	bl	8006164 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80061e2:	2000      	movs	r0, #0
 80061e4:	f7ff ffbe 	bl	8006164 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80061e8:	20b0      	movs	r0, #176	@ 0xb0
 80061ea:	f7ff ffbb 	bl	8006164 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 80061ee:	20c0      	movs	r0, #192	@ 0xc0
 80061f0:	f7ff ffb8 	bl	8006164 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80061f4:	2000      	movs	r0, #0
 80061f6:	f7ff ffb5 	bl	8006164 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80061fa:	2010      	movs	r0, #16
 80061fc:	f7ff ffb2 	bl	8006164 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8006200:	2040      	movs	r0, #64	@ 0x40
 8006202:	f7ff ffaf 	bl	8006164 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8006206:	20ff      	movs	r0, #255	@ 0xff
 8006208:	f000 f9ac 	bl	8006564 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 800620c:	20a0      	movs	r0, #160	@ 0xa0
 800620e:	f7ff ffa9 	bl	8006164 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8006212:	20a6      	movs	r0, #166	@ 0xa6
 8006214:	f7ff ffa6 	bl	8006164 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8006218:	20a8      	movs	r0, #168	@ 0xa8
 800621a:	f7ff ffa3 	bl	8006164 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 800621e:	201f      	movs	r0, #31
 8006220:	f7ff ffa0 	bl	8006164 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006224:	20a4      	movs	r0, #164	@ 0xa4
 8006226:	f7ff ff9d 	bl	8006164 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800622a:	20d3      	movs	r0, #211	@ 0xd3
 800622c:	f7ff ff9a 	bl	8006164 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8006230:	2000      	movs	r0, #0
 8006232:	f7ff ff97 	bl	8006164 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8006236:	20d5      	movs	r0, #213	@ 0xd5
 8006238:	f7ff ff94 	bl	8006164 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800623c:	20f0      	movs	r0, #240	@ 0xf0
 800623e:	f7ff ff91 	bl	8006164 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8006242:	20d9      	movs	r0, #217	@ 0xd9
 8006244:	f7ff ff8e 	bl	8006164 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8006248:	2022      	movs	r0, #34	@ 0x22
 800624a:	f7ff ff8b 	bl	8006164 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800624e:	20da      	movs	r0, #218	@ 0xda
 8006250:	f7ff ff88 	bl	8006164 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8006254:	2002      	movs	r0, #2
 8006256:	f7ff ff85 	bl	8006164 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800625a:	20db      	movs	r0, #219	@ 0xdb
 800625c:	f7ff ff82 	bl	8006164 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8006260:	2020      	movs	r0, #32
 8006262:	f7ff ff7f 	bl	8006164 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8006266:	208d      	movs	r0, #141	@ 0x8d
 8006268:	f7ff ff7c 	bl	8006164 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800626c:	2014      	movs	r0, #20
 800626e:	f7ff ff79 	bl	8006164 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8006272:	2001      	movs	r0, #1
 8006274:	f000 f98a 	bl	800658c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8006278:	2000      	movs	r0, #0
 800627a:	f000 f80f 	bl	800629c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800627e:	f000 f825 	bl	80062cc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8006282:	4b05      	ldr	r3, [pc, #20]	@ (8006298 <ssd1306_Init+0xd0>)
 8006284:	2200      	movs	r2, #0
 8006286:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8006288:	4b03      	ldr	r3, [pc, #12]	@ (8006298 <ssd1306_Init+0xd0>)
 800628a:	2200      	movs	r2, #0
 800628c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800628e:	4b02      	ldr	r3, [pc, #8]	@ (8006298 <ssd1306_Init+0xd0>)
 8006290:	2201      	movs	r2, #1
 8006292:	711a      	strb	r2, [r3, #4]
}
 8006294:	bf00      	nop
 8006296:	bd80      	pop	{r7, pc}
 8006298:	200069a0 	.word	0x200069a0

0800629c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	4603      	mov	r3, r0
 80062a4:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80062a6:	79fb      	ldrb	r3, [r7, #7]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d101      	bne.n	80062b0 <ssd1306_Fill+0x14>
 80062ac:	2300      	movs	r3, #0
 80062ae:	e000      	b.n	80062b2 <ssd1306_Fill+0x16>
 80062b0:	23ff      	movs	r3, #255	@ 0xff
 80062b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062b6:	4619      	mov	r1, r3
 80062b8:	4803      	ldr	r0, [pc, #12]	@ (80062c8 <ssd1306_Fill+0x2c>)
 80062ba:	f00a f86c 	bl	8010396 <memset>
}
 80062be:	bf00      	nop
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	200067a0 	.word	0x200067a0

080062cc <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80062d2:	2300      	movs	r3, #0
 80062d4:	71fb      	strb	r3, [r7, #7]
 80062d6:	e016      	b.n	8006306 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80062d8:	79fb      	ldrb	r3, [r7, #7]
 80062da:	3b50      	subs	r3, #80	@ 0x50
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	4618      	mov	r0, r3
 80062e0:	f7ff ff40 	bl	8006164 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80062e4:	2000      	movs	r0, #0
 80062e6:	f7ff ff3d 	bl	8006164 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80062ea:	2010      	movs	r0, #16
 80062ec:	f7ff ff3a 	bl	8006164 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80062f0:	79fb      	ldrb	r3, [r7, #7]
 80062f2:	01db      	lsls	r3, r3, #7
 80062f4:	4a08      	ldr	r2, [pc, #32]	@ (8006318 <ssd1306_UpdateScreen+0x4c>)
 80062f6:	4413      	add	r3, r2
 80062f8:	2180      	movs	r1, #128	@ 0x80
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7ff ff4a 	bl	8006194 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006300:	79fb      	ldrb	r3, [r7, #7]
 8006302:	3301      	adds	r3, #1
 8006304:	71fb      	strb	r3, [r7, #7]
 8006306:	79fb      	ldrb	r3, [r7, #7]
 8006308:	2b03      	cmp	r3, #3
 800630a:	d9e5      	bls.n	80062d8 <ssd1306_UpdateScreen+0xc>
    }
}
 800630c:	bf00      	nop
 800630e:	bf00      	nop
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	200067a0 	.word	0x200067a0

0800631c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	4603      	mov	r3, r0
 8006324:	71fb      	strb	r3, [r7, #7]
 8006326:	460b      	mov	r3, r1
 8006328:	71bb      	strb	r3, [r7, #6]
 800632a:	4613      	mov	r3, r2
 800632c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800632e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006332:	2b00      	cmp	r3, #0
 8006334:	db3d      	blt.n	80063b2 <ssd1306_DrawPixel+0x96>
 8006336:	79bb      	ldrb	r3, [r7, #6]
 8006338:	2b1f      	cmp	r3, #31
 800633a:	d83a      	bhi.n	80063b2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800633c:	797b      	ldrb	r3, [r7, #5]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d11a      	bne.n	8006378 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8006342:	79fa      	ldrb	r2, [r7, #7]
 8006344:	79bb      	ldrb	r3, [r7, #6]
 8006346:	08db      	lsrs	r3, r3, #3
 8006348:	b2d8      	uxtb	r0, r3
 800634a:	4603      	mov	r3, r0
 800634c:	01db      	lsls	r3, r3, #7
 800634e:	4413      	add	r3, r2
 8006350:	4a1b      	ldr	r2, [pc, #108]	@ (80063c0 <ssd1306_DrawPixel+0xa4>)
 8006352:	5cd3      	ldrb	r3, [r2, r3]
 8006354:	b25a      	sxtb	r2, r3
 8006356:	79bb      	ldrb	r3, [r7, #6]
 8006358:	f003 0307 	and.w	r3, r3, #7
 800635c:	2101      	movs	r1, #1
 800635e:	fa01 f303 	lsl.w	r3, r1, r3
 8006362:	b25b      	sxtb	r3, r3
 8006364:	4313      	orrs	r3, r2
 8006366:	b259      	sxtb	r1, r3
 8006368:	79fa      	ldrb	r2, [r7, #7]
 800636a:	4603      	mov	r3, r0
 800636c:	01db      	lsls	r3, r3, #7
 800636e:	4413      	add	r3, r2
 8006370:	b2c9      	uxtb	r1, r1
 8006372:	4a13      	ldr	r2, [pc, #76]	@ (80063c0 <ssd1306_DrawPixel+0xa4>)
 8006374:	54d1      	strb	r1, [r2, r3]
 8006376:	e01d      	b.n	80063b4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006378:	79fa      	ldrb	r2, [r7, #7]
 800637a:	79bb      	ldrb	r3, [r7, #6]
 800637c:	08db      	lsrs	r3, r3, #3
 800637e:	b2d8      	uxtb	r0, r3
 8006380:	4603      	mov	r3, r0
 8006382:	01db      	lsls	r3, r3, #7
 8006384:	4413      	add	r3, r2
 8006386:	4a0e      	ldr	r2, [pc, #56]	@ (80063c0 <ssd1306_DrawPixel+0xa4>)
 8006388:	5cd3      	ldrb	r3, [r2, r3]
 800638a:	b25a      	sxtb	r2, r3
 800638c:	79bb      	ldrb	r3, [r7, #6]
 800638e:	f003 0307 	and.w	r3, r3, #7
 8006392:	2101      	movs	r1, #1
 8006394:	fa01 f303 	lsl.w	r3, r1, r3
 8006398:	b25b      	sxtb	r3, r3
 800639a:	43db      	mvns	r3, r3
 800639c:	b25b      	sxtb	r3, r3
 800639e:	4013      	ands	r3, r2
 80063a0:	b259      	sxtb	r1, r3
 80063a2:	79fa      	ldrb	r2, [r7, #7]
 80063a4:	4603      	mov	r3, r0
 80063a6:	01db      	lsls	r3, r3, #7
 80063a8:	4413      	add	r3, r2
 80063aa:	b2c9      	uxtb	r1, r1
 80063ac:	4a04      	ldr	r2, [pc, #16]	@ (80063c0 <ssd1306_DrawPixel+0xa4>)
 80063ae:	54d1      	strb	r1, [r2, r3]
 80063b0:	e000      	b.n	80063b4 <ssd1306_DrawPixel+0x98>
        return;
 80063b2:	bf00      	nop
    }
}
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	200067a0 	.word	0x200067a0

080063c4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80063c4:	b590      	push	{r4, r7, lr}
 80063c6:	b089      	sub	sp, #36	@ 0x24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	4604      	mov	r4, r0
 80063cc:	4638      	mov	r0, r7
 80063ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80063d2:	4623      	mov	r3, r4
 80063d4:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80063d6:	7bfb      	ldrb	r3, [r7, #15]
 80063d8:	2b1f      	cmp	r3, #31
 80063da:	d902      	bls.n	80063e2 <ssd1306_WriteChar+0x1e>
 80063dc:	7bfb      	ldrb	r3, [r7, #15]
 80063de:	2b7e      	cmp	r3, #126	@ 0x7e
 80063e0:	d901      	bls.n	80063e6 <ssd1306_WriteChar+0x22>
        return 0;
 80063e2:	2300      	movs	r3, #0
 80063e4:	e079      	b.n	80064da <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d005      	beq.n	80063f8 <ssd1306_WriteChar+0x34>
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
 80063f0:	3b20      	subs	r3, #32
 80063f2:	4413      	add	r3, r2
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	e000      	b.n	80063fa <ssd1306_WriteChar+0x36>
 80063f8:	783b      	ldrb	r3, [r7, #0]
 80063fa:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80063fc:	4b39      	ldr	r3, [pc, #228]	@ (80064e4 <ssd1306_WriteChar+0x120>)
 80063fe:	881b      	ldrh	r3, [r3, #0]
 8006400:	461a      	mov	r2, r3
 8006402:	7dfb      	ldrb	r3, [r7, #23]
 8006404:	4413      	add	r3, r2
 8006406:	2b80      	cmp	r3, #128	@ 0x80
 8006408:	dc06      	bgt.n	8006418 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800640a:	4b36      	ldr	r3, [pc, #216]	@ (80064e4 <ssd1306_WriteChar+0x120>)
 800640c:	885b      	ldrh	r3, [r3, #2]
 800640e:	461a      	mov	r2, r3
 8006410:	787b      	ldrb	r3, [r7, #1]
 8006412:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8006414:	2b20      	cmp	r3, #32
 8006416:	dd01      	ble.n	800641c <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8006418:	2300      	movs	r3, #0
 800641a:	e05e      	b.n	80064da <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800641c:	2300      	movs	r3, #0
 800641e:	61fb      	str	r3, [r7, #28]
 8006420:	e04d      	b.n	80064be <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	7bfb      	ldrb	r3, [r7, #15]
 8006426:	3b20      	subs	r3, #32
 8006428:	7879      	ldrb	r1, [r7, #1]
 800642a:	fb01 f303 	mul.w	r3, r1, r3
 800642e:	4619      	mov	r1, r3
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	440b      	add	r3, r1
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	4413      	add	r3, r2
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 800643c:	2300      	movs	r3, #0
 800643e:	61bb      	str	r3, [r7, #24]
 8006440:	e036      	b.n	80064b0 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	fa02 f303 	lsl.w	r3, r2, r3
 800644a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d013      	beq.n	800647a <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8006452:	4b24      	ldr	r3, [pc, #144]	@ (80064e4 <ssd1306_WriteChar+0x120>)
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	b2da      	uxtb	r2, r3
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	b2db      	uxtb	r3, r3
 800645c:	4413      	add	r3, r2
 800645e:	b2d8      	uxtb	r0, r3
 8006460:	4b20      	ldr	r3, [pc, #128]	@ (80064e4 <ssd1306_WriteChar+0x120>)
 8006462:	885b      	ldrh	r3, [r3, #2]
 8006464:	b2da      	uxtb	r2, r3
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	b2db      	uxtb	r3, r3
 800646a:	4413      	add	r3, r2
 800646c:	b2db      	uxtb	r3, r3
 800646e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8006472:	4619      	mov	r1, r3
 8006474:	f7ff ff52 	bl	800631c <ssd1306_DrawPixel>
 8006478:	e017      	b.n	80064aa <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800647a:	4b1a      	ldr	r3, [pc, #104]	@ (80064e4 <ssd1306_WriteChar+0x120>)
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	b2da      	uxtb	r2, r3
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	b2db      	uxtb	r3, r3
 8006484:	4413      	add	r3, r2
 8006486:	b2d8      	uxtb	r0, r3
 8006488:	4b16      	ldr	r3, [pc, #88]	@ (80064e4 <ssd1306_WriteChar+0x120>)
 800648a:	885b      	ldrh	r3, [r3, #2]
 800648c:	b2da      	uxtb	r2, r3
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	b2db      	uxtb	r3, r3
 8006492:	4413      	add	r3, r2
 8006494:	b2d9      	uxtb	r1, r3
 8006496:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800649a:	2b00      	cmp	r3, #0
 800649c:	bf0c      	ite	eq
 800649e:	2301      	moveq	r3, #1
 80064a0:	2300      	movne	r3, #0
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	461a      	mov	r2, r3
 80064a6:	f7ff ff39 	bl	800631c <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	3301      	adds	r3, #1
 80064ae:	61bb      	str	r3, [r7, #24]
 80064b0:	7dfb      	ldrb	r3, [r7, #23]
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d3c4      	bcc.n	8006442 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	3301      	adds	r3, #1
 80064bc:	61fb      	str	r3, [r7, #28]
 80064be:	787b      	ldrb	r3, [r7, #1]
 80064c0:	461a      	mov	r2, r3
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d3ac      	bcc.n	8006422 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 80064c8:	4b06      	ldr	r3, [pc, #24]	@ (80064e4 <ssd1306_WriteChar+0x120>)
 80064ca:	881a      	ldrh	r2, [r3, #0]
 80064cc:	7dfb      	ldrb	r3, [r7, #23]
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	4413      	add	r3, r2
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	4b03      	ldr	r3, [pc, #12]	@ (80064e4 <ssd1306_WriteChar+0x120>)
 80064d6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80064d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3724      	adds	r7, #36	@ 0x24
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd90      	pop	{r4, r7, pc}
 80064e2:	bf00      	nop
 80064e4:	200069a0 	.word	0x200069a0

080064e8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af02      	add	r7, sp, #8
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	4638      	mov	r0, r7
 80064f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80064f6:	e013      	b.n	8006520 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	7818      	ldrb	r0, [r3, #0]
 80064fc:	7e3b      	ldrb	r3, [r7, #24]
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	463b      	mov	r3, r7
 8006502:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006504:	f7ff ff5e 	bl	80063c4 <ssd1306_WriteChar>
 8006508:	4603      	mov	r3, r0
 800650a:	461a      	mov	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	429a      	cmp	r2, r3
 8006512:	d002      	beq.n	800651a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	e008      	b.n	800652c <ssd1306_WriteString+0x44>
        }
        str++;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	3301      	adds	r3, #1
 800651e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1e7      	bne.n	80064f8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	781b      	ldrb	r3, [r3, #0]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	4603      	mov	r3, r0
 800653c:	460a      	mov	r2, r1
 800653e:	71fb      	strb	r3, [r7, #7]
 8006540:	4613      	mov	r3, r2
 8006542:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8006544:	79fb      	ldrb	r3, [r7, #7]
 8006546:	b29a      	uxth	r2, r3
 8006548:	4b05      	ldr	r3, [pc, #20]	@ (8006560 <ssd1306_SetCursor+0x2c>)
 800654a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800654c:	79bb      	ldrb	r3, [r7, #6]
 800654e:	b29a      	uxth	r2, r3
 8006550:	4b03      	ldr	r3, [pc, #12]	@ (8006560 <ssd1306_SetCursor+0x2c>)
 8006552:	805a      	strh	r2, [r3, #2]
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	200069a0 	.word	0x200069a0

08006564 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	4603      	mov	r3, r0
 800656c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800656e:	2381      	movs	r3, #129	@ 0x81
 8006570:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8006572:	7bfb      	ldrb	r3, [r7, #15]
 8006574:	4618      	mov	r0, r3
 8006576:	f7ff fdf5 	bl	8006164 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800657a:	79fb      	ldrb	r3, [r7, #7]
 800657c:	4618      	mov	r0, r3
 800657e:	f7ff fdf1 	bl	8006164 <ssd1306_WriteCommand>
}
 8006582:	bf00      	nop
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
	...

0800658c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	4603      	mov	r3, r0
 8006594:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8006596:	79fb      	ldrb	r3, [r7, #7]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d005      	beq.n	80065a8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800659c:	23af      	movs	r3, #175	@ 0xaf
 800659e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80065a0:	4b08      	ldr	r3, [pc, #32]	@ (80065c4 <ssd1306_SetDisplayOn+0x38>)
 80065a2:	2201      	movs	r2, #1
 80065a4:	715a      	strb	r2, [r3, #5]
 80065a6:	e004      	b.n	80065b2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80065a8:	23ae      	movs	r3, #174	@ 0xae
 80065aa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80065ac:	4b05      	ldr	r3, [pc, #20]	@ (80065c4 <ssd1306_SetDisplayOn+0x38>)
 80065ae:	2200      	movs	r2, #0
 80065b0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80065b2:	7bfb      	ldrb	r3, [r7, #15]
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7ff fdd5 	bl	8006164 <ssd1306_WriteCommand>
}
 80065ba:	bf00      	nop
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	200069a0 	.word	0x200069a0

080065c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80065ce:	2300      	movs	r3, #0
 80065d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80065d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006604 <HAL_Init+0x3c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a0b      	ldr	r2, [pc, #44]	@ (8006604 <HAL_Init+0x3c>)
 80065d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80065de:	2003      	movs	r0, #3
 80065e0:	f001 faeb 	bl	8007bba <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80065e4:	200f      	movs	r0, #15
 80065e6:	f7fc fe7b 	bl	80032e0 <HAL_InitTick>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	71fb      	strb	r3, [r7, #7]
 80065f4:	e001      	b.n	80065fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80065f6:	f7fc fcde 	bl	8002fb6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80065fa:	79fb      	ldrb	r3, [r7, #7]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	58004000 	.word	0x58004000

08006608 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006608:	b480      	push	{r7}
 800660a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800660c:	4b06      	ldr	r3, [pc, #24]	@ (8006628 <HAL_IncTick+0x20>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	461a      	mov	r2, r3
 8006612:	4b06      	ldr	r3, [pc, #24]	@ (800662c <HAL_IncTick+0x24>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4413      	add	r3, r2
 8006618:	4a04      	ldr	r2, [pc, #16]	@ (800662c <HAL_IncTick+0x24>)
 800661a:	6013      	str	r3, [r2, #0]
}
 800661c:	bf00      	nop
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	20000208 	.word	0x20000208
 800662c:	200069a8 	.word	0x200069a8

08006630 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006630:	b480      	push	{r7}
 8006632:	af00      	add	r7, sp, #0
  return uwTick;
 8006634:	4b03      	ldr	r3, [pc, #12]	@ (8006644 <HAL_GetTick+0x14>)
 8006636:	681b      	ldr	r3, [r3, #0]
}
 8006638:	4618      	mov	r0, r3
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	200069a8 	.word	0x200069a8

08006648 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8006648:	b480      	push	{r7}
 800664a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800664c:	4b03      	ldr	r3, [pc, #12]	@ (800665c <HAL_GetTickPrio+0x14>)
 800664e:	681b      	ldr	r3, [r3, #0]
}
 8006650:	4618      	mov	r0, r3
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	20000204 	.word	0x20000204

08006660 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8006664:	4b03      	ldr	r3, [pc, #12]	@ (8006674 <HAL_GetTickFreq+0x14>)
 8006666:	781b      	ldrb	r3, [r3, #0]
}
 8006668:	4618      	mov	r0, r3
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	20000208 	.word	0x20000208

08006678 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	431a      	orrs	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8006692:	bf00      	nop
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800669e:	b480      	push	{r7}
 80066a0:	b083      	sub	sp, #12
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	431a      	orrs	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	609a      	str	r2, [r3, #8]
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
 80066ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	3360      	adds	r3, #96	@ 0x60
 80066f2:	461a      	mov	r2, r3
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	4b08      	ldr	r3, [pc, #32]	@ (8006724 <LL_ADC_SetOffset+0x44>)
 8006702:	4013      	ands	r3, r2
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	430a      	orrs	r2, r1
 800670e:	4313      	orrs	r3, r2
 8006710:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006718:	bf00      	nop
 800671a:	371c      	adds	r7, #28
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr
 8006724:	03fff000 	.word	0x03fff000

08006728 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	3360      	adds	r3, #96	@ 0x60
 8006736:	461a      	mov	r2, r3
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8006748:	4618      	mov	r0, r3
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006754:	b480      	push	{r7}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	3360      	adds	r3, #96	@ 0x60
 8006764:	461a      	mov	r2, r3
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4413      	add	r3, r2
 800676c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	431a      	orrs	r2, r3
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800677e:	bf00      	nop
 8006780:	371c      	adds	r7, #28
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800679e:	2301      	movs	r3, #1
 80067a0:	e000      	b.n	80067a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80067a2:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	3330      	adds	r3, #48	@ 0x30
 80067c0:	461a      	mov	r2, r3
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	0a1b      	lsrs	r3, r3, #8
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	f003 030c 	and.w	r3, r3, #12
 80067cc:	4413      	add	r3, r2
 80067ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f003 031f 	and.w	r3, r3, #31
 80067da:	211f      	movs	r1, #31
 80067dc:	fa01 f303 	lsl.w	r3, r1, r3
 80067e0:	43db      	mvns	r3, r3
 80067e2:	401a      	ands	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	0e9b      	lsrs	r3, r3, #26
 80067e8:	f003 011f 	and.w	r1, r3, #31
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f003 031f 	and.w	r3, r3, #31
 80067f2:	fa01 f303 	lsl.w	r3, r1, r3
 80067f6:	431a      	orrs	r2, r3
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80067fc:	bf00      	nop
 80067fe:	371c      	adds	r7, #28
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	3314      	adds	r3, #20
 8006818:	461a      	mov	r2, r3
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	0e5b      	lsrs	r3, r3, #25
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	f003 0304 	and.w	r3, r3, #4
 8006824:	4413      	add	r3, r2
 8006826:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	0d1b      	lsrs	r3, r3, #20
 8006830:	f003 031f 	and.w	r3, r3, #31
 8006834:	2107      	movs	r1, #7
 8006836:	fa01 f303 	lsl.w	r3, r1, r3
 800683a:	43db      	mvns	r3, r3
 800683c:	401a      	ands	r2, r3
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	0d1b      	lsrs	r3, r3, #20
 8006842:	f003 031f 	and.w	r3, r3, #31
 8006846:	6879      	ldr	r1, [r7, #4]
 8006848:	fa01 f303 	lsl.w	r3, r1, r3
 800684c:	431a      	orrs	r2, r3
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8006852:	bf00      	nop
 8006854:	371c      	adds	r7, #28
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
	...

08006860 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006878:	43db      	mvns	r3, r3
 800687a:	401a      	ands	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f003 0318 	and.w	r3, r3, #24
 8006882:	4908      	ldr	r1, [pc, #32]	@ (80068a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006884:	40d9      	lsrs	r1, r3
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	400b      	ands	r3, r1
 800688a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800688e:	431a      	orrs	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006896:	bf00      	nop
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	0007ffff 	.word	0x0007ffff

080068a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80068b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	6093      	str	r3, [r2, #8]
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068e0:	d101      	bne.n	80068e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80068e2:	2301      	movs	r3, #1
 80068e4:	e000      	b.n	80068e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8006904:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006908:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800692c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006930:	d101      	bne.n	8006936 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006932:	2301      	movs	r3, #1
 8006934:	e000      	b.n	8006938 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006954:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006958:	f043 0201 	orr.w	r2, r3, #1
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800697c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006980:	f043 0202 	orr.w	r2, r3, #2
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d101      	bne.n	80069ac <LL_ADC_IsEnabled+0x18>
 80069a8:	2301      	movs	r3, #1
 80069aa:	e000      	b.n	80069ae <LL_ADC_IsEnabled+0x1a>
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80069ba:	b480      	push	{r7}
 80069bc:	b083      	sub	sp, #12
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f003 0302 	and.w	r3, r3, #2
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d101      	bne.n	80069d2 <LL_ADC_IsDisableOngoing+0x18>
 80069ce:	2301      	movs	r3, #1
 80069d0:	e000      	b.n	80069d4 <LL_ADC_IsDisableOngoing+0x1a>
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80069f4:	f043 0204 	orr.w	r2, r3, #4
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f003 0304 	and.w	r3, r3, #4
 8006a18:	2b04      	cmp	r3, #4
 8006a1a:	d101      	bne.n	8006a20 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e000      	b.n	8006a22 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b083      	sub	sp, #12
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f003 0308 	and.w	r3, r3, #8
 8006a3e:	2b08      	cmp	r3, #8
 8006a40:	d101      	bne.n	8006a46 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006a42:	2301      	movs	r3, #1
 8006a44:	e000      	b.n	8006a48 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b088      	sub	sp, #32
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8006a60:	2300      	movs	r3, #0
 8006a62:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006a64:	2300      	movs	r3, #0
 8006a66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e12e      	b.n	8006cd0 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d109      	bne.n	8006a94 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7fc faa9 	bl	8002fd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7ff ff17 	bl	80068cc <LL_ADC_IsDeepPowerDownEnabled>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d004      	beq.n	8006aae <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7ff fefd 	bl	80068a8 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7ff ff32 	bl	800691c <LL_ADC_IsInternalRegulatorEnabled>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d115      	bne.n	8006aea <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7ff ff16 	bl	80068f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006ac8:	4b83      	ldr	r3, [pc, #524]	@ (8006cd8 <HAL_ADC_Init+0x284>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	099b      	lsrs	r3, r3, #6
 8006ace:	4a83      	ldr	r2, [pc, #524]	@ (8006cdc <HAL_ADC_Init+0x288>)
 8006ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad4:	099b      	lsrs	r3, r3, #6
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	005b      	lsls	r3, r3, #1
 8006ada:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006adc:	e002      	b.n	8006ae4 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1f9      	bne.n	8006ade <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7ff ff14 	bl	800691c <LL_ADC_IsInternalRegulatorEnabled>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10d      	bne.n	8006b16 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006afe:	f043 0210 	orr.w	r2, r3, #16
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b0a:	f043 0201 	orr.w	r2, r3, #1
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7ff ff74 	bl	8006a08 <LL_ADC_REG_IsConversionOngoing>
 8006b20:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b26:	f003 0310 	and.w	r3, r3, #16
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f040 80c7 	bne.w	8006cbe <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f040 80c3 	bne.w	8006cbe <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b3c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8006b40:	f043 0202 	orr.w	r2, r3, #2
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7ff ff21 	bl	8006994 <LL_ADC_IsEnabled>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10b      	bne.n	8006b70 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006b58:	4861      	ldr	r0, [pc, #388]	@ (8006ce0 <HAL_ADC_Init+0x28c>)
 8006b5a:	f7ff ff1b 	bl	8006994 <LL_ADC_IsEnabled>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d105      	bne.n	8006b70 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	485e      	ldr	r0, [pc, #376]	@ (8006ce4 <HAL_ADC_Init+0x290>)
 8006b6c:	f7ff fd84 	bl	8006678 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	7e5b      	ldrb	r3, [r3, #25]
 8006b74:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006b7a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006b80:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006b86:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b8e:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8006b90:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006b92:	69ba      	ldr	r2, [r7, #24]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d106      	bne.n	8006bb0 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	045b      	lsls	r3, r3, #17
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d009      	beq.n	8006bcc <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bbc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68da      	ldr	r2, [r3, #12]
 8006bd2:	4b45      	ldr	r3, [pc, #276]	@ (8006ce8 <HAL_ADC_Init+0x294>)
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	6812      	ldr	r2, [r2, #0]
 8006bda:	69b9      	ldr	r1, [r7, #24]
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7ff ff0f 	bl	8006a08 <LL_ADC_REG_IsConversionOngoing>
 8006bea:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7ff ff1c 	bl	8006a2e <LL_ADC_INJ_IsConversionOngoing>
 8006bf6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d13d      	bne.n	8006c7a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d13a      	bne.n	8006c7a <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006c08:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006c10:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006c12:	4313      	orrs	r3, r2
 8006c14:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c20:	f023 0302 	bic.w	r3, r3, #2
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	6812      	ldr	r2, [r2, #0]
 8006c28:	69b9      	ldr	r1, [r7, #24]
 8006c2a:	430b      	orrs	r3, r1
 8006c2c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d118      	bne.n	8006c6a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006c42:	f023 0304 	bic.w	r3, r3, #4
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006c4e:	4311      	orrs	r1, r2
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006c54:	4311      	orrs	r1, r2
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f042 0201 	orr.w	r2, r2, #1
 8006c66:	611a      	str	r2, [r3, #16]
 8006c68:	e007      	b.n	8006c7a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	691a      	ldr	r2, [r3, #16]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f022 0201 	bic.w	r2, r2, #1
 8006c78:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d10c      	bne.n	8006c9c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c88:	f023 010f 	bic.w	r1, r3, #15
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	1e5a      	subs	r2, r3, #1
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c9a:	e007      	b.n	8006cac <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f022 020f 	bic.w	r2, r2, #15
 8006caa:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cb0:	f023 0303 	bic.w	r3, r3, #3
 8006cb4:	f043 0201 	orr.w	r2, r3, #1
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	655a      	str	r2, [r3, #84]	@ 0x54
 8006cbc:	e007      	b.n	8006cce <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cc2:	f043 0210 	orr.w	r2, r3, #16
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006cce:	7ffb      	ldrb	r3, [r7, #31]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3720      	adds	r7, #32
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	20000200 	.word	0x20000200
 8006cdc:	053e2d63 	.word	0x053e2d63
 8006ce0:	50040000 	.word	0x50040000
 8006ce4:	50040300 	.word	0x50040300
 8006ce8:	fff0c007 	.word	0xfff0c007

08006cec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b086      	sub	sp, #24
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7ff fe83 	bl	8006a08 <LL_ADC_REG_IsConversionOngoing>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d167      	bne.n	8006dd8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d101      	bne.n	8006d16 <HAL_ADC_Start_DMA+0x2a>
 8006d12:	2302      	movs	r3, #2
 8006d14:	e063      	b.n	8006dde <HAL_ADC_Start_DMA+0xf2>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	f000 fc42 	bl	80075a8 <ADC_Enable>
 8006d24:	4603      	mov	r3, r0
 8006d26:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006d28:	7dfb      	ldrb	r3, [r7, #23]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d14f      	bne.n	8006dce <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d32:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006d36:	f023 0301 	bic.w	r3, r3, #1
 8006d3a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d006      	beq.n	8006d5c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d52:	f023 0206 	bic.w	r2, r3, #6
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	659a      	str	r2, [r3, #88]	@ 0x58
 8006d5a:	e002      	b.n	8006d62 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d66:	4a20      	ldr	r2, [pc, #128]	@ (8006de8 <HAL_ADC_Start_DMA+0xfc>)
 8006d68:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d6e:	4a1f      	ldr	r2, [pc, #124]	@ (8006dec <HAL_ADC_Start_DMA+0x100>)
 8006d70:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d76:	4a1e      	ldr	r2, [pc, #120]	@ (8006df0 <HAL_ADC_Start_DMA+0x104>)
 8006d78:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	221c      	movs	r2, #28
 8006d80:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f042 0210 	orr.w	r2, r2, #16
 8006d98:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68da      	ldr	r2, [r3, #12]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f042 0201 	orr.w	r2, r2, #1
 8006da8:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	3340      	adds	r3, #64	@ 0x40
 8006db4:	4619      	mov	r1, r3
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f001 f803 	bl	8007dc4 <HAL_DMA_Start_IT>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7ff fe0a 	bl	80069e0 <LL_ADC_REG_StartConversion>
 8006dcc:	e006      	b.n	8006ddc <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006dd6:	e001      	b.n	8006ddc <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006dd8:	2302      	movs	r3, #2
 8006dda:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3718      	adds	r7, #24
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	0800775b 	.word	0x0800775b
 8006dec:	08007833 	.word	0x08007833
 8006df0:	0800784f 	.word	0x0800784f

08006df4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b0b6      	sub	sp, #216	@ 0xd8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d101      	bne.n	8006e3e <HAL_ADC_ConfigChannel+0x22>
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	e39f      	b.n	800757e <HAL_ADC_ConfigChannel+0x762>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7ff fddc 	bl	8006a08 <LL_ADC_REG_IsConversionOngoing>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f040 8384 	bne.w	8007560 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6818      	ldr	r0, [r3, #0]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	6859      	ldr	r1, [r3, #4]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	461a      	mov	r2, r3
 8006e66:	f7ff fca3 	bl	80067b0 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7ff fdca 	bl	8006a08 <LL_ADC_REG_IsConversionOngoing>
 8006e74:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7ff fdd6 	bl	8006a2e <LL_ADC_INJ_IsConversionOngoing>
 8006e82:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006e86:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f040 81a6 	bne.w	80071dc <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006e90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f040 81a1 	bne.w	80071dc <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6818      	ldr	r0, [r3, #0]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	6819      	ldr	r1, [r3, #0]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	f7ff fcae 	bl	8006808 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	695a      	ldr	r2, [r3, #20]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	08db      	lsrs	r3, r3, #3
 8006eb8:	f003 0303 	and.w	r3, r3, #3
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d00a      	beq.n	8006ee4 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6818      	ldr	r0, [r3, #0]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	6919      	ldr	r1, [r3, #16]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ede:	f7ff fbff 	bl	80066e0 <LL_ADC_SetOffset>
 8006ee2:	e17b      	b.n	80071dc <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2100      	movs	r1, #0
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7ff fc1c 	bl	8006728 <LL_ADC_GetOffsetChannel>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10a      	bne.n	8006f10 <HAL_ADC_ConfigChannel+0xf4>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2100      	movs	r1, #0
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7ff fc11 	bl	8006728 <LL_ADC_GetOffsetChannel>
 8006f06:	4603      	mov	r3, r0
 8006f08:	0e9b      	lsrs	r3, r3, #26
 8006f0a:	f003 021f 	and.w	r2, r3, #31
 8006f0e:	e01e      	b.n	8006f4e <HAL_ADC_ConfigChannel+0x132>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2100      	movs	r1, #0
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7ff fc06 	bl	8006728 <LL_ADC_GetOffsetChannel>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006f26:	fa93 f3a3 	rbit	r3, r3
 8006f2a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 8006f2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006f32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  if (value == 0U)
 8006f36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8006f3e:	2320      	movs	r3, #32
 8006f40:	e004      	b.n	8006f4c <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8006f42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f46:	fab3 f383 	clz	r3, r3
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d105      	bne.n	8006f66 <HAL_ADC_ConfigChannel+0x14a>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	0e9b      	lsrs	r3, r3, #26
 8006f60:	f003 031f 	and.w	r3, r3, #31
 8006f64:	e018      	b.n	8006f98 <HAL_ADC_ConfigChannel+0x17c>
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006f72:	fa93 f3a3 	rbit	r3, r3
 8006f76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8006f7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8006f82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8006f8a:	2320      	movs	r3, #32
 8006f8c:	e004      	b.n	8006f98 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8006f8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006f92:	fab3 f383 	clz	r3, r3
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d106      	bne.n	8006faa <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7ff fbd5 	bl	8006754 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2101      	movs	r1, #1
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7ff fbb9 	bl	8006728 <LL_ADC_GetOffsetChannel>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10a      	bne.n	8006fd6 <HAL_ADC_ConfigChannel+0x1ba>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7ff fbae 	bl	8006728 <LL_ADC_GetOffsetChannel>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	0e9b      	lsrs	r3, r3, #26
 8006fd0:	f003 021f 	and.w	r2, r3, #31
 8006fd4:	e01e      	b.n	8007014 <HAL_ADC_ConfigChannel+0x1f8>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2101      	movs	r1, #1
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7ff fba3 	bl	8006728 <LL_ADC_GetOffsetChannel>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fe8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006fec:	fa93 f3a3 	rbit	r3, r3
 8006ff0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8006ff4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ff8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8006ffc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007000:	2b00      	cmp	r3, #0
 8007002:	d101      	bne.n	8007008 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8007004:	2320      	movs	r3, #32
 8007006:	e004      	b.n	8007012 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8007008:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800700c:	fab3 f383 	clz	r3, r3
 8007010:	b2db      	uxtb	r3, r3
 8007012:	461a      	mov	r2, r3
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800701c:	2b00      	cmp	r3, #0
 800701e:	d105      	bne.n	800702c <HAL_ADC_ConfigChannel+0x210>
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	0e9b      	lsrs	r3, r3, #26
 8007026:	f003 031f 	and.w	r3, r3, #31
 800702a:	e018      	b.n	800705e <HAL_ADC_ConfigChannel+0x242>
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007034:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007038:	fa93 f3a3 	rbit	r3, r3
 800703c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8007040:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007044:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8007048:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8007050:	2320      	movs	r3, #32
 8007052:	e004      	b.n	800705e <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8007054:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007058:	fab3 f383 	clz	r3, r3
 800705c:	b2db      	uxtb	r3, r3
 800705e:	429a      	cmp	r2, r3
 8007060:	d106      	bne.n	8007070 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2200      	movs	r2, #0
 8007068:	2101      	movs	r1, #1
 800706a:	4618      	mov	r0, r3
 800706c:	f7ff fb72 	bl	8006754 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2102      	movs	r1, #2
 8007076:	4618      	mov	r0, r3
 8007078:	f7ff fb56 	bl	8006728 <LL_ADC_GetOffsetChannel>
 800707c:	4603      	mov	r3, r0
 800707e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10a      	bne.n	800709c <HAL_ADC_ConfigChannel+0x280>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2102      	movs	r1, #2
 800708c:	4618      	mov	r0, r3
 800708e:	f7ff fb4b 	bl	8006728 <LL_ADC_GetOffsetChannel>
 8007092:	4603      	mov	r3, r0
 8007094:	0e9b      	lsrs	r3, r3, #26
 8007096:	f003 021f 	and.w	r2, r3, #31
 800709a:	e01e      	b.n	80070da <HAL_ADC_ConfigChannel+0x2be>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2102      	movs	r1, #2
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7ff fb40 	bl	8006728 <LL_ADC_GetOffsetChannel>
 80070a8:	4603      	mov	r3, r0
 80070aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070b2:	fa93 f3a3 	rbit	r3, r3
 80070b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80070ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80070be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80070c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80070ca:	2320      	movs	r3, #32
 80070cc:	e004      	b.n	80070d8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80070ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80070d2:	fab3 f383 	clz	r3, r3
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	461a      	mov	r2, r3
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d105      	bne.n	80070f2 <HAL_ADC_ConfigChannel+0x2d6>
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	0e9b      	lsrs	r3, r3, #26
 80070ec:	f003 031f 	and.w	r3, r3, #31
 80070f0:	e016      	b.n	8007120 <HAL_ADC_ConfigChannel+0x304>
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80070fe:	fa93 f3a3 	rbit	r3, r3
 8007102:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8007104:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007106:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800710a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8007112:	2320      	movs	r3, #32
 8007114:	e004      	b.n	8007120 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8007116:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800711a:	fab3 f383 	clz	r3, r3
 800711e:	b2db      	uxtb	r3, r3
 8007120:	429a      	cmp	r2, r3
 8007122:	d106      	bne.n	8007132 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2200      	movs	r2, #0
 800712a:	2102      	movs	r1, #2
 800712c:	4618      	mov	r0, r3
 800712e:	f7ff fb11 	bl	8006754 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2103      	movs	r1, #3
 8007138:	4618      	mov	r0, r3
 800713a:	f7ff faf5 	bl	8006728 <LL_ADC_GetOffsetChannel>
 800713e:	4603      	mov	r3, r0
 8007140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10a      	bne.n	800715e <HAL_ADC_ConfigChannel+0x342>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2103      	movs	r1, #3
 800714e:	4618      	mov	r0, r3
 8007150:	f7ff faea 	bl	8006728 <LL_ADC_GetOffsetChannel>
 8007154:	4603      	mov	r3, r0
 8007156:	0e9b      	lsrs	r3, r3, #26
 8007158:	f003 021f 	and.w	r2, r3, #31
 800715c:	e017      	b.n	800718e <HAL_ADC_ConfigChannel+0x372>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2103      	movs	r1, #3
 8007164:	4618      	mov	r0, r3
 8007166:	f7ff fadf 	bl	8006728 <LL_ADC_GetOffsetChannel>
 800716a:	4603      	mov	r3, r0
 800716c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800716e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007170:	fa93 f3a3 	rbit	r3, r3
 8007174:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8007176:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007178:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800717a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800717c:	2b00      	cmp	r3, #0
 800717e:	d101      	bne.n	8007184 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8007180:	2320      	movs	r3, #32
 8007182:	e003      	b.n	800718c <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8007184:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007186:	fab3 f383 	clz	r3, r3
 800718a:	b2db      	uxtb	r3, r3
 800718c:	461a      	mov	r2, r3
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007196:	2b00      	cmp	r3, #0
 8007198:	d105      	bne.n	80071a6 <HAL_ADC_ConfigChannel+0x38a>
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	0e9b      	lsrs	r3, r3, #26
 80071a0:	f003 031f 	and.w	r3, r3, #31
 80071a4:	e011      	b.n	80071ca <HAL_ADC_ConfigChannel+0x3ae>
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071ae:	fa93 f3a3 	rbit	r3, r3
 80071b2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80071b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80071b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d101      	bne.n	80071c2 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80071be:	2320      	movs	r3, #32
 80071c0:	e003      	b.n	80071ca <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80071c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071c4:	fab3 f383 	clz	r3, r3
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d106      	bne.n	80071dc <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2200      	movs	r2, #0
 80071d4:	2103      	movs	r1, #3
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7ff fabc 	bl	8006754 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7ff fbd7 	bl	8006994 <LL_ADC_IsEnabled>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f040 81c2 	bne.w	8007572 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6818      	ldr	r0, [r3, #0]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	6819      	ldr	r1, [r3, #0]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	461a      	mov	r2, r3
 80071fc:	f7ff fb30 	bl	8006860 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	4a8e      	ldr	r2, [pc, #568]	@ (8007440 <HAL_ADC_ConfigChannel+0x624>)
 8007206:	4293      	cmp	r3, r2
 8007208:	f040 8130 	bne.w	800746c <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10b      	bne.n	8007234 <HAL_ADC_ConfigChannel+0x418>
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	0e9b      	lsrs	r3, r3, #26
 8007222:	3301      	adds	r3, #1
 8007224:	f003 031f 	and.w	r3, r3, #31
 8007228:	2b09      	cmp	r3, #9
 800722a:	bf94      	ite	ls
 800722c:	2301      	movls	r3, #1
 800722e:	2300      	movhi	r3, #0
 8007230:	b2db      	uxtb	r3, r3
 8007232:	e019      	b.n	8007268 <HAL_ADC_ConfigChannel+0x44c>
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800723a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800723c:	fa93 f3a3 	rbit	r3, r3
 8007240:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8007242:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007244:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8007246:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 800724c:	2320      	movs	r3, #32
 800724e:	e003      	b.n	8007258 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8007250:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007252:	fab3 f383 	clz	r3, r3
 8007256:	b2db      	uxtb	r3, r3
 8007258:	3301      	adds	r3, #1
 800725a:	f003 031f 	and.w	r3, r3, #31
 800725e:	2b09      	cmp	r3, #9
 8007260:	bf94      	ite	ls
 8007262:	2301      	movls	r3, #1
 8007264:	2300      	movhi	r3, #0
 8007266:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007268:	2b00      	cmp	r3, #0
 800726a:	d079      	beq.n	8007360 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007274:	2b00      	cmp	r3, #0
 8007276:	d107      	bne.n	8007288 <HAL_ADC_ConfigChannel+0x46c>
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	0e9b      	lsrs	r3, r3, #26
 800727e:	3301      	adds	r3, #1
 8007280:	069b      	lsls	r3, r3, #26
 8007282:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007286:	e015      	b.n	80072b4 <HAL_ADC_ConfigChannel+0x498>
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800728e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007290:	fa93 f3a3 	rbit	r3, r3
 8007294:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8007296:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007298:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800729a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800729c:	2b00      	cmp	r3, #0
 800729e:	d101      	bne.n	80072a4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80072a0:	2320      	movs	r3, #32
 80072a2:	e003      	b.n	80072ac <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80072a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072a6:	fab3 f383 	clz	r3, r3
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	3301      	adds	r3, #1
 80072ae:	069b      	lsls	r3, r3, #26
 80072b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d109      	bne.n	80072d4 <HAL_ADC_ConfigChannel+0x4b8>
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	0e9b      	lsrs	r3, r3, #26
 80072c6:	3301      	adds	r3, #1
 80072c8:	f003 031f 	and.w	r3, r3, #31
 80072cc:	2101      	movs	r1, #1
 80072ce:	fa01 f303 	lsl.w	r3, r1, r3
 80072d2:	e017      	b.n	8007304 <HAL_ADC_ConfigChannel+0x4e8>
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072dc:	fa93 f3a3 	rbit	r3, r3
 80072e0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80072e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80072e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d101      	bne.n	80072f0 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 80072ec:	2320      	movs	r3, #32
 80072ee:	e003      	b.n	80072f8 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 80072f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072f2:	fab3 f383 	clz	r3, r3
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	3301      	adds	r3, #1
 80072fa:	f003 031f 	and.w	r3, r3, #31
 80072fe:	2101      	movs	r1, #1
 8007300:	fa01 f303 	lsl.w	r3, r1, r3
 8007304:	ea42 0103 	orr.w	r1, r2, r3
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10a      	bne.n	800732a <HAL_ADC_ConfigChannel+0x50e>
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	0e9b      	lsrs	r3, r3, #26
 800731a:	3301      	adds	r3, #1
 800731c:	f003 021f 	and.w	r2, r3, #31
 8007320:	4613      	mov	r3, r2
 8007322:	005b      	lsls	r3, r3, #1
 8007324:	4413      	add	r3, r2
 8007326:	051b      	lsls	r3, r3, #20
 8007328:	e018      	b.n	800735c <HAL_ADC_ConfigChannel+0x540>
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007332:	fa93 f3a3 	rbit	r3, r3
 8007336:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8007338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800733a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800733c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8007342:	2320      	movs	r3, #32
 8007344:	e003      	b.n	800734e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8007346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007348:	fab3 f383 	clz	r3, r3
 800734c:	b2db      	uxtb	r3, r3
 800734e:	3301      	adds	r3, #1
 8007350:	f003 021f 	and.w	r2, r3, #31
 8007354:	4613      	mov	r3, r2
 8007356:	005b      	lsls	r3, r3, #1
 8007358:	4413      	add	r3, r2
 800735a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800735c:	430b      	orrs	r3, r1
 800735e:	e080      	b.n	8007462 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007368:	2b00      	cmp	r3, #0
 800736a:	d107      	bne.n	800737c <HAL_ADC_ConfigChannel+0x560>
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	0e9b      	lsrs	r3, r3, #26
 8007372:	3301      	adds	r3, #1
 8007374:	069b      	lsls	r3, r3, #26
 8007376:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800737a:	e015      	b.n	80073a8 <HAL_ADC_ConfigChannel+0x58c>
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007384:	fa93 f3a3 	rbit	r3, r3
 8007388:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800738a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800738c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800738e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007390:	2b00      	cmp	r3, #0
 8007392:	d101      	bne.n	8007398 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8007394:	2320      	movs	r3, #32
 8007396:	e003      	b.n	80073a0 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8007398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739a:	fab3 f383 	clz	r3, r3
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	3301      	adds	r3, #1
 80073a2:	069b      	lsls	r3, r3, #26
 80073a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d109      	bne.n	80073c8 <HAL_ADC_ConfigChannel+0x5ac>
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	0e9b      	lsrs	r3, r3, #26
 80073ba:	3301      	adds	r3, #1
 80073bc:	f003 031f 	and.w	r3, r3, #31
 80073c0:	2101      	movs	r1, #1
 80073c2:	fa01 f303 	lsl.w	r3, r1, r3
 80073c6:	e017      	b.n	80073f8 <HAL_ADC_ConfigChannel+0x5dc>
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	fa93 f3a3 	rbit	r3, r3
 80073d4:	61fb      	str	r3, [r7, #28]
  return result;
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80073da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d101      	bne.n	80073e4 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 80073e0:	2320      	movs	r3, #32
 80073e2:	e003      	b.n	80073ec <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 80073e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e6:	fab3 f383 	clz	r3, r3
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	3301      	adds	r3, #1
 80073ee:	f003 031f 	and.w	r3, r3, #31
 80073f2:	2101      	movs	r1, #1
 80073f4:	fa01 f303 	lsl.w	r3, r1, r3
 80073f8:	ea42 0103 	orr.w	r1, r2, r3
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10d      	bne.n	8007424 <HAL_ADC_ConfigChannel+0x608>
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	0e9b      	lsrs	r3, r3, #26
 800740e:	3301      	adds	r3, #1
 8007410:	f003 021f 	and.w	r2, r3, #31
 8007414:	4613      	mov	r3, r2
 8007416:	005b      	lsls	r3, r3, #1
 8007418:	4413      	add	r3, r2
 800741a:	3b1e      	subs	r3, #30
 800741c:	051b      	lsls	r3, r3, #20
 800741e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007422:	e01d      	b.n	8007460 <HAL_ADC_ConfigChannel+0x644>
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	fa93 f3a3 	rbit	r3, r3
 8007430:	613b      	str	r3, [r7, #16]
  return result;
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d103      	bne.n	8007444 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 800743c:	2320      	movs	r3, #32
 800743e:	e005      	b.n	800744c <HAL_ADC_ConfigChannel+0x630>
 8007440:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	fab3 f383 	clz	r3, r3
 800744a:	b2db      	uxtb	r3, r3
 800744c:	3301      	adds	r3, #1
 800744e:	f003 021f 	and.w	r2, r3, #31
 8007452:	4613      	mov	r3, r2
 8007454:	005b      	lsls	r3, r3, #1
 8007456:	4413      	add	r3, r2
 8007458:	3b1e      	subs	r3, #30
 800745a:	051b      	lsls	r3, r3, #20
 800745c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007460:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007466:	4619      	mov	r1, r3
 8007468:	f7ff f9ce 	bl	8006808 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	4b45      	ldr	r3, [pc, #276]	@ (8007588 <HAL_ADC_ConfigChannel+0x76c>)
 8007472:	4013      	ands	r3, r2
 8007474:	2b00      	cmp	r3, #0
 8007476:	d07c      	beq.n	8007572 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007478:	4844      	ldr	r0, [pc, #272]	@ (800758c <HAL_ADC_ConfigChannel+0x770>)
 800747a:	f7ff f923 	bl	80066c4 <LL_ADC_GetCommonPathInternalCh>
 800747e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007482:	4843      	ldr	r0, [pc, #268]	@ (8007590 <HAL_ADC_ConfigChannel+0x774>)
 8007484:	f7ff fa86 	bl	8006994 <LL_ADC_IsEnabled>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d15e      	bne.n	800754c <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a40      	ldr	r2, [pc, #256]	@ (8007594 <HAL_ADC_ConfigChannel+0x778>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d127      	bne.n	80074e8 <HAL_ADC_ConfigChannel+0x6cc>
 8007498:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800749c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d121      	bne.n	80074e8 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a39      	ldr	r2, [pc, #228]	@ (8007590 <HAL_ADC_ConfigChannel+0x774>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d161      	bne.n	8007572 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80074ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80074b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80074b6:	4619      	mov	r1, r3
 80074b8:	4834      	ldr	r0, [pc, #208]	@ (800758c <HAL_ADC_ConfigChannel+0x770>)
 80074ba:	f7ff f8f0 	bl	800669e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80074be:	4b36      	ldr	r3, [pc, #216]	@ (8007598 <HAL_ADC_ConfigChannel+0x77c>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	099b      	lsrs	r3, r3, #6
 80074c4:	4a35      	ldr	r2, [pc, #212]	@ (800759c <HAL_ADC_ConfigChannel+0x780>)
 80074c6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ca:	099b      	lsrs	r3, r3, #6
 80074cc:	1c5a      	adds	r2, r3, #1
 80074ce:	4613      	mov	r3, r2
 80074d0:	005b      	lsls	r3, r3, #1
 80074d2:	4413      	add	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80074d8:	e002      	b.n	80074e0 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	3b01      	subs	r3, #1
 80074de:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1f9      	bne.n	80074da <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80074e6:	e044      	b.n	8007572 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a2c      	ldr	r2, [pc, #176]	@ (80075a0 <HAL_ADC_ConfigChannel+0x784>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d113      	bne.n	800751a <HAL_ADC_ConfigChannel+0x6fe>
 80074f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80074f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10d      	bne.n	800751a <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a23      	ldr	r2, [pc, #140]	@ (8007590 <HAL_ADC_ConfigChannel+0x774>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d134      	bne.n	8007572 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8007508:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800750c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007510:	4619      	mov	r1, r3
 8007512:	481e      	ldr	r0, [pc, #120]	@ (800758c <HAL_ADC_ConfigChannel+0x770>)
 8007514:	f7ff f8c3 	bl	800669e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007518:	e02b      	b.n	8007572 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a21      	ldr	r2, [pc, #132]	@ (80075a4 <HAL_ADC_ConfigChannel+0x788>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d126      	bne.n	8007572 <HAL_ADC_ConfigChannel+0x756>
 8007524:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007528:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d120      	bne.n	8007572 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a16      	ldr	r2, [pc, #88]	@ (8007590 <HAL_ADC_ConfigChannel+0x774>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d11b      	bne.n	8007572 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800753a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800753e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007542:	4619      	mov	r1, r3
 8007544:	4811      	ldr	r0, [pc, #68]	@ (800758c <HAL_ADC_ConfigChannel+0x770>)
 8007546:	f7ff f8aa 	bl	800669e <LL_ADC_SetCommonPathInternalCh>
 800754a:	e012      	b.n	8007572 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007550:	f043 0220 	orr.w	r2, r3, #32
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800755e:	e008      	b.n	8007572 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007564:	f043 0220 	orr.w	r2, r3, #32
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800757a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800757e:	4618      	mov	r0, r3
 8007580:	37d8      	adds	r7, #216	@ 0xd8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	80080000 	.word	0x80080000
 800758c:	50040300 	.word	0x50040300
 8007590:	50040000 	.word	0x50040000
 8007594:	c7520000 	.word	0xc7520000
 8007598:	20000200 	.word	0x20000200
 800759c:	053e2d63 	.word	0x053e2d63
 80075a0:	cb840000 	.word	0xcb840000
 80075a4:	80000001 	.word	0x80000001

080075a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80075b0:	2300      	movs	r3, #0
 80075b2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7ff f9eb 	bl	8006994 <LL_ADC_IsEnabled>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d15e      	bne.n	8007682 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	689a      	ldr	r2, [r3, #8]
 80075ca:	4b30      	ldr	r3, [pc, #192]	@ (800768c <ADC_Enable+0xe4>)
 80075cc:	4013      	ands	r3, r2
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00d      	beq.n	80075ee <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075d6:	f043 0210 	orr.w	r2, r3, #16
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075e2:	f043 0201 	orr.w	r2, r3, #1
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e04a      	b.n	8007684 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7ff f9a6 	bl	8006944 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80075f8:	4825      	ldr	r0, [pc, #148]	@ (8007690 <ADC_Enable+0xe8>)
 80075fa:	f7ff f863 	bl	80066c4 <LL_ADC_GetCommonPathInternalCh>
 80075fe:	4603      	mov	r3, r0
 8007600:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00f      	beq.n	8007628 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007608:	4b22      	ldr	r3, [pc, #136]	@ (8007694 <ADC_Enable+0xec>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	099b      	lsrs	r3, r3, #6
 800760e:	4a22      	ldr	r2, [pc, #136]	@ (8007698 <ADC_Enable+0xf0>)
 8007610:	fba2 2303 	umull	r2, r3, r2, r3
 8007614:	099b      	lsrs	r3, r3, #6
 8007616:	3301      	adds	r3, #1
 8007618:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800761a:	e002      	b.n	8007622 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	3b01      	subs	r3, #1
 8007620:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1f9      	bne.n	800761c <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8007628:	f7ff f802 	bl	8006630 <HAL_GetTick>
 800762c:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800762e:	e021      	b.n	8007674 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4618      	mov	r0, r3
 8007636:	f7ff f9ad 	bl	8006994 <LL_ADC_IsEnabled>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d104      	bne.n	800764a <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4618      	mov	r0, r3
 8007646:	f7ff f97d 	bl	8006944 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800764a:	f7fe fff1 	bl	8006630 <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	2b02      	cmp	r3, #2
 8007656:	d90d      	bls.n	8007674 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800765c:	f043 0210 	orr.w	r2, r3, #16
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007668:	f043 0201 	orr.w	r2, r3, #1
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e007      	b.n	8007684 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b01      	cmp	r3, #1
 8007680:	d1d6      	bne.n	8007630 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	8000003f 	.word	0x8000003f
 8007690:	50040300 	.word	0x50040300
 8007694:	20000200 	.word	0x20000200
 8007698:	053e2d63 	.word	0x053e2d63

0800769c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7ff f986 	bl	80069ba <LL_ADC_IsDisableOngoing>
 80076ae:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7ff f96d 	bl	8006994 <LL_ADC_IsEnabled>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d047      	beq.n	8007750 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d144      	bne.n	8007750 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f003 030d 	and.w	r3, r3, #13
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d10c      	bne.n	80076ee <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4618      	mov	r0, r3
 80076da:	f7ff f947 	bl	800696c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2203      	movs	r2, #3
 80076e4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80076e6:	f7fe ffa3 	bl	8006630 <HAL_GetTick>
 80076ea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80076ec:	e029      	b.n	8007742 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076f2:	f043 0210 	orr.w	r2, r3, #16
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076fe:	f043 0201 	orr.w	r2, r3, #1
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e023      	b.n	8007752 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800770a:	f7fe ff91 	bl	8006630 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	2b02      	cmp	r3, #2
 8007716:	d914      	bls.n	8007742 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00d      	beq.n	8007742 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800772a:	f043 0210 	orr.w	r2, r3, #16
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007736:	f043 0201 	orr.w	r2, r3, #1
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e007      	b.n	8007752 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1dc      	bne.n	800770a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b084      	sub	sp, #16
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007766:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800776c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007770:	2b00      	cmp	r3, #0
 8007772:	d14b      	bne.n	800780c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007778:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0308 	and.w	r3, r3, #8
 800778a:	2b00      	cmp	r3, #0
 800778c:	d021      	beq.n	80077d2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4618      	mov	r0, r3
 8007794:	f7fe fff9 	bl	800678a <LL_ADC_REG_IsTriggerSourceSWStart>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d032      	beq.n	8007804 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d12b      	bne.n	8007804 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d11f      	bne.n	8007804 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077c8:	f043 0201 	orr.w	r2, r3, #1
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	655a      	str	r2, [r3, #84]	@ 0x54
 80077d0:	e018      	b.n	8007804 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	f003 0302 	and.w	r3, r3, #2
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d111      	bne.n	8007804 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d105      	bne.n	8007804 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077fc:	f043 0201 	orr.w	r2, r3, #1
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f7fa fb7f 	bl	8001f08 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800780a:	e00e      	b.n	800782a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007810:	f003 0310 	and.w	r3, r3, #16
 8007814:	2b00      	cmp	r3, #0
 8007816:	d003      	beq.n	8007820 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f7ff faf5 	bl	8006e08 <HAL_ADC_ErrorCallback>
}
 800781e:	e004      	b.n	800782a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	4798      	blx	r3
}
 800782a:	bf00      	nop
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800783e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f7ff fad7 	bl	8006df4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007846:	bf00      	nop
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800784e:	b580      	push	{r7, lr}
 8007850:	b084      	sub	sp, #16
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800785a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007860:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800786c:	f043 0204 	orr.w	r2, r3, #4
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f7ff fac7 	bl	8006e08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800787a:	bf00      	nop
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <LL_ADC_StartCalibration>:
{
 8007882:	b480      	push	{r7}
 8007884:	b083      	sub	sp, #12
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8007894:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007898:	683a      	ldr	r2, [r7, #0]
 800789a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800789e:	4313      	orrs	r3, r2
 80078a0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	609a      	str	r2, [r3, #8]
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <LL_ADC_IsCalibrationOnGoing>:
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078c8:	d101      	bne.n	80078ce <LL_ADC_IsCalibrationOnGoing+0x1a>
 80078ca:	2301      	movs	r3, #1
 80078cc:	e000      	b.n	80078d0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  uint32_t adc_clk_async_presc;
  __IO uint32_t delay_cpu_cycles;
#endif /* ADC_SUPPORT_2_5_MSPS */

  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80078e6:	2300      	movs	r3, #0
 80078e8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d101      	bne.n	80078f8 <HAL_ADCEx_Calibration_Start+0x1c>
 80078f4:	2302      	movs	r3, #2
 80078f6:	e04d      	b.n	8007994 <HAL_ADCEx_Calibration_Start+0xb8>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7ff fecb 	bl	800769c <ADC_Disable>
 8007906:	4603      	mov	r3, r0
 8007908:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800790a:	7bfb      	ldrb	r3, [r7, #15]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d136      	bne.n	800797e <HAL_ADCEx_Calibration_Start+0xa2>
#if defined(ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007914:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007918:	f023 0302 	bic.w	r3, r3, #2
 800791c:	f043 0202 	orr.w	r2, r3, #2
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	655a      	str	r2, [r3, #84]	@ 0x54
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);

#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	4618      	mov	r0, r3
 800792c:	f7ff ffa9 	bl	8007882 <LL_ADC_StartCalibration>
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007930:	e014      	b.n	800795c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	3301      	adds	r3, #1
 8007936:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	4a18      	ldr	r2, [pc, #96]	@ (800799c <HAL_ADCEx_Calibration_Start+0xc0>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d90d      	bls.n	800795c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007944:	f023 0312 	bic.w	r3, r3, #18
 8007948:	f043 0210 	orr.w	r2, r3, #16
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e01b      	b.n	8007994 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4618      	mov	r0, r3
 8007962:	f7ff ffa7 	bl	80078b4 <LL_ADC_IsCalibrationOnGoing>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1e2      	bne.n	8007932 <HAL_ADCEx_Calibration_Start+0x56>
    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007970:	f023 0303 	bic.w	r3, r3, #3
 8007974:	f043 0201 	orr.w	r2, r3, #1
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	655a      	str	r2, [r3, #84]	@ 0x54
 800797c:	e005      	b.n	800798a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007982:	f043 0210 	orr.w	r2, r3, #16
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8007992:	7bfb      	ldrb	r3, [r7, #15]
}
 8007994:	4618      	mov	r0, r3
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	00026aaa 	.word	0x00026aaa

080079a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f003 0307 	and.w	r3, r3, #7
 80079ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80079b0:	4b0c      	ldr	r3, [pc, #48]	@ (80079e4 <__NVIC_SetPriorityGrouping+0x44>)
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80079bc:	4013      	ands	r3, r2
 80079be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80079c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80079cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80079d2:	4a04      	ldr	r2, [pc, #16]	@ (80079e4 <__NVIC_SetPriorityGrouping+0x44>)
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	60d3      	str	r3, [r2, #12]
}
 80079d8:	bf00      	nop
 80079da:	3714      	adds	r7, #20
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	e000ed00 	.word	0xe000ed00

080079e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80079e8:	b480      	push	{r7}
 80079ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80079ec:	4b04      	ldr	r3, [pc, #16]	@ (8007a00 <__NVIC_GetPriorityGrouping+0x18>)
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	0a1b      	lsrs	r3, r3, #8
 80079f2:	f003 0307 	and.w	r3, r3, #7
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr
 8007a00:	e000ed00 	.word	0xe000ed00

08007a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	db0b      	blt.n	8007a2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a16:	79fb      	ldrb	r3, [r7, #7]
 8007a18:	f003 021f 	and.w	r2, r3, #31
 8007a1c:	4907      	ldr	r1, [pc, #28]	@ (8007a3c <__NVIC_EnableIRQ+0x38>)
 8007a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a22:	095b      	lsrs	r3, r3, #5
 8007a24:	2001      	movs	r0, #1
 8007a26:	fa00 f202 	lsl.w	r2, r0, r2
 8007a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007a2e:	bf00      	nop
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	e000e100 	.word	0xe000e100

08007a40 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	4603      	mov	r3, r0
 8007a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	db12      	blt.n	8007a78 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a52:	79fb      	ldrb	r3, [r7, #7]
 8007a54:	f003 021f 	and.w	r2, r3, #31
 8007a58:	490a      	ldr	r1, [pc, #40]	@ (8007a84 <__NVIC_DisableIRQ+0x44>)
 8007a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a5e:	095b      	lsrs	r3, r3, #5
 8007a60:	2001      	movs	r0, #1
 8007a62:	fa00 f202 	lsl.w	r2, r0, r2
 8007a66:	3320      	adds	r3, #32
 8007a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007a6c:	f3bf 8f4f 	dsb	sy
}
 8007a70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007a72:	f3bf 8f6f 	isb	sy
}
 8007a76:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr
 8007a84:	e000e100 	.word	0xe000e100

08007a88 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	4603      	mov	r3, r0
 8007a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	db0c      	blt.n	8007ab4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a9a:	79fb      	ldrb	r3, [r7, #7]
 8007a9c:	f003 021f 	and.w	r2, r3, #31
 8007aa0:	4907      	ldr	r1, [pc, #28]	@ (8007ac0 <__NVIC_SetPendingIRQ+0x38>)
 8007aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aa6:	095b      	lsrs	r3, r3, #5
 8007aa8:	2001      	movs	r0, #1
 8007aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8007aae:	3340      	adds	r3, #64	@ 0x40
 8007ab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr
 8007ac0:	e000e100 	.word	0xe000e100

08007ac4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	4603      	mov	r3, r0
 8007acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	db0c      	blt.n	8007af0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ad6:	79fb      	ldrb	r3, [r7, #7]
 8007ad8:	f003 021f 	and.w	r2, r3, #31
 8007adc:	4907      	ldr	r1, [pc, #28]	@ (8007afc <__NVIC_ClearPendingIRQ+0x38>)
 8007ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ae2:	095b      	lsrs	r3, r3, #5
 8007ae4:	2001      	movs	r0, #1
 8007ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8007aea:	3360      	adds	r3, #96	@ 0x60
 8007aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	e000e100 	.word	0xe000e100

08007b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	4603      	mov	r3, r0
 8007b08:	6039      	str	r1, [r7, #0]
 8007b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	db0a      	blt.n	8007b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	b2da      	uxtb	r2, r3
 8007b18:	490c      	ldr	r1, [pc, #48]	@ (8007b4c <__NVIC_SetPriority+0x4c>)
 8007b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b1e:	0112      	lsls	r2, r2, #4
 8007b20:	b2d2      	uxtb	r2, r2
 8007b22:	440b      	add	r3, r1
 8007b24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007b28:	e00a      	b.n	8007b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	b2da      	uxtb	r2, r3
 8007b2e:	4908      	ldr	r1, [pc, #32]	@ (8007b50 <__NVIC_SetPriority+0x50>)
 8007b30:	79fb      	ldrb	r3, [r7, #7]
 8007b32:	f003 030f 	and.w	r3, r3, #15
 8007b36:	3b04      	subs	r3, #4
 8007b38:	0112      	lsls	r2, r2, #4
 8007b3a:	b2d2      	uxtb	r2, r2
 8007b3c:	440b      	add	r3, r1
 8007b3e:	761a      	strb	r2, [r3, #24]
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	e000e100 	.word	0xe000e100
 8007b50:	e000ed00 	.word	0xe000ed00

08007b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b089      	sub	sp, #36	@ 0x24
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f003 0307 	and.w	r3, r3, #7
 8007b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	f1c3 0307 	rsb	r3, r3, #7
 8007b6e:	2b04      	cmp	r3, #4
 8007b70:	bf28      	it	cs
 8007b72:	2304      	movcs	r3, #4
 8007b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	3304      	adds	r3, #4
 8007b7a:	2b06      	cmp	r3, #6
 8007b7c:	d902      	bls.n	8007b84 <NVIC_EncodePriority+0x30>
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	3b03      	subs	r3, #3
 8007b82:	e000      	b.n	8007b86 <NVIC_EncodePriority+0x32>
 8007b84:	2300      	movs	r3, #0
 8007b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b88:	f04f 32ff 	mov.w	r2, #4294967295
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b92:	43da      	mvns	r2, r3
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	401a      	ands	r2, r3
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ba6:	43d9      	mvns	r1, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bac:	4313      	orrs	r3, r2
         );
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3724      	adds	r7, #36	@ 0x24
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b082      	sub	sp, #8
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f7ff feec 	bl	80079a0 <__NVIC_SetPriorityGrouping>
}
 8007bc8:	bf00      	nop
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
 8007bdc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007bde:	f7ff ff03 	bl	80079e8 <__NVIC_GetPriorityGrouping>
 8007be2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	68b9      	ldr	r1, [r7, #8]
 8007be8:	6978      	ldr	r0, [r7, #20]
 8007bea:	f7ff ffb3 	bl	8007b54 <NVIC_EncodePriority>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bf4:	4611      	mov	r1, r2
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7ff ff82 	bl	8007b00 <__NVIC_SetPriority>
}
 8007bfc:	bf00      	nop
 8007bfe:	3718      	adds	r7, #24
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7ff fef6 	bl	8007a04 <__NVIC_EnableIRQ>
}
 8007c18:	bf00      	nop
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	4603      	mov	r3, r0
 8007c28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7ff ff06 	bl	8007a40 <__NVIC_DisableIRQ>
}
 8007c34:	bf00      	nop
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	4603      	mov	r3, r0
 8007c44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8007c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7ff ff1c 	bl	8007a88 <__NVIC_SetPendingIRQ>
}
 8007c50:	bf00      	nop
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	4603      	mov	r3, r0
 8007c60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7ff ff2c 	bl	8007ac4 <__NVIC_ClearPendingIRQ>
}
 8007c6c:	bf00      	nop
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e08e      	b.n	8007da4 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	4b47      	ldr	r3, [pc, #284]	@ (8007dac <HAL_DMA_Init+0x138>)
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d80f      	bhi.n	8007cb2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	461a      	mov	r2, r3
 8007c98:	4b45      	ldr	r3, [pc, #276]	@ (8007db0 <HAL_DMA_Init+0x13c>)
 8007c9a:	4413      	add	r3, r2
 8007c9c:	4a45      	ldr	r2, [pc, #276]	@ (8007db4 <HAL_DMA_Init+0x140>)
 8007c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca2:	091b      	lsrs	r3, r3, #4
 8007ca4:	009a      	lsls	r2, r3, #2
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a42      	ldr	r2, [pc, #264]	@ (8007db8 <HAL_DMA_Init+0x144>)
 8007cae:	641a      	str	r2, [r3, #64]	@ 0x40
 8007cb0:	e00e      	b.n	8007cd0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	4b40      	ldr	r3, [pc, #256]	@ (8007dbc <HAL_DMA_Init+0x148>)
 8007cba:	4413      	add	r3, r2
 8007cbc:	4a3d      	ldr	r2, [pc, #244]	@ (8007db4 <HAL_DMA_Init+0x140>)
 8007cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc2:	091b      	lsrs	r3, r3, #4
 8007cc4:	009a      	lsls	r2, r3, #2
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a3c      	ldr	r2, [pc, #240]	@ (8007dc0 <HAL_DMA_Init+0x14c>)
 8007cce:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007cf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	699b      	ldr	r3, [r3, #24]
 8007d06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f9b6 	bl	8008094 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d30:	d102      	bne.n	8007d38 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d40:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007d44:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007d4e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d010      	beq.n	8007d7a <HAL_DMA_Init+0x106>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	2b04      	cmp	r3, #4
 8007d5e:	d80c      	bhi.n	8007d7a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f9d5 	bl	8008110 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007d76:	605a      	str	r2, [r3, #4]
 8007d78:	e008      	b.n	8007d8c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3710      	adds	r7, #16
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	40020407 	.word	0x40020407
 8007db0:	bffdfff8 	.word	0xbffdfff8
 8007db4:	cccccccd 	.word	0xcccccccd
 8007db8:	40020000 	.word	0x40020000
 8007dbc:	bffdfbf8 	.word	0xbffdfbf8
 8007dc0:	40020400 	.word	0x40020400

08007dc4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
 8007dd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d101      	bne.n	8007de4 <HAL_DMA_Start_IT+0x20>
 8007de0:	2302      	movs	r3, #2
 8007de2:	e066      	b.n	8007eb2 <HAL_DMA_Start_IT+0xee>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d155      	bne.n	8007ea4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2200      	movs	r2, #0
 8007e04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f022 0201 	bic.w	r2, r2, #1
 8007e14:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	68b9      	ldr	r1, [r7, #8]
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f000 f8fb 	bl	8008018 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d008      	beq.n	8007e3c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f042 020e 	orr.w	r2, r2, #14
 8007e38:	601a      	str	r2, [r3, #0]
 8007e3a:	e00f      	b.n	8007e5c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f022 0204 	bic.w	r2, r2, #4
 8007e4a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f042 020a 	orr.w	r2, r2, #10
 8007e5a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d007      	beq.n	8007e7a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007e78:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d007      	beq.n	8007e92 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007e90:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f042 0201 	orr.w	r2, r2, #1
 8007ea0:	601a      	str	r2, [r3, #0]
 8007ea2:	e005      	b.n	8007eb0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007eac:	2302      	movs	r3, #2
 8007eae:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3718      	adds	r7, #24
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b084      	sub	sp, #16
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ed6:	f003 031c 	and.w	r3, r3, #28
 8007eda:	2204      	movs	r2, #4
 8007edc:	409a      	lsls	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d026      	beq.n	8007f34 <HAL_DMA_IRQHandler+0x7a>
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	f003 0304 	and.w	r3, r3, #4
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d021      	beq.n	8007f34 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0320 	and.w	r3, r3, #32
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d107      	bne.n	8007f0e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f022 0204 	bic.w	r2, r2, #4
 8007f0c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f12:	f003 021c 	and.w	r2, r3, #28
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f1a:	2104      	movs	r1, #4
 8007f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8007f20:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d071      	beq.n	800800e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007f32:	e06c      	b.n	800800e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f38:	f003 031c 	and.w	r3, r3, #28
 8007f3c:	2202      	movs	r2, #2
 8007f3e:	409a      	lsls	r2, r3
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	4013      	ands	r3, r2
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d02e      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0xec>
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	f003 0302 	and.w	r3, r3, #2
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d029      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0320 	and.w	r3, r3, #32
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10b      	bne.n	8007f78 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f022 020a 	bic.w	r2, r2, #10
 8007f6e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f7c:	f003 021c 	and.w	r2, r3, #28
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f84:	2102      	movs	r1, #2
 8007f86:	fa01 f202 	lsl.w	r2, r1, r2
 8007f8a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d038      	beq.n	800800e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007fa4:	e033      	b.n	800800e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007faa:	f003 031c 	and.w	r3, r3, #28
 8007fae:	2208      	movs	r2, #8
 8007fb0:	409a      	lsls	r2, r3
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d02a      	beq.n	8008010 <HAL_DMA_IRQHandler+0x156>
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	f003 0308 	and.w	r3, r3, #8
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d025      	beq.n	8008010 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f022 020e 	bic.w	r2, r2, #14
 8007fd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fd8:	f003 021c 	and.w	r2, r3, #28
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fe0:	2101      	movs	r1, #1
 8007fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8007fe6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008002:	2b00      	cmp	r3, #0
 8008004:	d004      	beq.n	8008010 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800800e:	bf00      	nop
 8008010:	bf00      	nop
}
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	607a      	str	r2, [r7, #4]
 8008024:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800802e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008034:	2b00      	cmp	r3, #0
 8008036:	d004      	beq.n	8008042 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008040:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008046:	f003 021c 	and.w	r2, r3, #28
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800804e:	2101      	movs	r1, #1
 8008050:	fa01 f202 	lsl.w	r2, r1, r2
 8008054:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	683a      	ldr	r2, [r7, #0]
 800805c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	2b10      	cmp	r3, #16
 8008064:	d108      	bne.n	8008078 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008076:	e007      	b.n	8008088 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	60da      	str	r2, [r3, #12]
}
 8008088:	bf00      	nop
 800808a:	3714      	adds	r7, #20
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	461a      	mov	r2, r3
 80080a2:	4b17      	ldr	r3, [pc, #92]	@ (8008100 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d80a      	bhi.n	80080be <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ac:	089b      	lsrs	r3, r3, #2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80080b4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	6493      	str	r3, [r2, #72]	@ 0x48
 80080bc:	e007      	b.n	80080ce <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080c2:	089b      	lsrs	r3, r3, #2
 80080c4:	009a      	lsls	r2, r3, #2
 80080c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008104 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80080c8:	4413      	add	r3, r2
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	3b08      	subs	r3, #8
 80080d6:	4a0c      	ldr	r2, [pc, #48]	@ (8008108 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80080d8:	fba2 2303 	umull	r2, r3, r2, r3
 80080dc:	091b      	lsrs	r3, r3, #4
 80080de:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a0a      	ldr	r2, [pc, #40]	@ (800810c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80080e4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f003 031f 	and.w	r3, r3, #31
 80080ec:	2201      	movs	r2, #1
 80080ee:	409a      	lsls	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80080f4:	bf00      	nop
 80080f6:	3714      	adds	r7, #20
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	40020407 	.word	0x40020407
 8008104:	4002081c 	.word	0x4002081c
 8008108:	cccccccd 	.word	0xcccccccd
 800810c:	40020880 	.word	0x40020880

08008110 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008120:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	4b0b      	ldr	r3, [pc, #44]	@ (8008154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008126:	4413      	add	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	461a      	mov	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a09      	ldr	r2, [pc, #36]	@ (8008158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8008134:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	3b01      	subs	r3, #1
 800813a:	f003 0303 	and.w	r3, r3, #3
 800813e:	2201      	movs	r2, #1
 8008140:	409a      	lsls	r2, r3
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8008146:	bf00      	nop
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	1000823f 	.word	0x1000823f
 8008158:	40020940 	.word	0x40020940

0800815c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800815c:	b480      	push	{r7}
 800815e:	b087      	sub	sp, #28
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008166:	2300      	movs	r3, #0
 8008168:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800816a:	e14c      	b.n	8008406 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	2101      	movs	r1, #1
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	fa01 f303 	lsl.w	r3, r1, r3
 8008178:	4013      	ands	r3, r2
 800817a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2b00      	cmp	r3, #0
 8008180:	f000 813e 	beq.w	8008400 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	f003 0303 	and.w	r3, r3, #3
 800818c:	2b01      	cmp	r3, #1
 800818e:	d005      	beq.n	800819c <HAL_GPIO_Init+0x40>
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	f003 0303 	and.w	r3, r3, #3
 8008198:	2b02      	cmp	r3, #2
 800819a:	d130      	bne.n	80081fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	005b      	lsls	r3, r3, #1
 80081a6:	2203      	movs	r2, #3
 80081a8:	fa02 f303 	lsl.w	r3, r2, r3
 80081ac:	43db      	mvns	r3, r3
 80081ae:	693a      	ldr	r2, [r7, #16]
 80081b0:	4013      	ands	r3, r2
 80081b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	68da      	ldr	r2, [r3, #12]
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	005b      	lsls	r3, r3, #1
 80081bc:	fa02 f303 	lsl.w	r3, r2, r3
 80081c0:	693a      	ldr	r2, [r7, #16]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80081d2:	2201      	movs	r2, #1
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	fa02 f303 	lsl.w	r3, r2, r3
 80081da:	43db      	mvns	r3, r3
 80081dc:	693a      	ldr	r2, [r7, #16]
 80081de:	4013      	ands	r3, r2
 80081e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	091b      	lsrs	r3, r3, #4
 80081e8:	f003 0201 	and.w	r2, r3, #1
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	fa02 f303 	lsl.w	r3, r2, r3
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	693a      	ldr	r2, [r7, #16]
 80081fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f003 0303 	and.w	r3, r3, #3
 8008206:	2b03      	cmp	r3, #3
 8008208:	d017      	beq.n	800823a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	005b      	lsls	r3, r3, #1
 8008214:	2203      	movs	r2, #3
 8008216:	fa02 f303 	lsl.w	r3, r2, r3
 800821a:	43db      	mvns	r3, r3
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	4013      	ands	r3, r2
 8008220:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	689a      	ldr	r2, [r3, #8]
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	005b      	lsls	r3, r3, #1
 800822a:	fa02 f303 	lsl.w	r3, r2, r3
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	4313      	orrs	r3, r2
 8008232:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	693a      	ldr	r2, [r7, #16]
 8008238:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	f003 0303 	and.w	r3, r3, #3
 8008242:	2b02      	cmp	r3, #2
 8008244:	d123      	bne.n	800828e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	08da      	lsrs	r2, r3, #3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	3208      	adds	r2, #8
 800824e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008252:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	f003 0307 	and.w	r3, r3, #7
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	220f      	movs	r2, #15
 800825e:	fa02 f303 	lsl.w	r3, r2, r3
 8008262:	43db      	mvns	r3, r3
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	4013      	ands	r3, r2
 8008268:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	691a      	ldr	r2, [r3, #16]
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	f003 0307 	and.w	r3, r3, #7
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	fa02 f303 	lsl.w	r3, r2, r3
 800827a:	693a      	ldr	r2, [r7, #16]
 800827c:	4313      	orrs	r3, r2
 800827e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	08da      	lsrs	r2, r3, #3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	3208      	adds	r2, #8
 8008288:	6939      	ldr	r1, [r7, #16]
 800828a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	005b      	lsls	r3, r3, #1
 8008298:	2203      	movs	r2, #3
 800829a:	fa02 f303 	lsl.w	r3, r2, r3
 800829e:	43db      	mvns	r3, r3
 80082a0:	693a      	ldr	r2, [r7, #16]
 80082a2:	4013      	ands	r3, r2
 80082a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	f003 0203 	and.w	r2, r3, #3
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	005b      	lsls	r3, r3, #1
 80082b2:	fa02 f303 	lsl.w	r3, r2, r3
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	693a      	ldr	r2, [r7, #16]
 80082c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f000 8098 	beq.w	8008400 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80082d0:	4a54      	ldr	r2, [pc, #336]	@ (8008424 <HAL_GPIO_Init+0x2c8>)
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	089b      	lsrs	r3, r3, #2
 80082d6:	3302      	adds	r3, #2
 80082d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f003 0303 	and.w	r3, r3, #3
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	220f      	movs	r2, #15
 80082e8:	fa02 f303 	lsl.w	r3, r2, r3
 80082ec:	43db      	mvns	r3, r3
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	4013      	ands	r3, r2
 80082f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80082fa:	d019      	beq.n	8008330 <HAL_GPIO_Init+0x1d4>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a4a      	ldr	r2, [pc, #296]	@ (8008428 <HAL_GPIO_Init+0x2cc>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d013      	beq.n	800832c <HAL_GPIO_Init+0x1d0>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a49      	ldr	r2, [pc, #292]	@ (800842c <HAL_GPIO_Init+0x2d0>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d00d      	beq.n	8008328 <HAL_GPIO_Init+0x1cc>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a48      	ldr	r2, [pc, #288]	@ (8008430 <HAL_GPIO_Init+0x2d4>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d007      	beq.n	8008324 <HAL_GPIO_Init+0x1c8>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a47      	ldr	r2, [pc, #284]	@ (8008434 <HAL_GPIO_Init+0x2d8>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d101      	bne.n	8008320 <HAL_GPIO_Init+0x1c4>
 800831c:	2304      	movs	r3, #4
 800831e:	e008      	b.n	8008332 <HAL_GPIO_Init+0x1d6>
 8008320:	2307      	movs	r3, #7
 8008322:	e006      	b.n	8008332 <HAL_GPIO_Init+0x1d6>
 8008324:	2303      	movs	r3, #3
 8008326:	e004      	b.n	8008332 <HAL_GPIO_Init+0x1d6>
 8008328:	2302      	movs	r3, #2
 800832a:	e002      	b.n	8008332 <HAL_GPIO_Init+0x1d6>
 800832c:	2301      	movs	r3, #1
 800832e:	e000      	b.n	8008332 <HAL_GPIO_Init+0x1d6>
 8008330:	2300      	movs	r3, #0
 8008332:	697a      	ldr	r2, [r7, #20]
 8008334:	f002 0203 	and.w	r2, r2, #3
 8008338:	0092      	lsls	r2, r2, #2
 800833a:	4093      	lsls	r3, r2
 800833c:	693a      	ldr	r2, [r7, #16]
 800833e:	4313      	orrs	r3, r2
 8008340:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008342:	4938      	ldr	r1, [pc, #224]	@ (8008424 <HAL_GPIO_Init+0x2c8>)
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	089b      	lsrs	r3, r3, #2
 8008348:	3302      	adds	r3, #2
 800834a:	693a      	ldr	r2, [r7, #16]
 800834c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008350:	4b39      	ldr	r3, [pc, #228]	@ (8008438 <HAL_GPIO_Init+0x2dc>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	43db      	mvns	r3, r3
 800835a:	693a      	ldr	r2, [r7, #16]
 800835c:	4013      	ands	r3, r2
 800835e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008368:	2b00      	cmp	r3, #0
 800836a:	d003      	beq.n	8008374 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	4313      	orrs	r3, r2
 8008372:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008374:	4a30      	ldr	r2, [pc, #192]	@ (8008438 <HAL_GPIO_Init+0x2dc>)
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800837a:	4b2f      	ldr	r3, [pc, #188]	@ (8008438 <HAL_GPIO_Init+0x2dc>)
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	43db      	mvns	r3, r3
 8008384:	693a      	ldr	r2, [r7, #16]
 8008386:	4013      	ands	r3, r2
 8008388:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008392:	2b00      	cmp	r3, #0
 8008394:	d003      	beq.n	800839e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8008396:	693a      	ldr	r2, [r7, #16]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	4313      	orrs	r3, r2
 800839c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800839e:	4a26      	ldr	r2, [pc, #152]	@ (8008438 <HAL_GPIO_Init+0x2dc>)
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80083a4:	4b24      	ldr	r3, [pc, #144]	@ (8008438 <HAL_GPIO_Init+0x2dc>)
 80083a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	43db      	mvns	r3, r3
 80083b0:	693a      	ldr	r2, [r7, #16]
 80083b2:	4013      	ands	r3, r2
 80083b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d003      	beq.n	80083ca <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80083c2:	693a      	ldr	r2, [r7, #16]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80083ca:	4a1b      	ldr	r2, [pc, #108]	@ (8008438 <HAL_GPIO_Init+0x2dc>)
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80083d2:	4b19      	ldr	r3, [pc, #100]	@ (8008438 <HAL_GPIO_Init+0x2dc>)
 80083d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	43db      	mvns	r3, r3
 80083de:	693a      	ldr	r2, [r7, #16]
 80083e0:	4013      	ands	r3, r2
 80083e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d003      	beq.n	80083f8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80083f0:	693a      	ldr	r2, [r7, #16]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80083f8:	4a0f      	ldr	r2, [pc, #60]	@ (8008438 <HAL_GPIO_Init+0x2dc>)
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	3301      	adds	r3, #1
 8008404:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	fa22 f303 	lsr.w	r3, r2, r3
 8008410:	2b00      	cmp	r3, #0
 8008412:	f47f aeab 	bne.w	800816c <HAL_GPIO_Init+0x10>
  }
}
 8008416:	bf00      	nop
 8008418:	bf00      	nop
 800841a:	371c      	adds	r7, #28
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr
 8008424:	40010000 	.word	0x40010000
 8008428:	48000400 	.word	0x48000400
 800842c:	48000800 	.word	0x48000800
 8008430:	48000c00 	.word	0x48000c00
 8008434:	48001000 	.word	0x48001000
 8008438:	58000800 	.word	0x58000800

0800843c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8008442:	4b0a      	ldr	r3, [pc, #40]	@ (800846c <HAL_HSEM_IRQHandler+0x30>)
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8008448:	4b08      	ldr	r3, [pc, #32]	@ (800846c <HAL_HSEM_IRQHandler+0x30>)
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	43db      	mvns	r3, r3
 8008450:	4906      	ldr	r1, [pc, #24]	@ (800846c <HAL_HSEM_IRQHandler+0x30>)
 8008452:	4013      	ands	r3, r2
 8008454:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8008456:	4a05      	ldr	r2, [pc, #20]	@ (800846c <HAL_HSEM_IRQHandler+0x30>)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f807 	bl	8008470 <HAL_HSEM_FreeCallback>
}
 8008462:	bf00      	nop
 8008464:	3708      	adds	r7, #8
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	58001500 	.word	0x58001500

08008470 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d101      	bne.n	8008496 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	e08d      	b.n	80085b2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d106      	bne.n	80084b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7fa fe14 	bl	80030d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2224      	movs	r2, #36	@ 0x24
 80084b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f022 0201 	bic.w	r2, r2, #1
 80084c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	685a      	ldr	r2, [r3, #4]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80084d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	689a      	ldr	r2, [r3, #8]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80084e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d107      	bne.n	80084fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	689a      	ldr	r2, [r3, #8]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80084fa:	609a      	str	r2, [r3, #8]
 80084fc:	e006      	b.n	800850c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	689a      	ldr	r2, [r3, #8]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800850a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	2b02      	cmp	r3, #2
 8008512:	d108      	bne.n	8008526 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	685a      	ldr	r2, [r3, #4]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008522:	605a      	str	r2, [r3, #4]
 8008524:	e007      	b.n	8008536 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	685a      	ldr	r2, [r3, #4]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008534:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	6812      	ldr	r2, [r2, #0]
 8008540:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008544:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008548:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68da      	ldr	r2, [r3, #12]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008558:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	691a      	ldr	r2, [r3, #16]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	430a      	orrs	r2, r1
 8008572:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	69d9      	ldr	r1, [r3, #28]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6a1a      	ldr	r2, [r3, #32]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	430a      	orrs	r2, r1
 8008582:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f042 0201 	orr.w	r2, r2, #1
 8008592:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2220      	movs	r2, #32
 800859e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
	...

080085bc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b088      	sub	sp, #32
 80085c0:	af02      	add	r7, sp, #8
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	4608      	mov	r0, r1
 80085c6:	4611      	mov	r1, r2
 80085c8:	461a      	mov	r2, r3
 80085ca:	4603      	mov	r3, r0
 80085cc:	817b      	strh	r3, [r7, #10]
 80085ce:	460b      	mov	r3, r1
 80085d0:	813b      	strh	r3, [r7, #8]
 80085d2:	4613      	mov	r3, r2
 80085d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	2b20      	cmp	r3, #32
 80085e0:	f040 80f9 	bne.w	80087d6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80085e4:	6a3b      	ldr	r3, [r7, #32]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d002      	beq.n	80085f0 <HAL_I2C_Mem_Write+0x34>
 80085ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d105      	bne.n	80085fc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80085f6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e0ed      	b.n	80087d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008602:	2b01      	cmp	r3, #1
 8008604:	d101      	bne.n	800860a <HAL_I2C_Mem_Write+0x4e>
 8008606:	2302      	movs	r3, #2
 8008608:	e0e6      	b.n	80087d8 <HAL_I2C_Mem_Write+0x21c>
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008612:	f7fe f80d 	bl	8006630 <HAL_GetTick>
 8008616:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	2319      	movs	r3, #25
 800861e:	2201      	movs	r2, #1
 8008620:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f000 f955 	bl	80088d4 <I2C_WaitOnFlagUntilTimeout>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d001      	beq.n	8008634 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e0d1      	b.n	80087d8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2221      	movs	r2, #33	@ 0x21
 8008638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2240      	movs	r2, #64	@ 0x40
 8008640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2200      	movs	r2, #0
 8008648:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6a3a      	ldr	r2, [r7, #32]
 800864e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008654:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800865c:	88f8      	ldrh	r0, [r7, #6]
 800865e:	893a      	ldrh	r2, [r7, #8]
 8008660:	8979      	ldrh	r1, [r7, #10]
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	9301      	str	r3, [sp, #4]
 8008666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008668:	9300      	str	r3, [sp, #0]
 800866a:	4603      	mov	r3, r0
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f000 f8b9 	bl	80087e4 <I2C_RequestMemoryWrite>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d005      	beq.n	8008684 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2200      	movs	r2, #0
 800867c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e0a9      	b.n	80087d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008688:	b29b      	uxth	r3, r3
 800868a:	2bff      	cmp	r3, #255	@ 0xff
 800868c:	d90e      	bls.n	80086ac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	22ff      	movs	r2, #255	@ 0xff
 8008692:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008698:	b2da      	uxtb	r2, r3
 800869a:	8979      	ldrh	r1, [r7, #10]
 800869c:	2300      	movs	r3, #0
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f000 fad9 	bl	8008c5c <I2C_TransferConfig>
 80086aa:	e00f      	b.n	80086cc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086ba:	b2da      	uxtb	r2, r3
 80086bc:	8979      	ldrh	r1, [r7, #10]
 80086be:	2300      	movs	r3, #0
 80086c0:	9300      	str	r3, [sp, #0]
 80086c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f000 fac8 	bl	8008c5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086cc:	697a      	ldr	r2, [r7, #20]
 80086ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 f958 	bl	8008986 <I2C_WaitOnTXISFlagUntilTimeout>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d001      	beq.n	80086e0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	e07b      	b.n	80087d8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086e4:	781a      	ldrb	r2, [r3, #0]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086f0:	1c5a      	adds	r2, r3, #1
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	3b01      	subs	r3, #1
 80086fe:	b29a      	uxth	r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008708:	3b01      	subs	r3, #1
 800870a:	b29a      	uxth	r2, r3
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008714:	b29b      	uxth	r3, r3
 8008716:	2b00      	cmp	r3, #0
 8008718:	d034      	beq.n	8008784 <HAL_I2C_Mem_Write+0x1c8>
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800871e:	2b00      	cmp	r3, #0
 8008720:	d130      	bne.n	8008784 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008728:	2200      	movs	r2, #0
 800872a:	2180      	movs	r1, #128	@ 0x80
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f000 f8d1 	bl	80088d4 <I2C_WaitOnFlagUntilTimeout>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d001      	beq.n	800873c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	e04d      	b.n	80087d8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008740:	b29b      	uxth	r3, r3
 8008742:	2bff      	cmp	r3, #255	@ 0xff
 8008744:	d90e      	bls.n	8008764 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	22ff      	movs	r2, #255	@ 0xff
 800874a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008750:	b2da      	uxtb	r2, r3
 8008752:	8979      	ldrh	r1, [r7, #10]
 8008754:	2300      	movs	r3, #0
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f000 fa7d 	bl	8008c5c <I2C_TransferConfig>
 8008762:	e00f      	b.n	8008784 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008768:	b29a      	uxth	r2, r3
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008772:	b2da      	uxtb	r2, r3
 8008774:	8979      	ldrh	r1, [r7, #10]
 8008776:	2300      	movs	r3, #0
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	f000 fa6c 	bl	8008c5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008788:	b29b      	uxth	r3, r3
 800878a:	2b00      	cmp	r3, #0
 800878c:	d19e      	bne.n	80086cc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800878e:	697a      	ldr	r2, [r7, #20]
 8008790:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f000 f93e 	bl	8008a14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	e01a      	b.n	80087d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2220      	movs	r2, #32
 80087a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	6859      	ldr	r1, [r3, #4]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	4b0a      	ldr	r3, [pc, #40]	@ (80087e0 <HAL_I2C_Mem_Write+0x224>)
 80087b6:	400b      	ands	r3, r1
 80087b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2220      	movs	r2, #32
 80087be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	e000      	b.n	80087d8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80087d6:	2302      	movs	r3, #2
  }
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3718      	adds	r7, #24
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	fe00e800 	.word	0xfe00e800

080087e4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af02      	add	r7, sp, #8
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	4608      	mov	r0, r1
 80087ee:	4611      	mov	r1, r2
 80087f0:	461a      	mov	r2, r3
 80087f2:	4603      	mov	r3, r0
 80087f4:	817b      	strh	r3, [r7, #10]
 80087f6:	460b      	mov	r3, r1
 80087f8:	813b      	strh	r3, [r7, #8]
 80087fa:	4613      	mov	r3, r2
 80087fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80087fe:	88fb      	ldrh	r3, [r7, #6]
 8008800:	b2da      	uxtb	r2, r3
 8008802:	8979      	ldrh	r1, [r7, #10]
 8008804:	4b20      	ldr	r3, [pc, #128]	@ (8008888 <I2C_RequestMemoryWrite+0xa4>)
 8008806:	9300      	str	r3, [sp, #0]
 8008808:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	f000 fa25 	bl	8008c5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008812:	69fa      	ldr	r2, [r7, #28]
 8008814:	69b9      	ldr	r1, [r7, #24]
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f000 f8b5 	bl	8008986 <I2C_WaitOnTXISFlagUntilTimeout>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d001      	beq.n	8008826 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e02c      	b.n	8008880 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008826:	88fb      	ldrh	r3, [r7, #6]
 8008828:	2b01      	cmp	r3, #1
 800882a:	d105      	bne.n	8008838 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800882c:	893b      	ldrh	r3, [r7, #8]
 800882e:	b2da      	uxtb	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	629a      	str	r2, [r3, #40]	@ 0x28
 8008836:	e015      	b.n	8008864 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008838:	893b      	ldrh	r3, [r7, #8]
 800883a:	0a1b      	lsrs	r3, r3, #8
 800883c:	b29b      	uxth	r3, r3
 800883e:	b2da      	uxtb	r2, r3
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008846:	69fa      	ldr	r2, [r7, #28]
 8008848:	69b9      	ldr	r1, [r7, #24]
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f000 f89b 	bl	8008986 <I2C_WaitOnTXISFlagUntilTimeout>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d001      	beq.n	800885a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e012      	b.n	8008880 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800885a:	893b      	ldrh	r3, [r7, #8]
 800885c:	b2da      	uxtb	r2, r3
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	9300      	str	r3, [sp, #0]
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	2200      	movs	r2, #0
 800886c:	2180      	movs	r1, #128	@ 0x80
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f000 f830 	bl	80088d4 <I2C_WaitOnFlagUntilTimeout>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d001      	beq.n	800887e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e000      	b.n	8008880 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	80002000 	.word	0x80002000

0800888c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	699b      	ldr	r3, [r3, #24]
 800889a:	f003 0302 	and.w	r3, r3, #2
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d103      	bne.n	80088aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2200      	movs	r2, #0
 80088a8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	699b      	ldr	r3, [r3, #24]
 80088b0:	f003 0301 	and.w	r3, r3, #1
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d007      	beq.n	80088c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	699a      	ldr	r2, [r3, #24]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f042 0201 	orr.w	r2, r2, #1
 80088c6:	619a      	str	r2, [r3, #24]
  }
}
 80088c8:	bf00      	nop
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	603b      	str	r3, [r7, #0]
 80088e0:	4613      	mov	r3, r2
 80088e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088e4:	e03b      	b.n	800895e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	6839      	ldr	r1, [r7, #0]
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f000 f8d6 	bl	8008a9c <I2C_IsErrorOccurred>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d001      	beq.n	80088fa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e041      	b.n	800897e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008900:	d02d      	beq.n	800895e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008902:	f7fd fe95 	bl	8006630 <HAL_GetTick>
 8008906:	4602      	mov	r2, r0
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	683a      	ldr	r2, [r7, #0]
 800890e:	429a      	cmp	r2, r3
 8008910:	d302      	bcc.n	8008918 <I2C_WaitOnFlagUntilTimeout+0x44>
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d122      	bne.n	800895e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	699a      	ldr	r2, [r3, #24]
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	4013      	ands	r3, r2
 8008922:	68ba      	ldr	r2, [r7, #8]
 8008924:	429a      	cmp	r2, r3
 8008926:	bf0c      	ite	eq
 8008928:	2301      	moveq	r3, #1
 800892a:	2300      	movne	r3, #0
 800892c:	b2db      	uxtb	r3, r3
 800892e:	461a      	mov	r2, r3
 8008930:	79fb      	ldrb	r3, [r7, #7]
 8008932:	429a      	cmp	r2, r3
 8008934:	d113      	bne.n	800895e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800893a:	f043 0220 	orr.w	r2, r3, #32
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2220      	movs	r2, #32
 8008946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e00f      	b.n	800897e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	699a      	ldr	r2, [r3, #24]
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	4013      	ands	r3, r2
 8008968:	68ba      	ldr	r2, [r7, #8]
 800896a:	429a      	cmp	r2, r3
 800896c:	bf0c      	ite	eq
 800896e:	2301      	moveq	r3, #1
 8008970:	2300      	movne	r3, #0
 8008972:	b2db      	uxtb	r3, r3
 8008974:	461a      	mov	r2, r3
 8008976:	79fb      	ldrb	r3, [r7, #7]
 8008978:	429a      	cmp	r2, r3
 800897a:	d0b4      	beq.n	80088e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b084      	sub	sp, #16
 800898a:	af00      	add	r7, sp, #0
 800898c:	60f8      	str	r0, [r7, #12]
 800898e:	60b9      	str	r1, [r7, #8]
 8008990:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008992:	e033      	b.n	80089fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	68b9      	ldr	r1, [r7, #8]
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f000 f87f 	bl	8008a9c <I2C_IsErrorOccurred>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d001      	beq.n	80089a8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	e031      	b.n	8008a0c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ae:	d025      	beq.n	80089fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089b0:	f7fd fe3e 	bl	8006630 <HAL_GetTick>
 80089b4:	4602      	mov	r2, r0
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d302      	bcc.n	80089c6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d11a      	bne.n	80089fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	f003 0302 	and.w	r3, r3, #2
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d013      	beq.n	80089fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089d8:	f043 0220 	orr.w	r2, r3, #32
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2220      	movs	r2, #32
 80089e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e007      	b.n	8008a0c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	f003 0302 	and.w	r3, r3, #2
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d1c4      	bne.n	8008994 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a20:	e02f      	b.n	8008a82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	68b9      	ldr	r1, [r7, #8]
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f000 f838 	bl	8008a9c <I2C_IsErrorOccurred>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d001      	beq.n	8008a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e02d      	b.n	8008a92 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a36:	f7fd fdfb 	bl	8006630 <HAL_GetTick>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	1ad3      	subs	r3, r2, r3
 8008a40:	68ba      	ldr	r2, [r7, #8]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d302      	bcc.n	8008a4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d11a      	bne.n	8008a82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	f003 0320 	and.w	r3, r3, #32
 8008a56:	2b20      	cmp	r3, #32
 8008a58:	d013      	beq.n	8008a82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a5e:	f043 0220 	orr.w	r2, r3, #32
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2220      	movs	r2, #32
 8008a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e007      	b.n	8008a92 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	f003 0320 	and.w	r3, r3, #32
 8008a8c:	2b20      	cmp	r3, #32
 8008a8e:	d1c8      	bne.n	8008a22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
	...

08008a9c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b08a      	sub	sp, #40	@ 0x28
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	f003 0310 	and.w	r3, r3, #16
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d068      	beq.n	8008b9a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2210      	movs	r2, #16
 8008ace:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008ad0:	e049      	b.n	8008b66 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad8:	d045      	beq.n	8008b66 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008ada:	f7fd fda9 	bl	8006630 <HAL_GetTick>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d302      	bcc.n	8008af0 <I2C_IsErrorOccurred+0x54>
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d13a      	bne.n	8008b66 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008afa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008b02:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	699b      	ldr	r3, [r3, #24]
 8008b0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b12:	d121      	bne.n	8008b58 <I2C_IsErrorOccurred+0xbc>
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b1a:	d01d      	beq.n	8008b58 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008b1c:	7cfb      	ldrb	r3, [r7, #19]
 8008b1e:	2b20      	cmp	r3, #32
 8008b20:	d01a      	beq.n	8008b58 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	685a      	ldr	r2, [r3, #4]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008b30:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008b32:	f7fd fd7d 	bl	8006630 <HAL_GetTick>
 8008b36:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b38:	e00e      	b.n	8008b58 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008b3a:	f7fd fd79 	bl	8006630 <HAL_GetTick>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	1ad3      	subs	r3, r2, r3
 8008b44:	2b19      	cmp	r3, #25
 8008b46:	d907      	bls.n	8008b58 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008b48:	6a3b      	ldr	r3, [r7, #32]
 8008b4a:	f043 0320 	orr.w	r3, r3, #32
 8008b4e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008b56:	e006      	b.n	8008b66 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	f003 0320 	and.w	r3, r3, #32
 8008b62:	2b20      	cmp	r3, #32
 8008b64:	d1e9      	bne.n	8008b3a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	699b      	ldr	r3, [r3, #24]
 8008b6c:	f003 0320 	and.w	r3, r3, #32
 8008b70:	2b20      	cmp	r3, #32
 8008b72:	d003      	beq.n	8008b7c <I2C_IsErrorOccurred+0xe0>
 8008b74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d0aa      	beq.n	8008ad2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d103      	bne.n	8008b8c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2220      	movs	r2, #32
 8008b8a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008b8c:	6a3b      	ldr	r3, [r7, #32]
 8008b8e:	f043 0304 	orr.w	r3, r3, #4
 8008b92:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00b      	beq.n	8008bc4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008bac:	6a3b      	ldr	r3, [r7, #32]
 8008bae:	f043 0301 	orr.w	r3, r3, #1
 8008bb2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008bbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00b      	beq.n	8008be6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008bce:	6a3b      	ldr	r3, [r7, #32]
 8008bd0:	f043 0308 	orr.w	r3, r3, #8
 8008bd4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008bde:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00b      	beq.n	8008c08 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008bf0:	6a3b      	ldr	r3, [r7, #32]
 8008bf2:	f043 0302 	orr.w	r3, r3, #2
 8008bf6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008c08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d01c      	beq.n	8008c4a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f7ff fe3b 	bl	800888c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	6859      	ldr	r1, [r3, #4]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	4b0d      	ldr	r3, [pc, #52]	@ (8008c58 <I2C_IsErrorOccurred+0x1bc>)
 8008c22:	400b      	ands	r3, r1
 8008c24:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c2a:	6a3b      	ldr	r3, [r7, #32]
 8008c2c:	431a      	orrs	r2, r3
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2220      	movs	r2, #32
 8008c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008c4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3728      	adds	r7, #40	@ 0x28
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	fe00e800 	.word	0xfe00e800

08008c5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b087      	sub	sp, #28
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	607b      	str	r3, [r7, #4]
 8008c66:	460b      	mov	r3, r1
 8008c68:	817b      	strh	r3, [r7, #10]
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008c6e:	897b      	ldrh	r3, [r7, #10]
 8008c70:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008c74:	7a7b      	ldrb	r3, [r7, #9]
 8008c76:	041b      	lsls	r3, r3, #16
 8008c78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008c7c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008c82:	6a3b      	ldr	r3, [r7, #32]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008c8a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	685a      	ldr	r2, [r3, #4]
 8008c92:	6a3b      	ldr	r3, [r7, #32]
 8008c94:	0d5b      	lsrs	r3, r3, #21
 8008c96:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008c9a:	4b08      	ldr	r3, [pc, #32]	@ (8008cbc <I2C_TransferConfig+0x60>)
 8008c9c:	430b      	orrs	r3, r1
 8008c9e:	43db      	mvns	r3, r3
 8008ca0:	ea02 0103 	and.w	r1, r2, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	697a      	ldr	r2, [r7, #20]
 8008caa:	430a      	orrs	r2, r1
 8008cac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008cae:	bf00      	nop
 8008cb0:	371c      	adds	r7, #28
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	03ff63ff 	.word	0x03ff63ff

08008cc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	2b20      	cmp	r3, #32
 8008cd4:	d138      	bne.n	8008d48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d101      	bne.n	8008ce4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	e032      	b.n	8008d4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2224      	movs	r2, #36	@ 0x24
 8008cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f022 0201 	bic.w	r2, r2, #1
 8008d02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008d12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	6819      	ldr	r1, [r3, #0]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	683a      	ldr	r2, [r7, #0]
 8008d20:	430a      	orrs	r2, r1
 8008d22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f042 0201 	orr.w	r2, r2, #1
 8008d32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2220      	movs	r2, #32
 8008d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008d44:	2300      	movs	r3, #0
 8008d46:	e000      	b.n	8008d4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008d48:	2302      	movs	r3, #2
  }
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	370c      	adds	r7, #12
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008d56:	b480      	push	{r7}
 8008d58:	b085      	sub	sp, #20
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	2b20      	cmp	r3, #32
 8008d6a:	d139      	bne.n	8008de0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d101      	bne.n	8008d7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008d76:	2302      	movs	r3, #2
 8008d78:	e033      	b.n	8008de2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2224      	movs	r2, #36	@ 0x24
 8008d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f022 0201 	bic.w	r2, r2, #1
 8008d98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008da8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	021b      	lsls	r3, r3, #8
 8008dae:	68fa      	ldr	r2, [r7, #12]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f042 0201 	orr.w	r2, r2, #1
 8008dca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2220      	movs	r2, #32
 8008dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	e000      	b.n	8008de2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008de0:	2302      	movs	r3, #2
  }
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3714      	adds	r7, #20
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
	...

08008df0 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d01e      	beq.n	8008e40 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8008e02:	4b13      	ldr	r3, [pc, #76]	@ (8008e50 <HAL_IPCC_Init+0x60>)
 8008e04:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d102      	bne.n	8008e18 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f7fa f9a8 	bl	8003168 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8008e18:	68b8      	ldr	r0, [r7, #8]
 8008e1a:	f000 f85b 	bl	8008ed4 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f82c 	bl	8008e88 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8008e3e:	e001      	b.n	8008e44 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8008e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	58000c00 	.word	0x58000c00

08008e54 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	4613      	mov	r3, r2
 8008e60:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8008e62:	bf00      	nop
 8008e64:	3714      	adds	r7, #20
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8008e6e:	b480      	push	{r7}
 8008e70:	b085      	sub	sp, #20
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	60f8      	str	r0, [r7, #12]
 8008e76:	60b9      	str	r1, [r7, #8]
 8008e78:	4613      	mov	r3, r2
 8008e7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8008e7c:	bf00      	nop
 8008e7e:	3714      	adds	r7, #20
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8008e90:	2300      	movs	r3, #0
 8008e92:	60fb      	str	r3, [r7, #12]
 8008e94:	e00f      	b.n	8008eb6 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	4413      	add	r3, r2
 8008e9e:	4a0b      	ldr	r2, [pc, #44]	@ (8008ecc <IPCC_SetDefaultCallbacks+0x44>)
 8008ea0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	3306      	adds	r3, #6
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	4413      	add	r3, r2
 8008eac:	4a08      	ldr	r2, [pc, #32]	@ (8008ed0 <IPCC_SetDefaultCallbacks+0x48>)
 8008eae:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	60fb      	str	r3, [r7, #12]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2b05      	cmp	r3, #5
 8008eba:	d9ec      	bls.n	8008e96 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8008ebc:	bf00      	nop
 8008ebe:	bf00      	nop
 8008ec0:	3714      	adds	r7, #20
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	08008e55 	.word	0x08008e55
 8008ed0:	08008e6f 	.word	0x08008e6f

08008ed4 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8008ee8:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	223f      	movs	r2, #63	@ 0x3f
 8008eee:	609a      	str	r2, [r3, #8]
}
 8008ef0:	bf00      	nop
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008efc:	b480      	push	{r7}
 8008efe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f00:	4b05      	ldr	r3, [pc, #20]	@ (8008f18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a04      	ldr	r2, [pc, #16]	@ (8008f18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f0a:	6013      	str	r3, [r2, #0]
}
 8008f0c:	bf00      	nop
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	58000400 	.word	0x58000400

08008f1c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8008f20:	4b04      	ldr	r3, [pc, #16]	@ (8008f34 <HAL_PWREx_GetVoltageRange+0x18>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	58000400 	.word	0x58000400

08008f38 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8008f38:	b480      	push	{r7}
 8008f3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8008f3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008f46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f4a:	d101      	bne.n	8008f50 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e000      	b.n	8008f52 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <LL_RCC_HSE_Enable>:
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8008f60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008f6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f6e:	6013      	str	r3, [r2, #0]
}
 8008f70:	bf00      	nop
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr

08008f7a <LL_RCC_HSE_Disable>:
{
 8008f7a:	b480      	push	{r7}
 8008f7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8008f7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008f88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f8c:	6013      	str	r3, [r2, #0]
}
 8008f8e:	bf00      	nop
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <LL_RCC_HSE_IsReady>:
{
 8008f98:	b480      	push	{r7}
 8008f9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8008f9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008faa:	d101      	bne.n	8008fb0 <LL_RCC_HSE_IsReady+0x18>
 8008fac:	2301      	movs	r3, #1
 8008fae:	e000      	b.n	8008fb2 <LL_RCC_HSE_IsReady+0x1a>
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <LL_RCC_HSI_Enable>:
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008fca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008fce:	6013      	str	r3, [r2, #0]
}
 8008fd0:	bf00      	nop
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <LL_RCC_HSI_Disable>:
{
 8008fda:	b480      	push	{r7}
 8008fdc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8008fde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008fe8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008fec:	6013      	str	r3, [r2, #0]
}
 8008fee:	bf00      	nop
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <LL_RCC_HSI_IsReady>:
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008ffc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800900a:	d101      	bne.n	8009010 <LL_RCC_HSI_IsReady+0x18>
 800900c:	2301      	movs	r3, #1
 800900e:	e000      	b.n	8009012 <LL_RCC_HSI_IsReady+0x1a>
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <LL_RCC_HSI_SetCalibTrimming>:
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8009024:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	061b      	lsls	r3, r3, #24
 8009032:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009036:	4313      	orrs	r3, r2
 8009038:	604b      	str	r3, [r1, #4]
}
 800903a:	bf00      	nop
 800903c:	370c      	adds	r7, #12
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr

08009046 <LL_RCC_HSI48_Enable>:
{
 8009046:	b480      	push	{r7}
 8009048:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800904a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800904e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009052:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009056:	f043 0301 	orr.w	r3, r3, #1
 800905a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800905e:	bf00      	nop
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <LL_RCC_HSI48_Disable>:
{
 8009068:	b480      	push	{r7}
 800906a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800906c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009070:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009074:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009078:	f023 0301 	bic.w	r3, r3, #1
 800907c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8009080:	bf00      	nop
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr

0800908a <LL_RCC_HSI48_IsReady>:
{
 800908a:	b480      	push	{r7}
 800908c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800908e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009092:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009096:	f003 0302 	and.w	r3, r3, #2
 800909a:	2b02      	cmp	r3, #2
 800909c:	d101      	bne.n	80090a2 <LL_RCC_HSI48_IsReady+0x18>
 800909e:	2301      	movs	r3, #1
 80090a0:	e000      	b.n	80090a4 <LL_RCC_HSI48_IsReady+0x1a>
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr

080090ae <LL_RCC_LSE_Enable>:
{
 80090ae:	b480      	push	{r7}
 80090b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80090b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80090b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80090be:	f043 0301 	orr.w	r3, r3, #1
 80090c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80090c6:	bf00      	nop
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <LL_RCC_LSE_Disable>:
{
 80090d0:	b480      	push	{r7}
 80090d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80090d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80090d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80090e0:	f023 0301 	bic.w	r3, r3, #1
 80090e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80090e8:	bf00      	nop
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr

080090f2 <LL_RCC_LSE_EnableBypass>:
{
 80090f2:	b480      	push	{r7}
 80090f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80090f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80090fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009102:	f043 0304 	orr.w	r3, r3, #4
 8009106:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800910a:	bf00      	nop
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <LL_RCC_LSE_DisableBypass>:
{
 8009114:	b480      	push	{r7}
 8009116:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009118:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800911c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009120:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009124:	f023 0304 	bic.w	r3, r3, #4
 8009128:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800912c:	bf00      	nop
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr

08009136 <LL_RCC_LSE_IsReady>:
{
 8009136:	b480      	push	{r7}
 8009138:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800913a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800913e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009142:	f003 0302 	and.w	r3, r3, #2
 8009146:	2b02      	cmp	r3, #2
 8009148:	d101      	bne.n	800914e <LL_RCC_LSE_IsReady+0x18>
 800914a:	2301      	movs	r3, #1
 800914c:	e000      	b.n	8009150 <LL_RCC_LSE_IsReady+0x1a>
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr

0800915a <LL_RCC_LSI1_Enable>:
{
 800915a:	b480      	push	{r7}
 800915c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800915e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009162:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009166:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800916a:	f043 0301 	orr.w	r3, r3, #1
 800916e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8009172:	bf00      	nop
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <LL_RCC_LSI1_Disable>:
{
 800917c:	b480      	push	{r7}
 800917e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8009180:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009184:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009188:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800918c:	f023 0301 	bic.w	r3, r3, #1
 8009190:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8009194:	bf00      	nop
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr

0800919e <LL_RCC_LSI1_IsReady>:
{
 800919e:	b480      	push	{r7}
 80091a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80091a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80091a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80091aa:	f003 0302 	and.w	r3, r3, #2
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	d101      	bne.n	80091b6 <LL_RCC_LSI1_IsReady+0x18>
 80091b2:	2301      	movs	r3, #1
 80091b4:	e000      	b.n	80091b8 <LL_RCC_LSI1_IsReady+0x1a>
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr

080091c2 <LL_RCC_LSI2_Enable>:
{
 80091c2:	b480      	push	{r7}
 80091c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80091c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80091ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80091ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80091d2:	f043 0304 	orr.w	r3, r3, #4
 80091d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80091da:	bf00      	nop
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <LL_RCC_LSI2_Disable>:
{
 80091e4:	b480      	push	{r7}
 80091e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80091e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80091ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80091f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80091f4:	f023 0304 	bic.w	r3, r3, #4
 80091f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80091fc:	bf00      	nop
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr

08009206 <LL_RCC_LSI2_IsReady>:
{
 8009206:	b480      	push	{r7}
 8009208:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800920a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800920e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009212:	f003 0308 	and.w	r3, r3, #8
 8009216:	2b08      	cmp	r3, #8
 8009218:	d101      	bne.n	800921e <LL_RCC_LSI2_IsReady+0x18>
 800921a:	2301      	movs	r3, #1
 800921c:	e000      	b.n	8009220 <LL_RCC_LSI2_IsReady+0x1a>
 800921e:	2300      	movs	r3, #0
}
 8009220:	4618      	mov	r0, r3
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr

0800922a <LL_RCC_LSI2_SetTrimming>:
{
 800922a:	b480      	push	{r7}
 800922c:	b083      	sub	sp, #12
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8009232:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009236:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800923a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	021b      	lsls	r3, r3, #8
 8009242:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009246:	4313      	orrs	r3, r2
 8009248:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <LL_RCC_MSI_Enable>:
{
 8009258:	b480      	push	{r7}
 800925a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800925c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009266:	f043 0301 	orr.w	r3, r3, #1
 800926a:	6013      	str	r3, [r2, #0]
}
 800926c:	bf00      	nop
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <LL_RCC_MSI_Disable>:
{
 8009276:	b480      	push	{r7}
 8009278:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800927a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009284:	f023 0301 	bic.w	r3, r3, #1
 8009288:	6013      	str	r3, [r2, #0]
}
 800928a:	bf00      	nop
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <LL_RCC_MSI_IsReady>:
{
 8009294:	b480      	push	{r7}
 8009296:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8009298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f003 0302 	and.w	r3, r3, #2
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	d101      	bne.n	80092aa <LL_RCC_MSI_IsReady+0x16>
 80092a6:	2301      	movs	r3, #1
 80092a8:	e000      	b.n	80092ac <LL_RCC_MSI_IsReady+0x18>
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr

080092b6 <LL_RCC_MSI_SetRange>:
{
 80092b6:	b480      	push	{r7}
 80092b8:	b083      	sub	sp, #12
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80092be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80092c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	600b      	str	r3, [r1, #0]
}
 80092d2:	bf00      	nop
 80092d4:	370c      	adds	r7, #12
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr

080092de <LL_RCC_MSI_GetRange>:
{
 80092de:	b480      	push	{r7}
 80092e0:	b083      	sub	sp, #12
 80092e2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80092e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80092ee:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2bb0      	cmp	r3, #176	@ 0xb0
 80092f4:	d901      	bls.n	80092fa <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80092f6:	23b0      	movs	r3, #176	@ 0xb0
 80092f8:	607b      	str	r3, [r7, #4]
  return msiRange;
 80092fa:	687b      	ldr	r3, [r7, #4]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <LL_RCC_MSI_SetCalibTrimming>:
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8009310:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	021b      	lsls	r3, r3, #8
 800931e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009322:	4313      	orrs	r3, r2
 8009324:	604b      	str	r3, [r1, #4]
}
 8009326:	bf00      	nop
 8009328:	370c      	adds	r7, #12
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr

08009332 <LL_RCC_SetSysClkSource>:
{
 8009332:	b480      	push	{r7}
 8009334:	b083      	sub	sp, #12
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800933a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	f023 0203 	bic.w	r2, r3, #3
 8009344:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4313      	orrs	r3, r2
 800934c:	608b      	str	r3, [r1, #8]
}
 800934e:	bf00      	nop
 8009350:	370c      	adds	r7, #12
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr

0800935a <LL_RCC_GetSysClkSource>:
{
 800935a:	b480      	push	{r7}
 800935c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800935e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	f003 030c 	and.w	r3, r3, #12
}
 8009368:	4618      	mov	r0, r3
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr

08009372 <LL_RCC_SetAHBPrescaler>:
{
 8009372:	b480      	push	{r7}
 8009374:	b083      	sub	sp, #12
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800937a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009384:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4313      	orrs	r3, r2
 800938c:	608b      	str	r3, [r1, #8]
}
 800938e:	bf00      	nop
 8009390:	370c      	adds	r7, #12
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr

0800939a <LL_C2_RCC_SetAHBPrescaler>:
{
 800939a:	b480      	push	{r7}
 800939c:	b083      	sub	sp, #12
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80093a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80093a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80093aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80093ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4313      	orrs	r3, r2
 80093b6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80093ba:	bf00      	nop
 80093bc:	370c      	adds	r7, #12
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr

080093c6 <LL_RCC_SetAHB4Prescaler>:
{
 80093c6:	b480      	push	{r7}
 80093c8:	b083      	sub	sp, #12
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80093ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80093d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80093d6:	f023 020f 	bic.w	r2, r3, #15
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	091b      	lsrs	r3, r3, #4
 80093de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80093e2:	4313      	orrs	r3, r2
 80093e4:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80093e8:	bf00      	nop
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <LL_RCC_SetAPB1Prescaler>:
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80093fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009406:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4313      	orrs	r3, r2
 800940e:	608b      	str	r3, [r1, #8]
}
 8009410:	bf00      	nop
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <LL_RCC_SetAPB2Prescaler>:
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8009424:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800942e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4313      	orrs	r3, r2
 8009436:	608b      	str	r3, [r1, #8]
}
 8009438:	bf00      	nop
 800943a:	370c      	adds	r7, #12
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <LL_RCC_GetAHBPrescaler>:
{
 8009444:	b480      	push	{r7}
 8009446:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8009448:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8009452:	4618      	mov	r0, r3
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <LL_C2_RCC_GetAHBPrescaler>:
{
 800945c:	b480      	push	{r7}
 800945e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8009460:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009464:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8009468:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800946c:	4618      	mov	r0, r3
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr

08009476 <LL_RCC_GetAHB4Prescaler>:
{
 8009476:	b480      	push	{r7}
 8009478:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800947a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800947e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8009482:	011b      	lsls	r3, r3, #4
 8009484:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8009488:	4618      	mov	r0, r3
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <LL_RCC_GetAPB1Prescaler>:
{
 8009492:	b480      	push	{r7}
 8009494:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8009496:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr

080094aa <LL_RCC_GetAPB2Prescaler>:
{
 80094aa:	b480      	push	{r7}
 80094ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80094ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr

080094c2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80094c2:	b480      	push	{r7}
 80094c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80094c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80094d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80094d4:	6013      	str	r3, [r2, #0]
}
 80094d6:	bf00      	nop
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80094e0:	b480      	push	{r7}
 80094e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80094e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80094ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80094f2:	6013      	str	r3, [r2, #0]
}
 80094f4:	bf00      	nop
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr

080094fe <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80094fe:	b480      	push	{r7}
 8009500:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8009502:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800950c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009510:	d101      	bne.n	8009516 <LL_RCC_PLL_IsReady+0x18>
 8009512:	2301      	movs	r3, #1
 8009514:	e000      	b.n	8009518 <LL_RCC_PLL_IsReady+0x1a>
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr

08009522 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8009522:	b480      	push	{r7}
 8009524:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8009526:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	0a1b      	lsrs	r3, r3, #8
 800952e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8009532:	4618      	mov	r0, r3
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800953c:	b480      	push	{r7}
 800953e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8009540:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800954a:	4618      	mov	r0, r3
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8009554:	b480      	push	{r7}
 8009556:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8009558:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8009562:	4618      	mov	r0, r3
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800956c:	b480      	push	{r7}
 800956e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8009570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	f003 0303 	and.w	r3, r3, #3
}
 800957a:	4618      	mov	r0, r3
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8009584:	b480      	push	{r7}
 8009586:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8009588:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009596:	d101      	bne.n	800959c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8009598:	2301      	movs	r3, #1
 800959a:	e000      	b.n	800959e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80095a8:	b480      	push	{r7}
 80095aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80095ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80095b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80095b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095bc:	d101      	bne.n	80095c2 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80095be:	2301      	movs	r3, #1
 80095c0:	e000      	b.n	80095c4 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr

080095ce <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80095ce:	b480      	push	{r7}
 80095d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80095d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80095d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80095da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80095de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095e2:	d101      	bne.n	80095e8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80095e4:	2301      	movs	r3, #1
 80095e6:	e000      	b.n	80095ea <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80095e8:	2300      	movs	r3, #0
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80095f4:	b480      	push	{r7}
 80095f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80095f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009602:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009606:	d101      	bne.n	800960c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8009608:	2301      	movs	r3, #1
 800960a:	e000      	b.n	800960e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8009618:	b480      	push	{r7}
 800961a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800961c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009626:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800962a:	d101      	bne.n	8009630 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800962c:	2301      	movs	r3, #1
 800962e:	e000      	b.n	8009632 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800963c:	b590      	push	{r4, r7, lr}
 800963e:	b08d      	sub	sp, #52	@ 0x34
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d101      	bne.n	800964e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	e363      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f003 0320 	and.w	r3, r3, #32
 8009656:	2b00      	cmp	r3, #0
 8009658:	f000 808d 	beq.w	8009776 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800965c:	f7ff fe7d 	bl	800935a <LL_RCC_GetSysClkSource>
 8009660:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009662:	f7ff ff83 	bl	800956c <LL_RCC_PLL_GetMainSource>
 8009666:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800966a:	2b00      	cmp	r3, #0
 800966c:	d005      	beq.n	800967a <HAL_RCC_OscConfig+0x3e>
 800966e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009670:	2b0c      	cmp	r3, #12
 8009672:	d147      	bne.n	8009704 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8009674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009676:	2b01      	cmp	r3, #1
 8009678:	d144      	bne.n	8009704 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	69db      	ldr	r3, [r3, #28]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d101      	bne.n	8009686 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	e347      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800968a:	f7ff fe28 	bl	80092de <LL_RCC_MSI_GetRange>
 800968e:	4603      	mov	r3, r0
 8009690:	429c      	cmp	r4, r3
 8009692:	d914      	bls.n	80096be <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009698:	4618      	mov	r0, r3
 800969a:	f000 fd4b 	bl	800a134 <RCC_SetFlashLatencyFromMSIRange>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	e336      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7ff fe02 	bl	80092b6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a1b      	ldr	r3, [r3, #32]
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7ff fe26 	bl	8009308 <LL_RCC_MSI_SetCalibTrimming>
 80096bc:	e013      	b.n	80096e6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7ff fdf7 	bl	80092b6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6a1b      	ldr	r3, [r3, #32]
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7ff fe1b 	bl	8009308 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 fd2c 	bl	800a134 <RCC_SetFlashLatencyFromMSIRange>
 80096dc:	4603      	mov	r3, r0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d001      	beq.n	80096e6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e317      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80096e6:	f000 fcc9 	bl	800a07c <HAL_RCC_GetHCLKFreq>
 80096ea:	4603      	mov	r3, r0
 80096ec:	4aa4      	ldr	r2, [pc, #656]	@ (8009980 <HAL_RCC_OscConfig+0x344>)
 80096ee:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80096f0:	4ba4      	ldr	r3, [pc, #656]	@ (8009984 <HAL_RCC_OscConfig+0x348>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7f9 fdf3 	bl	80032e0 <HAL_InitTick>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d039      	beq.n	8009774 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e308      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	69db      	ldr	r3, [r3, #28]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d01e      	beq.n	800974a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800970c:	f7ff fda4 	bl	8009258 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009710:	f7fc ff8e 	bl	8006630 <HAL_GetTick>
 8009714:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8009716:	e008      	b.n	800972a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009718:	f7fc ff8a 	bl	8006630 <HAL_GetTick>
 800971c:	4602      	mov	r2, r0
 800971e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009720:	1ad3      	subs	r3, r2, r3
 8009722:	2b02      	cmp	r3, #2
 8009724:	d901      	bls.n	800972a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8009726:	2303      	movs	r3, #3
 8009728:	e2f5      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800972a:	f7ff fdb3 	bl	8009294 <LL_RCC_MSI_IsReady>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d0f1      	beq.n	8009718 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009738:	4618      	mov	r0, r3
 800973a:	f7ff fdbc 	bl	80092b6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a1b      	ldr	r3, [r3, #32]
 8009742:	4618      	mov	r0, r3
 8009744:	f7ff fde0 	bl	8009308 <LL_RCC_MSI_SetCalibTrimming>
 8009748:	e015      	b.n	8009776 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800974a:	f7ff fd94 	bl	8009276 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800974e:	f7fc ff6f 	bl	8006630 <HAL_GetTick>
 8009752:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8009754:	e008      	b.n	8009768 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009756:	f7fc ff6b 	bl	8006630 <HAL_GetTick>
 800975a:	4602      	mov	r2, r0
 800975c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975e:	1ad3      	subs	r3, r2, r3
 8009760:	2b02      	cmp	r3, #2
 8009762:	d901      	bls.n	8009768 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8009764:	2303      	movs	r3, #3
 8009766:	e2d6      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8009768:	f7ff fd94 	bl	8009294 <LL_RCC_MSI_IsReady>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1f1      	bne.n	8009756 <HAL_RCC_OscConfig+0x11a>
 8009772:	e000      	b.n	8009776 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009774:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f003 0301 	and.w	r3, r3, #1
 800977e:	2b00      	cmp	r3, #0
 8009780:	d047      	beq.n	8009812 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009782:	f7ff fdea 	bl	800935a <LL_RCC_GetSysClkSource>
 8009786:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009788:	f7ff fef0 	bl	800956c <LL_RCC_PLL_GetMainSource>
 800978c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800978e:	6a3b      	ldr	r3, [r7, #32]
 8009790:	2b08      	cmp	r3, #8
 8009792:	d005      	beq.n	80097a0 <HAL_RCC_OscConfig+0x164>
 8009794:	6a3b      	ldr	r3, [r7, #32]
 8009796:	2b0c      	cmp	r3, #12
 8009798:	d108      	bne.n	80097ac <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	2b03      	cmp	r3, #3
 800979e:	d105      	bne.n	80097ac <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d134      	bne.n	8009812 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e2b4      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097b4:	d102      	bne.n	80097bc <HAL_RCC_OscConfig+0x180>
 80097b6:	f7ff fbd1 	bl	8008f5c <LL_RCC_HSE_Enable>
 80097ba:	e001      	b.n	80097c0 <HAL_RCC_OscConfig+0x184>
 80097bc:	f7ff fbdd 	bl	8008f7a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d012      	beq.n	80097ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097c8:	f7fc ff32 	bl	8006630 <HAL_GetTick>
 80097cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80097ce:	e008      	b.n	80097e2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80097d0:	f7fc ff2e 	bl	8006630 <HAL_GetTick>
 80097d4:	4602      	mov	r2, r0
 80097d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d8:	1ad3      	subs	r3, r2, r3
 80097da:	2b64      	cmp	r3, #100	@ 0x64
 80097dc:	d901      	bls.n	80097e2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80097de:	2303      	movs	r3, #3
 80097e0:	e299      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80097e2:	f7ff fbd9 	bl	8008f98 <LL_RCC_HSE_IsReady>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d0f1      	beq.n	80097d0 <HAL_RCC_OscConfig+0x194>
 80097ec:	e011      	b.n	8009812 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097ee:	f7fc ff1f 	bl	8006630 <HAL_GetTick>
 80097f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80097f4:	e008      	b.n	8009808 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80097f6:	f7fc ff1b 	bl	8006630 <HAL_GetTick>
 80097fa:	4602      	mov	r2, r0
 80097fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097fe:	1ad3      	subs	r3, r2, r3
 8009800:	2b64      	cmp	r3, #100	@ 0x64
 8009802:	d901      	bls.n	8009808 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8009804:	2303      	movs	r3, #3
 8009806:	e286      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8009808:	f7ff fbc6 	bl	8008f98 <LL_RCC_HSE_IsReady>
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1f1      	bne.n	80097f6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f003 0302 	and.w	r3, r3, #2
 800981a:	2b00      	cmp	r3, #0
 800981c:	d04c      	beq.n	80098b8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800981e:	f7ff fd9c 	bl	800935a <LL_RCC_GetSysClkSource>
 8009822:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009824:	f7ff fea2 	bl	800956c <LL_RCC_PLL_GetMainSource>
 8009828:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	2b04      	cmp	r3, #4
 800982e:	d005      	beq.n	800983c <HAL_RCC_OscConfig+0x200>
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	2b0c      	cmp	r3, #12
 8009834:	d10e      	bne.n	8009854 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	2b02      	cmp	r3, #2
 800983a:	d10b      	bne.n	8009854 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d101      	bne.n	8009848 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	e266      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	4618      	mov	r0, r3
 800984e:	f7ff fbe5 	bl	800901c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009852:	e031      	b.n	80098b8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d019      	beq.n	8009890 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800985c:	f7ff fbae 	bl	8008fbc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009860:	f7fc fee6 	bl	8006630 <HAL_GetTick>
 8009864:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8009866:	e008      	b.n	800987a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009868:	f7fc fee2 	bl	8006630 <HAL_GetTick>
 800986c:	4602      	mov	r2, r0
 800986e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009870:	1ad3      	subs	r3, r2, r3
 8009872:	2b02      	cmp	r3, #2
 8009874:	d901      	bls.n	800987a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009876:	2303      	movs	r3, #3
 8009878:	e24d      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800987a:	f7ff fbbd 	bl	8008ff8 <LL_RCC_HSI_IsReady>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d0f1      	beq.n	8009868 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	691b      	ldr	r3, [r3, #16]
 8009888:	4618      	mov	r0, r3
 800988a:	f7ff fbc7 	bl	800901c <LL_RCC_HSI_SetCalibTrimming>
 800988e:	e013      	b.n	80098b8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009890:	f7ff fba3 	bl	8008fda <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009894:	f7fc fecc 	bl	8006630 <HAL_GetTick>
 8009898:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800989a:	e008      	b.n	80098ae <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800989c:	f7fc fec8 	bl	8006630 <HAL_GetTick>
 80098a0:	4602      	mov	r2, r0
 80098a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a4:	1ad3      	subs	r3, r2, r3
 80098a6:	2b02      	cmp	r3, #2
 80098a8:	d901      	bls.n	80098ae <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80098aa:	2303      	movs	r3, #3
 80098ac:	e233      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80098ae:	f7ff fba3 	bl	8008ff8 <LL_RCC_HSI_IsReady>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d1f1      	bne.n	800989c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f003 0308 	and.w	r3, r3, #8
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d106      	bne.n	80098d2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f000 80a3 	beq.w	8009a18 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	695b      	ldr	r3, [r3, #20]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d076      	beq.n	80099c8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f003 0310 	and.w	r3, r3, #16
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d046      	beq.n	8009974 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80098e6:	f7ff fc5a 	bl	800919e <LL_RCC_LSI1_IsReady>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d113      	bne.n	8009918 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80098f0:	f7ff fc33 	bl	800915a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80098f4:	f7fc fe9c 	bl	8006630 <HAL_GetTick>
 80098f8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80098fa:	e008      	b.n	800990e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80098fc:	f7fc fe98 	bl	8006630 <HAL_GetTick>
 8009900:	4602      	mov	r2, r0
 8009902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009904:	1ad3      	subs	r3, r2, r3
 8009906:	2b02      	cmp	r3, #2
 8009908:	d901      	bls.n	800990e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800990a:	2303      	movs	r3, #3
 800990c:	e203      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800990e:	f7ff fc46 	bl	800919e <LL_RCC_LSI1_IsReady>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d0f1      	beq.n	80098fc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8009918:	f7ff fc53 	bl	80091c2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800991c:	f7fc fe88 	bl	8006630 <HAL_GetTick>
 8009920:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8009922:	e008      	b.n	8009936 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009924:	f7fc fe84 	bl	8006630 <HAL_GetTick>
 8009928:	4602      	mov	r2, r0
 800992a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800992c:	1ad3      	subs	r3, r2, r3
 800992e:	2b03      	cmp	r3, #3
 8009930:	d901      	bls.n	8009936 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8009932:	2303      	movs	r3, #3
 8009934:	e1ef      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8009936:	f7ff fc66 	bl	8009206 <LL_RCC_LSI2_IsReady>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d0f1      	beq.n	8009924 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	699b      	ldr	r3, [r3, #24]
 8009944:	4618      	mov	r0, r3
 8009946:	f7ff fc70 	bl	800922a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800994a:	f7ff fc17 	bl	800917c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800994e:	f7fc fe6f 	bl	8006630 <HAL_GetTick>
 8009952:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8009954:	e008      	b.n	8009968 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009956:	f7fc fe6b 	bl	8006630 <HAL_GetTick>
 800995a:	4602      	mov	r2, r0
 800995c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800995e:	1ad3      	subs	r3, r2, r3
 8009960:	2b02      	cmp	r3, #2
 8009962:	d901      	bls.n	8009968 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8009964:	2303      	movs	r3, #3
 8009966:	e1d6      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8009968:	f7ff fc19 	bl	800919e <LL_RCC_LSI1_IsReady>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d1f1      	bne.n	8009956 <HAL_RCC_OscConfig+0x31a>
 8009972:	e051      	b.n	8009a18 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8009974:	f7ff fbf1 	bl	800915a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009978:	f7fc fe5a 	bl	8006630 <HAL_GetTick>
 800997c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800997e:	e00c      	b.n	800999a <HAL_RCC_OscConfig+0x35e>
 8009980:	20000200 	.word	0x20000200
 8009984:	20000204 	.word	0x20000204
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009988:	f7fc fe52 	bl	8006630 <HAL_GetTick>
 800998c:	4602      	mov	r2, r0
 800998e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	2b02      	cmp	r3, #2
 8009994:	d901      	bls.n	800999a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8009996:	2303      	movs	r3, #3
 8009998:	e1bd      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800999a:	f7ff fc00 	bl	800919e <LL_RCC_LSI1_IsReady>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d0f1      	beq.n	8009988 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80099a4:	f7ff fc1e 	bl	80091e4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80099a8:	e008      	b.n	80099bc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80099aa:	f7fc fe41 	bl	8006630 <HAL_GetTick>
 80099ae:	4602      	mov	r2, r0
 80099b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b2:	1ad3      	subs	r3, r2, r3
 80099b4:	2b03      	cmp	r3, #3
 80099b6:	d901      	bls.n	80099bc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80099b8:	2303      	movs	r3, #3
 80099ba:	e1ac      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80099bc:	f7ff fc23 	bl	8009206 <LL_RCC_LSI2_IsReady>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d1f1      	bne.n	80099aa <HAL_RCC_OscConfig+0x36e>
 80099c6:	e027      	b.n	8009a18 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80099c8:	f7ff fc0c 	bl	80091e4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099cc:	f7fc fe30 	bl	8006630 <HAL_GetTick>
 80099d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80099d2:	e008      	b.n	80099e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80099d4:	f7fc fe2c 	bl	8006630 <HAL_GetTick>
 80099d8:	4602      	mov	r2, r0
 80099da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099dc:	1ad3      	subs	r3, r2, r3
 80099de:	2b03      	cmp	r3, #3
 80099e0:	d901      	bls.n	80099e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80099e2:	2303      	movs	r3, #3
 80099e4:	e197      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80099e6:	f7ff fc0e 	bl	8009206 <LL_RCC_LSI2_IsReady>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d1f1      	bne.n	80099d4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80099f0:	f7ff fbc4 	bl	800917c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099f4:	f7fc fe1c 	bl	8006630 <HAL_GetTick>
 80099f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80099fa:	e008      	b.n	8009a0e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80099fc:	f7fc fe18 	bl	8006630 <HAL_GetTick>
 8009a00:	4602      	mov	r2, r0
 8009a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a04:	1ad3      	subs	r3, r2, r3
 8009a06:	2b02      	cmp	r3, #2
 8009a08:	d901      	bls.n	8009a0e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	e183      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8009a0e:	f7ff fbc6 	bl	800919e <LL_RCC_LSI1_IsReady>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1f1      	bne.n	80099fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 0304 	and.w	r3, r3, #4
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d05b      	beq.n	8009adc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009a24:	4ba7      	ldr	r3, [pc, #668]	@ (8009cc4 <HAL_RCC_OscConfig+0x688>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d114      	bne.n	8009a5a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8009a30:	f7ff fa64 	bl	8008efc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009a34:	f7fc fdfc 	bl	8006630 <HAL_GetTick>
 8009a38:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009a3a:	e008      	b.n	8009a4e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a3c:	f7fc fdf8 	bl	8006630 <HAL_GetTick>
 8009a40:	4602      	mov	r2, r0
 8009a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a44:	1ad3      	subs	r3, r2, r3
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	d901      	bls.n	8009a4e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8009a4a:	2303      	movs	r3, #3
 8009a4c:	e163      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009a4e:	4b9d      	ldr	r3, [pc, #628]	@ (8009cc4 <HAL_RCC_OscConfig+0x688>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d0f0      	beq.n	8009a3c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d102      	bne.n	8009a68 <HAL_RCC_OscConfig+0x42c>
 8009a62:	f7ff fb24 	bl	80090ae <LL_RCC_LSE_Enable>
 8009a66:	e00c      	b.n	8009a82 <HAL_RCC_OscConfig+0x446>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	2b05      	cmp	r3, #5
 8009a6e:	d104      	bne.n	8009a7a <HAL_RCC_OscConfig+0x43e>
 8009a70:	f7ff fb3f 	bl	80090f2 <LL_RCC_LSE_EnableBypass>
 8009a74:	f7ff fb1b 	bl	80090ae <LL_RCC_LSE_Enable>
 8009a78:	e003      	b.n	8009a82 <HAL_RCC_OscConfig+0x446>
 8009a7a:	f7ff fb29 	bl	80090d0 <LL_RCC_LSE_Disable>
 8009a7e:	f7ff fb49 	bl	8009114 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d014      	beq.n	8009ab4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a8a:	f7fc fdd1 	bl	8006630 <HAL_GetTick>
 8009a8e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8009a90:	e00a      	b.n	8009aa8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a92:	f7fc fdcd 	bl	8006630 <HAL_GetTick>
 8009a96:	4602      	mov	r2, r0
 8009a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d901      	bls.n	8009aa8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8009aa4:	2303      	movs	r3, #3
 8009aa6:	e136      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8009aa8:	f7ff fb45 	bl	8009136 <LL_RCC_LSE_IsReady>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d0ef      	beq.n	8009a92 <HAL_RCC_OscConfig+0x456>
 8009ab2:	e013      	b.n	8009adc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ab4:	f7fc fdbc 	bl	8006630 <HAL_GetTick>
 8009ab8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8009aba:	e00a      	b.n	8009ad2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009abc:	f7fc fdb8 	bl	8006630 <HAL_GetTick>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d901      	bls.n	8009ad2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8009ace:	2303      	movs	r3, #3
 8009ad0:	e121      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8009ad2:	f7ff fb30 	bl	8009136 <LL_RCC_LSE_IsReady>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d1ef      	bne.n	8009abc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d02c      	beq.n	8009b42 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d014      	beq.n	8009b1a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009af0:	f7ff faa9 	bl	8009046 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009af4:	f7fc fd9c 	bl	8006630 <HAL_GetTick>
 8009af8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8009afa:	e008      	b.n	8009b0e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009afc:	f7fc fd98 	bl	8006630 <HAL_GetTick>
 8009b00:	4602      	mov	r2, r0
 8009b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b04:	1ad3      	subs	r3, r2, r3
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d901      	bls.n	8009b0e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	e103      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8009b0e:	f7ff fabc 	bl	800908a <LL_RCC_HSI48_IsReady>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d0f1      	beq.n	8009afc <HAL_RCC_OscConfig+0x4c0>
 8009b18:	e013      	b.n	8009b42 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009b1a:	f7ff faa5 	bl	8009068 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b1e:	f7fc fd87 	bl	8006630 <HAL_GetTick>
 8009b22:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8009b24:	e008      	b.n	8009b38 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b26:	f7fc fd83 	bl	8006630 <HAL_GetTick>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b2e:	1ad3      	subs	r3, r2, r3
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	d901      	bls.n	8009b38 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8009b34:	2303      	movs	r3, #3
 8009b36:	e0ee      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8009b38:	f7ff faa7 	bl	800908a <LL_RCC_HSI48_IsReady>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1f1      	bne.n	8009b26 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f000 80e4 	beq.w	8009d14 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b4c:	f7ff fc05 	bl	800935a <LL_RCC_GetSysClkSource>
 8009b50:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8009b52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	f040 80b4 	bne.w	8009ccc <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f003 0203 	and.w	r2, r3, #3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d123      	bne.n	8009bba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d11c      	bne.n	8009bba <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	0a1b      	lsrs	r3, r3, #8
 8009b84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d114      	bne.n	8009bba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d10d      	bne.n	8009bba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d106      	bne.n	8009bba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d05d      	beq.n	8009c76 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	2b0c      	cmp	r3, #12
 8009bbe:	d058      	beq.n	8009c72 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009bc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d001      	beq.n	8009bd2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e0a1      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009bd2:	f7ff fc85 	bl	80094e0 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009bd6:	f7fc fd2b 	bl	8006630 <HAL_GetTick>
 8009bda:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009bdc:	e008      	b.n	8009bf0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009bde:	f7fc fd27 	bl	8006630 <HAL_GetTick>
 8009be2:	4602      	mov	r2, r0
 8009be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be6:	1ad3      	subs	r3, r2, r3
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	d901      	bls.n	8009bf0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8009bec:	2303      	movs	r3, #3
 8009bee:	e092      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009bf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d1ef      	bne.n	8009bde <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009bfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009c02:	68da      	ldr	r2, [r3, #12]
 8009c04:	4b30      	ldr	r3, [pc, #192]	@ (8009cc8 <HAL_RCC_OscConfig+0x68c>)
 8009c06:	4013      	ands	r3, r2
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009c10:	4311      	orrs	r1, r2
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009c16:	0212      	lsls	r2, r2, #8
 8009c18:	4311      	orrs	r1, r2
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009c1e:	4311      	orrs	r1, r2
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8009c24:	4311      	orrs	r1, r2
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009c2a:	430a      	orrs	r2, r1
 8009c2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009c30:	4313      	orrs	r3, r2
 8009c32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009c34:	f7ff fc45 	bl	80094c2 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009c38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009c42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009c48:	f7fc fcf2 	bl	8006630 <HAL_GetTick>
 8009c4c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009c4e:	e008      	b.n	8009c62 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c50:	f7fc fcee 	bl	8006630 <HAL_GetTick>
 8009c54:	4602      	mov	r2, r0
 8009c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c58:	1ad3      	subs	r3, r2, r3
 8009c5a:	2b02      	cmp	r3, #2
 8009c5c:	d901      	bls.n	8009c62 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8009c5e:	2303      	movs	r3, #3
 8009c60:	e059      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009c62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d0ef      	beq.n	8009c50 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009c70:	e050      	b.n	8009d14 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009c72:	2301      	movs	r3, #1
 8009c74:	e04f      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009c76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d147      	bne.n	8009d14 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009c84:	f7ff fc1d 	bl	80094c2 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009c88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009c92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009c98:	f7fc fcca 	bl	8006630 <HAL_GetTick>
 8009c9c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009c9e:	e008      	b.n	8009cb2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ca0:	f7fc fcc6 	bl	8006630 <HAL_GetTick>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d901      	bls.n	8009cb2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	e031      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009cb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d0ef      	beq.n	8009ca0 <HAL_RCC_OscConfig+0x664>
 8009cc0:	e028      	b.n	8009d14 <HAL_RCC_OscConfig+0x6d8>
 8009cc2:	bf00      	nop
 8009cc4:	58000400 	.word	0x58000400
 8009cc8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	2b0c      	cmp	r3, #12
 8009cd0:	d01e      	beq.n	8009d10 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009cd2:	f7ff fc05 	bl	80094e0 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cd6:	f7fc fcab 	bl	8006630 <HAL_GetTick>
 8009cda:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009cdc:	e008      	b.n	8009cf0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009cde:	f7fc fca7 	bl	8006630 <HAL_GetTick>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce6:	1ad3      	subs	r3, r2, r3
 8009ce8:	2b02      	cmp	r3, #2
 8009cea:	d901      	bls.n	8009cf0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8009cec:	2303      	movs	r3, #3
 8009cee:	e012      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009cf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d1ef      	bne.n	8009cde <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8009cfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009d02:	68da      	ldr	r2, [r3, #12]
 8009d04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009d08:	4b05      	ldr	r3, [pc, #20]	@ (8009d20 <HAL_RCC_OscConfig+0x6e4>)
 8009d0a:	4013      	ands	r3, r2
 8009d0c:	60cb      	str	r3, [r1, #12]
 8009d0e:	e001      	b.n	8009d14 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	e000      	b.n	8009d16 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3734      	adds	r7, #52	@ 0x34
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd90      	pop	{r4, r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	eefefffc 	.word	0xeefefffc

08009d24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d101      	bne.n	8009d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009d34:	2301      	movs	r3, #1
 8009d36:	e12d      	b.n	8009f94 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009d38:	4b98      	ldr	r3, [pc, #608]	@ (8009f9c <HAL_RCC_ClockConfig+0x278>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f003 0307 	and.w	r3, r3, #7
 8009d40:	683a      	ldr	r2, [r7, #0]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d91b      	bls.n	8009d7e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d46:	4b95      	ldr	r3, [pc, #596]	@ (8009f9c <HAL_RCC_ClockConfig+0x278>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f023 0207 	bic.w	r2, r3, #7
 8009d4e:	4993      	ldr	r1, [pc, #588]	@ (8009f9c <HAL_RCC_ClockConfig+0x278>)
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	4313      	orrs	r3, r2
 8009d54:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d56:	f7fc fc6b 	bl	8006630 <HAL_GetTick>
 8009d5a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d5c:	e008      	b.n	8009d70 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009d5e:	f7fc fc67 	bl	8006630 <HAL_GetTick>
 8009d62:	4602      	mov	r2, r0
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	1ad3      	subs	r3, r2, r3
 8009d68:	2b02      	cmp	r3, #2
 8009d6a:	d901      	bls.n	8009d70 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8009d6c:	2303      	movs	r3, #3
 8009d6e:	e111      	b.n	8009f94 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d70:	4b8a      	ldr	r3, [pc, #552]	@ (8009f9c <HAL_RCC_ClockConfig+0x278>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f003 0307 	and.w	r3, r3, #7
 8009d78:	683a      	ldr	r2, [r7, #0]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d1ef      	bne.n	8009d5e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f003 0302 	and.w	r3, r3, #2
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d016      	beq.n	8009db8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7ff faef 	bl	8009372 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009d94:	f7fc fc4c 	bl	8006630 <HAL_GetTick>
 8009d98:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8009d9a:	e008      	b.n	8009dae <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009d9c:	f7fc fc48 	bl	8006630 <HAL_GetTick>
 8009da0:	4602      	mov	r2, r0
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	1ad3      	subs	r3, r2, r3
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	d901      	bls.n	8009dae <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8009daa:	2303      	movs	r3, #3
 8009dac:	e0f2      	b.n	8009f94 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8009dae:	f7ff fbe9 	bl	8009584 <LL_RCC_IsActiveFlag_HPRE>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d0f1      	beq.n	8009d9c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f003 0320 	and.w	r3, r3, #32
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d016      	beq.n	8009df2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	695b      	ldr	r3, [r3, #20]
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7ff fae6 	bl	800939a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009dce:	f7fc fc2f 	bl	8006630 <HAL_GetTick>
 8009dd2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8009dd4:	e008      	b.n	8009de8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009dd6:	f7fc fc2b 	bl	8006630 <HAL_GetTick>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	1ad3      	subs	r3, r2, r3
 8009de0:	2b02      	cmp	r3, #2
 8009de2:	d901      	bls.n	8009de8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8009de4:	2303      	movs	r3, #3
 8009de6:	e0d5      	b.n	8009f94 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8009de8:	f7ff fbde 	bl	80095a8 <LL_RCC_IsActiveFlag_C2HPRE>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d0f1      	beq.n	8009dd6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d016      	beq.n	8009e2c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	699b      	ldr	r3, [r3, #24]
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7ff fadf 	bl	80093c6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009e08:	f7fc fc12 	bl	8006630 <HAL_GetTick>
 8009e0c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8009e0e:	e008      	b.n	8009e22 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009e10:	f7fc fc0e 	bl	8006630 <HAL_GetTick>
 8009e14:	4602      	mov	r2, r0
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	1ad3      	subs	r3, r2, r3
 8009e1a:	2b02      	cmp	r3, #2
 8009e1c:	d901      	bls.n	8009e22 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8009e1e:	2303      	movs	r3, #3
 8009e20:	e0b8      	b.n	8009f94 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8009e22:	f7ff fbd4 	bl	80095ce <LL_RCC_IsActiveFlag_SHDHPRE>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d0f1      	beq.n	8009e10 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f003 0304 	and.w	r3, r3, #4
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d016      	beq.n	8009e66 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7ff fad9 	bl	80093f4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009e42:	f7fc fbf5 	bl	8006630 <HAL_GetTick>
 8009e46:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8009e48:	e008      	b.n	8009e5c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009e4a:	f7fc fbf1 	bl	8006630 <HAL_GetTick>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	1ad3      	subs	r3, r2, r3
 8009e54:	2b02      	cmp	r3, #2
 8009e56:	d901      	bls.n	8009e5c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8009e58:	2303      	movs	r3, #3
 8009e5a:	e09b      	b.n	8009f94 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8009e5c:	f7ff fbca 	bl	80095f4 <LL_RCC_IsActiveFlag_PPRE1>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d0f1      	beq.n	8009e4a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f003 0308 	and.w	r3, r3, #8
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d017      	beq.n	8009ea2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	691b      	ldr	r3, [r3, #16]
 8009e76:	00db      	lsls	r3, r3, #3
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7ff facf 	bl	800941c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009e7e:	f7fc fbd7 	bl	8006630 <HAL_GetTick>
 8009e82:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8009e84:	e008      	b.n	8009e98 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009e86:	f7fc fbd3 	bl	8006630 <HAL_GetTick>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	1ad3      	subs	r3, r2, r3
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	d901      	bls.n	8009e98 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8009e94:	2303      	movs	r3, #3
 8009e96:	e07d      	b.n	8009f94 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8009e98:	f7ff fbbe 	bl	8009618 <LL_RCC_IsActiveFlag_PPRE2>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d0f1      	beq.n	8009e86 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f003 0301 	and.w	r3, r3, #1
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d043      	beq.n	8009f36 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	d106      	bne.n	8009ec4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8009eb6:	f7ff f86f 	bl	8008f98 <LL_RCC_HSE_IsReady>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d11e      	bne.n	8009efe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	e067      	b.n	8009f94 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	2b03      	cmp	r3, #3
 8009eca:	d106      	bne.n	8009eda <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8009ecc:	f7ff fb17 	bl	80094fe <LL_RCC_PLL_IsReady>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d113      	bne.n	8009efe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e05c      	b.n	8009f94 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d106      	bne.n	8009ef0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8009ee2:	f7ff f9d7 	bl	8009294 <LL_RCC_MSI_IsReady>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d108      	bne.n	8009efe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	e051      	b.n	8009f94 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8009ef0:	f7ff f882 	bl	8008ff8 <LL_RCC_HSI_IsReady>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d101      	bne.n	8009efe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	e04a      	b.n	8009f94 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7ff fa15 	bl	8009332 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f08:	f7fc fb92 	bl	8006630 <HAL_GetTick>
 8009f0c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f0e:	e00a      	b.n	8009f26 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f10:	f7fc fb8e 	bl	8006630 <HAL_GetTick>
 8009f14:	4602      	mov	r2, r0
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d901      	bls.n	8009f26 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8009f22:	2303      	movs	r3, #3
 8009f24:	e036      	b.n	8009f94 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f26:	f7ff fa18 	bl	800935a <LL_RCC_GetSysClkSource>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d1ec      	bne.n	8009f10 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009f36:	4b19      	ldr	r3, [pc, #100]	@ (8009f9c <HAL_RCC_ClockConfig+0x278>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f003 0307 	and.w	r3, r3, #7
 8009f3e:	683a      	ldr	r2, [r7, #0]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d21b      	bcs.n	8009f7c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f44:	4b15      	ldr	r3, [pc, #84]	@ (8009f9c <HAL_RCC_ClockConfig+0x278>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f023 0207 	bic.w	r2, r3, #7
 8009f4c:	4913      	ldr	r1, [pc, #76]	@ (8009f9c <HAL_RCC_ClockConfig+0x278>)
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	4313      	orrs	r3, r2
 8009f52:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f54:	f7fc fb6c 	bl	8006630 <HAL_GetTick>
 8009f58:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f5a:	e008      	b.n	8009f6e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009f5c:	f7fc fb68 	bl	8006630 <HAL_GetTick>
 8009f60:	4602      	mov	r2, r0
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	1ad3      	subs	r3, r2, r3
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	d901      	bls.n	8009f6e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8009f6a:	2303      	movs	r3, #3
 8009f6c:	e012      	b.n	8009f94 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8009f9c <HAL_RCC_ClockConfig+0x278>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f003 0307 	and.w	r3, r3, #7
 8009f76:	683a      	ldr	r2, [r7, #0]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d1ef      	bne.n	8009f5c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8009f7c:	f000 f87e 	bl	800a07c <HAL_RCC_GetHCLKFreq>
 8009f80:	4603      	mov	r3, r0
 8009f82:	4a07      	ldr	r2, [pc, #28]	@ (8009fa0 <HAL_RCC_ClockConfig+0x27c>)
 8009f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8009f86:	f7fc fb5f 	bl	8006648 <HAL_GetTickPrio>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7f9 f9a7 	bl	80032e0 <HAL_InitTick>
 8009f92:	4603      	mov	r3, r0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3710      	adds	r7, #16
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	58004000 	.word	0x58004000
 8009fa0:	20000200 	.word	0x20000200

08009fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009fa4:	b590      	push	{r4, r7, lr}
 8009fa6:	b085      	sub	sp, #20
 8009fa8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009faa:	f7ff f9d6 	bl	800935a <LL_RCC_GetSysClkSource>
 8009fae:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d10a      	bne.n	8009fcc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8009fb6:	f7ff f992 	bl	80092de <LL_RCC_MSI_GetRange>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	091b      	lsrs	r3, r3, #4
 8009fbe:	f003 030f 	and.w	r3, r3, #15
 8009fc2:	4a2b      	ldr	r2, [pc, #172]	@ (800a070 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fc8:	60fb      	str	r3, [r7, #12]
 8009fca:	e04b      	b.n	800a064 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2b04      	cmp	r3, #4
 8009fd0:	d102      	bne.n	8009fd8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009fd2:	4b28      	ldr	r3, [pc, #160]	@ (800a074 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009fd4:	60fb      	str	r3, [r7, #12]
 8009fd6:	e045      	b.n	800a064 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2b08      	cmp	r3, #8
 8009fdc:	d10a      	bne.n	8009ff4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8009fde:	f7fe ffab 	bl	8008f38 <LL_RCC_HSE_IsEnabledDiv2>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d102      	bne.n	8009fee <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8009fe8:	4b22      	ldr	r3, [pc, #136]	@ (800a074 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009fea:	60fb      	str	r3, [r7, #12]
 8009fec:	e03a      	b.n	800a064 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8009fee:	4b22      	ldr	r3, [pc, #136]	@ (800a078 <HAL_RCC_GetSysClockFreq+0xd4>)
 8009ff0:	60fb      	str	r3, [r7, #12]
 8009ff2:	e037      	b.n	800a064 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8009ff4:	f7ff faba 	bl	800956c <LL_RCC_PLL_GetMainSource>
 8009ff8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	2b02      	cmp	r3, #2
 8009ffe:	d003      	beq.n	800a008 <HAL_RCC_GetSysClockFreq+0x64>
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	2b03      	cmp	r3, #3
 800a004:	d003      	beq.n	800a00e <HAL_RCC_GetSysClockFreq+0x6a>
 800a006:	e00d      	b.n	800a024 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800a008:	4b1a      	ldr	r3, [pc, #104]	@ (800a074 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a00a:	60bb      	str	r3, [r7, #8]
        break;
 800a00c:	e015      	b.n	800a03a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800a00e:	f7fe ff93 	bl	8008f38 <LL_RCC_HSE_IsEnabledDiv2>
 800a012:	4603      	mov	r3, r0
 800a014:	2b01      	cmp	r3, #1
 800a016:	d102      	bne.n	800a01e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800a018:	4b16      	ldr	r3, [pc, #88]	@ (800a074 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a01a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800a01c:	e00d      	b.n	800a03a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800a01e:	4b16      	ldr	r3, [pc, #88]	@ (800a078 <HAL_RCC_GetSysClockFreq+0xd4>)
 800a020:	60bb      	str	r3, [r7, #8]
        break;
 800a022:	e00a      	b.n	800a03a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800a024:	f7ff f95b 	bl	80092de <LL_RCC_MSI_GetRange>
 800a028:	4603      	mov	r3, r0
 800a02a:	091b      	lsrs	r3, r3, #4
 800a02c:	f003 030f 	and.w	r3, r3, #15
 800a030:	4a0f      	ldr	r2, [pc, #60]	@ (800a070 <HAL_RCC_GetSysClockFreq+0xcc>)
 800a032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a036:	60bb      	str	r3, [r7, #8]
        break;
 800a038:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800a03a:	f7ff fa72 	bl	8009522 <LL_RCC_PLL_GetN>
 800a03e:	4602      	mov	r2, r0
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	fb03 f402 	mul.w	r4, r3, r2
 800a046:	f7ff fa85 	bl	8009554 <LL_RCC_PLL_GetDivider>
 800a04a:	4603      	mov	r3, r0
 800a04c:	091b      	lsrs	r3, r3, #4
 800a04e:	3301      	adds	r3, #1
 800a050:	fbb4 f4f3 	udiv	r4, r4, r3
 800a054:	f7ff fa72 	bl	800953c <LL_RCC_PLL_GetR>
 800a058:	4603      	mov	r3, r0
 800a05a:	0f5b      	lsrs	r3, r3, #29
 800a05c:	3301      	adds	r3, #1
 800a05e:	fbb4 f3f3 	udiv	r3, r4, r3
 800a062:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800a064:	68fb      	ldr	r3, [r7, #12]
}
 800a066:	4618      	mov	r0, r3
 800a068:	3714      	adds	r7, #20
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd90      	pop	{r4, r7, pc}
 800a06e:	bf00      	nop
 800a070:	08013590 	.word	0x08013590
 800a074:	00f42400 	.word	0x00f42400
 800a078:	01e84800 	.word	0x01e84800

0800a07c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a07c:	b598      	push	{r3, r4, r7, lr}
 800a07e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800a080:	f7ff ff90 	bl	8009fa4 <HAL_RCC_GetSysClockFreq>
 800a084:	4604      	mov	r4, r0
 800a086:	f7ff f9dd 	bl	8009444 <LL_RCC_GetAHBPrescaler>
 800a08a:	4603      	mov	r3, r0
 800a08c:	091b      	lsrs	r3, r3, #4
 800a08e:	f003 030f 	and.w	r3, r3, #15
 800a092:	4a03      	ldr	r2, [pc, #12]	@ (800a0a0 <HAL_RCC_GetHCLKFreq+0x24>)
 800a094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a098:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	bd98      	pop	{r3, r4, r7, pc}
 800a0a0:	08013530 	.word	0x08013530

0800a0a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a0a4:	b598      	push	{r3, r4, r7, lr}
 800a0a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800a0a8:	f7ff ffe8 	bl	800a07c <HAL_RCC_GetHCLKFreq>
 800a0ac:	4604      	mov	r4, r0
 800a0ae:	f7ff f9fc 	bl	80094aa <LL_RCC_GetAPB2Prescaler>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	0adb      	lsrs	r3, r3, #11
 800a0b6:	f003 0307 	and.w	r3, r3, #7
 800a0ba:	4a04      	ldr	r2, [pc, #16]	@ (800a0cc <HAL_RCC_GetPCLK2Freq+0x28>)
 800a0bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0c0:	f003 031f 	and.w	r3, r3, #31
 800a0c4:	fa24 f303 	lsr.w	r3, r4, r3
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	bd98      	pop	{r3, r4, r7, pc}
 800a0cc:	08013570 	.word	0x08013570

0800a0d0 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	226f      	movs	r2, #111	@ 0x6f
 800a0de:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800a0e0:	f7ff f93b 	bl	800935a <LL_RCC_GetSysClkSource>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800a0ea:	f7ff f9ab 	bl	8009444 <LL_RCC_GetAHBPrescaler>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800a0f4:	f7ff f9cd 	bl	8009492 <LL_RCC_GetAPB1Prescaler>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800a0fe:	f7ff f9d4 	bl	80094aa <LL_RCC_GetAPB2Prescaler>
 800a102:	4602      	mov	r2, r0
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800a108:	f7ff f9a8 	bl	800945c <LL_C2_RCC_GetAHBPrescaler>
 800a10c:	4602      	mov	r2, r0
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800a112:	f7ff f9b0 	bl	8009476 <LL_RCC_GetAHB4Prescaler>
 800a116:	4602      	mov	r2, r0
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800a11c:	4b04      	ldr	r3, [pc, #16]	@ (800a130 <HAL_RCC_GetClockConfig+0x60>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f003 0207 	and.w	r2, r3, #7
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	601a      	str	r2, [r3, #0]
}
 800a128:	bf00      	nop
 800a12a:	3708      	adds	r7, #8
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	58004000 	.word	0x58004000

0800a134 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800a134:	b590      	push	{r4, r7, lr}
 800a136:	b085      	sub	sp, #20
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2bb0      	cmp	r3, #176	@ 0xb0
 800a140:	d903      	bls.n	800a14a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800a142:	4b15      	ldr	r3, [pc, #84]	@ (800a198 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800a144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a146:	60fb      	str	r3, [r7, #12]
 800a148:	e007      	b.n	800a15a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	091b      	lsrs	r3, r3, #4
 800a14e:	f003 030f 	and.w	r3, r3, #15
 800a152:	4a11      	ldr	r2, [pc, #68]	@ (800a198 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800a154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a158:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800a15a:	f7ff f98c 	bl	8009476 <LL_RCC_GetAHB4Prescaler>
 800a15e:	4603      	mov	r3, r0
 800a160:	091b      	lsrs	r3, r3, #4
 800a162:	f003 030f 	and.w	r3, r3, #15
 800a166:	4a0d      	ldr	r2, [pc, #52]	@ (800a19c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800a168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a172:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	4a0a      	ldr	r2, [pc, #40]	@ (800a1a0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800a178:	fba2 2303 	umull	r2, r3, r2, r3
 800a17c:	0c9c      	lsrs	r4, r3, #18
 800a17e:	f7fe fecd 	bl	8008f1c <HAL_PWREx_GetVoltageRange>
 800a182:	4603      	mov	r3, r0
 800a184:	4619      	mov	r1, r3
 800a186:	4620      	mov	r0, r4
 800a188:	f000 f80c 	bl	800a1a4 <RCC_SetFlashLatency>
 800a18c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3714      	adds	r7, #20
 800a192:	46bd      	mov	sp, r7
 800a194:	bd90      	pop	{r4, r7, pc}
 800a196:	bf00      	nop
 800a198:	08013590 	.word	0x08013590
 800a19c:	08013530 	.word	0x08013530
 800a1a0:	431bde83 	.word	0x431bde83

0800a1a4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800a1a4:	b590      	push	{r4, r7, lr}
 800a1a6:	b093      	sub	sp, #76	@ 0x4c
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800a1ae:	4b37      	ldr	r3, [pc, #220]	@ (800a28c <RCC_SetFlashLatency+0xe8>)
 800a1b0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800a1b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a1b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800a1ba:	4a35      	ldr	r2, [pc, #212]	@ (800a290 <RCC_SetFlashLatency+0xec>)
 800a1bc:	f107 031c 	add.w	r3, r7, #28
 800a1c0:	ca07      	ldmia	r2, {r0, r1, r2}
 800a1c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800a1c6:	4b33      	ldr	r3, [pc, #204]	@ (800a294 <RCC_SetFlashLatency+0xf0>)
 800a1c8:	f107 040c 	add.w	r4, r7, #12
 800a1cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a1ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1dc:	d11a      	bne.n	800a214 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800a1de:	2300      	movs	r3, #0
 800a1e0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a1e2:	e013      	b.n	800a20c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800a1e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	3348      	adds	r3, #72	@ 0x48
 800a1ea:	443b      	add	r3, r7
 800a1ec:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d807      	bhi.n	800a206 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800a1f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	3348      	adds	r3, #72	@ 0x48
 800a1fc:	443b      	add	r3, r7
 800a1fe:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800a202:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800a204:	e020      	b.n	800a248 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800a206:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a208:	3301      	adds	r3, #1
 800a20a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a20c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a20e:	2b03      	cmp	r3, #3
 800a210:	d9e8      	bls.n	800a1e4 <RCC_SetFlashLatency+0x40>
 800a212:	e019      	b.n	800a248 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800a214:	2300      	movs	r3, #0
 800a216:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a218:	e013      	b.n	800a242 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800a21a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	3348      	adds	r3, #72	@ 0x48
 800a220:	443b      	add	r3, r7
 800a222:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d807      	bhi.n	800a23c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800a22c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	3348      	adds	r3, #72	@ 0x48
 800a232:	443b      	add	r3, r7
 800a234:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800a238:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800a23a:	e005      	b.n	800a248 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800a23c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a23e:	3301      	adds	r3, #1
 800a240:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a244:	2b02      	cmp	r3, #2
 800a246:	d9e8      	bls.n	800a21a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800a248:	4b13      	ldr	r3, [pc, #76]	@ (800a298 <RCC_SetFlashLatency+0xf4>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f023 0207 	bic.w	r2, r3, #7
 800a250:	4911      	ldr	r1, [pc, #68]	@ (800a298 <RCC_SetFlashLatency+0xf4>)
 800a252:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a254:	4313      	orrs	r3, r2
 800a256:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a258:	f7fc f9ea 	bl	8006630 <HAL_GetTick>
 800a25c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800a25e:	e008      	b.n	800a272 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800a260:	f7fc f9e6 	bl	8006630 <HAL_GetTick>
 800a264:	4602      	mov	r2, r0
 800a266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a268:	1ad3      	subs	r3, r2, r3
 800a26a:	2b02      	cmp	r3, #2
 800a26c:	d901      	bls.n	800a272 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800a26e:	2303      	movs	r3, #3
 800a270:	e007      	b.n	800a282 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800a272:	4b09      	ldr	r3, [pc, #36]	@ (800a298 <RCC_SetFlashLatency+0xf4>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f003 0307 	and.w	r3, r3, #7
 800a27a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d1ef      	bne.n	800a260 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	374c      	adds	r7, #76	@ 0x4c
 800a286:	46bd      	mov	sp, r7
 800a288:	bd90      	pop	{r4, r7, pc}
 800a28a:	bf00      	nop
 800a28c:	0801338c 	.word	0x0801338c
 800a290:	0801339c 	.word	0x0801339c
 800a294:	080133a8 	.word	0x080133a8
 800a298:	58004000 	.word	0x58004000

0800a29c <LL_RCC_LSE_IsEnabled>:
{
 800a29c:	b480      	push	{r7}
 800a29e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800a2a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a2a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2a8:	f003 0301 	and.w	r3, r3, #1
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d101      	bne.n	800a2b4 <LL_RCC_LSE_IsEnabled+0x18>
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e000      	b.n	800a2b6 <LL_RCC_LSE_IsEnabled+0x1a>
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <LL_RCC_LSE_IsReady>:
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a2c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a2c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2cc:	f003 0302 	and.w	r3, r3, #2
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	d101      	bne.n	800a2d8 <LL_RCC_LSE_IsReady+0x18>
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e000      	b.n	800a2da <LL_RCC_LSE_IsReady+0x1a>
 800a2d8:	2300      	movs	r3, #0
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <LL_RCC_SetRFWKPClockSource>:
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800a2ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a2f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a2f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a2f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4313      	orrs	r3, r2
 800a300:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800a304:	bf00      	nop
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <LL_RCC_SetSMPSClockSource>:
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800a318:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a31c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a31e:	f023 0203 	bic.w	r2, r3, #3
 800a322:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	4313      	orrs	r3, r2
 800a32a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800a32c:	bf00      	nop
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <LL_RCC_SetSMPSPrescaler>:
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800a340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a346:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a34a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	4313      	orrs	r3, r2
 800a352:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800a354:	bf00      	nop
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <LL_RCC_SetUSARTClockSource>:
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800a368:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a36c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a370:	f023 0203 	bic.w	r2, r3, #3
 800a374:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4313      	orrs	r3, r2
 800a37c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800a380:	bf00      	nop
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <LL_RCC_SetLPUARTClockSource>:
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800a394:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a39c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a3a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800a3ac:	bf00      	nop
 800a3ae:	370c      	adds	r7, #12
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <LL_RCC_SetI2CClockSource>:
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800a3c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a3c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	091b      	lsrs	r3, r3, #4
 800a3cc:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800a3d0:	43db      	mvns	r3, r3
 800a3d2:	401a      	ands	r2, r3
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	011b      	lsls	r3, r3, #4
 800a3d8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800a3dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800a3e6:	bf00      	nop
 800a3e8:	370c      	adds	r7, #12
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr

0800a3f2 <LL_RCC_SetLPTIMClockSource>:
{
 800a3f2:	b480      	push	{r7}
 800a3f4:	b083      	sub	sp, #12
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800a3fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a3fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	0c1b      	lsrs	r3, r3, #16
 800a406:	041b      	lsls	r3, r3, #16
 800a408:	43db      	mvns	r3, r3
 800a40a:	401a      	ands	r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	041b      	lsls	r3, r3, #16
 800a410:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a414:	4313      	orrs	r3, r2
 800a416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800a41a:	bf00      	nop
 800a41c:	370c      	adds	r7, #12
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr

0800a426 <LL_RCC_SetSAIClockSource>:
{
 800a426:	b480      	push	{r7}
 800a428:	b083      	sub	sp, #12
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800a42e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a436:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a43a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4313      	orrs	r3, r2
 800a442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800a446:	bf00      	nop
 800a448:	370c      	adds	r7, #12
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr

0800a452 <LL_RCC_SetRNGClockSource>:
{
 800a452:	b480      	push	{r7}
 800a454:	b083      	sub	sp, #12
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800a45a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a45e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a462:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800a466:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4313      	orrs	r3, r2
 800a46e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800a472:	bf00      	nop
 800a474:	370c      	adds	r7, #12
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <LL_RCC_SetCLK48ClockSource>:
{
 800a47e:	b480      	push	{r7}
 800a480:	b083      	sub	sp, #12
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800a486:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a48a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a48e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a492:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	4313      	orrs	r3, r2
 800a49a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800a49e:	bf00      	nop
 800a4a0:	370c      	adds	r7, #12
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr

0800a4aa <LL_RCC_SetUSBClockSource>:
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b082      	sub	sp, #8
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f7ff ffe3 	bl	800a47e <LL_RCC_SetCLK48ClockSource>
}
 800a4b8:	bf00      	nop
 800a4ba:	3708      	adds	r7, #8
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <LL_RCC_SetADCClockSource>:
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b083      	sub	sp, #12
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800a4c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4d0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800a4d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <LL_RCC_SetRTCClockSource>:
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800a4f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a500:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	4313      	orrs	r3, r2
 800a508:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800a50c:	bf00      	nop
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <LL_RCC_GetRTCClockSource>:
{
 800a518:	b480      	push	{r7}
 800a51a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800a51c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a524:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800a528:	4618      	mov	r0, r3
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr

0800a532 <LL_RCC_ForceBackupDomainReset>:
{
 800a532:	b480      	push	{r7}
 800a534:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a536:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a53a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a53e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a542:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a546:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a54a:	bf00      	nop
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <LL_RCC_ReleaseBackupDomainReset>:
{
 800a554:	b480      	push	{r7}
 800a556:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a558:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a55c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a560:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a564:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a56c:	bf00      	nop
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr

0800a576 <LL_RCC_PLLSAI1_Enable>:
{
 800a576:	b480      	push	{r7}
 800a578:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800a57a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a584:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a588:	6013      	str	r3, [r2, #0]
}
 800a58a:	bf00      	nop
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <LL_RCC_PLLSAI1_Disable>:
{
 800a594:	b480      	push	{r7}
 800a596:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800a598:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a5a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a5a6:	6013      	str	r3, [r2, #0]
}
 800a5a8:	bf00      	nop
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr

0800a5b2 <LL_RCC_PLLSAI1_IsReady>:
{
 800a5b2:	b480      	push	{r7}
 800a5b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800a5b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5c4:	d101      	bne.n	800a5ca <LL_RCC_PLLSAI1_IsReady+0x18>
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e000      	b.n	800a5cc <LL_RCC_PLLSAI1_IsReady+0x1a>
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr

0800a5d6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a5d6:	b580      	push	{r7, lr}
 800a5d8:	b088      	sub	sp, #32
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800a5de:	2300      	movs	r3, #0
 800a5e0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d034      	beq.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5f6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a5fa:	d021      	beq.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800a5fc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a600:	d81b      	bhi.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a602:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a606:	d01d      	beq.n	800a644 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800a608:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a60c:	d815      	bhi.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d00b      	beq.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0x54>
 800a612:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a616:	d110      	bne.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800a618:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a622:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a626:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800a628:	e00d      	b.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	3304      	adds	r3, #4
 800a62e:	4618      	mov	r0, r3
 800a630:	f000 f947 	bl	800a8c2 <RCCEx_PLLSAI1_ConfigNP>
 800a634:	4603      	mov	r3, r0
 800a636:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a638:	e005      	b.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800a63a:	2301      	movs	r3, #1
 800a63c:	77fb      	strb	r3, [r7, #31]
        break;
 800a63e:	e002      	b.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800a640:	bf00      	nop
 800a642:	e000      	b.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800a644:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a646:	7ffb      	ldrb	r3, [r7, #31]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d105      	bne.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a650:	4618      	mov	r0, r3
 800a652:	f7ff fee8 	bl	800a426 <LL_RCC_SetSAIClockSource>
 800a656:	e001      	b.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a658:	7ffb      	ldrb	r3, [r7, #31]
 800a65a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a664:	2b00      	cmp	r3, #0
 800a666:	d046      	beq.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800a668:	f7ff ff56 	bl	800a518 <LL_RCC_GetRTCClockSource>
 800a66c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a672:	69ba      	ldr	r2, [r7, #24]
 800a674:	429a      	cmp	r2, r3
 800a676:	d03c      	beq.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800a678:	f7fe fc40 	bl	8008efc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800a67c:	69bb      	ldr	r3, [r7, #24]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d105      	bne.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a686:	4618      	mov	r0, r3
 800a688:	f7ff ff30 	bl	800a4ec <LL_RCC_SetRTCClockSource>
 800a68c:	e02e      	b.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800a68e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a696:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800a698:	f7ff ff4b 	bl	800a532 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800a69c:	f7ff ff5a 	bl	800a554 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800a6ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800a6b8:	f7ff fdf0 	bl	800a29c <LL_RCC_LSE_IsEnabled>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d114      	bne.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a6c2:	f7fb ffb5 	bl	8006630 <HAL_GetTick>
 800a6c6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800a6c8:	e00b      	b.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6ca:	f7fb ffb1 	bl	8006630 <HAL_GetTick>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	1ad3      	subs	r3, r2, r3
 800a6d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d902      	bls.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	77fb      	strb	r3, [r7, #31]
              break;
 800a6e0:	e004      	b.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800a6e2:	f7ff fded 	bl	800a2c0 <LL_RCC_LSE_IsReady>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d1ee      	bne.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800a6ec:	7ffb      	ldrb	r3, [r7, #31]
 800a6ee:	77bb      	strb	r3, [r7, #30]
 800a6f0:	e001      	b.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6f2:	7ffb      	ldrb	r3, [r7, #31]
 800a6f4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f003 0301 	and.w	r3, r3, #1
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d004      	beq.n	800a70c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	699b      	ldr	r3, [r3, #24]
 800a706:	4618      	mov	r0, r3
 800a708:	f7ff fe2a 	bl	800a360 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f003 0302 	and.w	r3, r3, #2
 800a714:	2b00      	cmp	r3, #0
 800a716:	d004      	beq.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	69db      	ldr	r3, [r3, #28]
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7ff fe35 	bl	800a38c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f003 0310 	and.w	r3, r3, #16
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d004      	beq.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a732:	4618      	mov	r0, r3
 800a734:	f7ff fe5d 	bl	800a3f2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f003 0320 	and.w	r3, r3, #32
 800a740:	2b00      	cmp	r3, #0
 800a742:	d004      	beq.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a748:	4618      	mov	r0, r3
 800a74a:	f7ff fe52 	bl	800a3f2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f003 0304 	and.w	r3, r3, #4
 800a756:	2b00      	cmp	r3, #0
 800a758:	d004      	beq.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a1b      	ldr	r3, [r3, #32]
 800a75e:	4618      	mov	r0, r3
 800a760:	f7ff fe2a 	bl	800a3b8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f003 0308 	and.w	r3, r3, #8
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d004      	beq.n	800a77a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a774:	4618      	mov	r0, r3
 800a776:	f7ff fe1f 	bl	800a3b8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a782:	2b00      	cmp	r3, #0
 800a784:	d022      	beq.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7ff fe8d 	bl	800a4aa <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a794:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a798:	d107      	bne.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800a79a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a7a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a7a8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a7b2:	d10b      	bne.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	3304      	adds	r3, #4
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f000 f8dd 	bl	800a978 <RCCEx_PLLSAI1_ConfigNQ>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800a7c2:	7ffb      	ldrb	r3, [r7, #31]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d001      	beq.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800a7c8:	7ffb      	ldrb	r3, [r7, #31]
 800a7ca:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d02b      	beq.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7e0:	d008      	beq.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7ea:	d003      	beq.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d105      	bne.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7ff fe2a 	bl	800a452 <LL_RCC_SetRNGClockSource>
 800a7fe:	e00a      	b.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a804:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a808:	60fb      	str	r3, [r7, #12]
 800a80a:	2000      	movs	r0, #0
 800a80c:	f7ff fe21 	bl	800a452 <LL_RCC_SetRNGClockSource>
 800a810:	68f8      	ldr	r0, [r7, #12]
 800a812:	f7ff fe34 	bl	800a47e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a81a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800a81e:	d107      	bne.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800a820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a82a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a82e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d022      	beq.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a840:	4618      	mov	r0, r3
 800a842:	f7ff fe3d 	bl	800a4c0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a84a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a84e:	d107      	bne.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a850:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a854:	68db      	ldr	r3, [r3, #12]
 800a856:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a85a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a85e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a864:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a868:	d10b      	bne.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	3304      	adds	r3, #4
 800a86e:	4618      	mov	r0, r3
 800a870:	f000 f8dd 	bl	800aa2e <RCCEx_PLLSAI1_ConfigNR>
 800a874:	4603      	mov	r3, r0
 800a876:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800a878:	7ffb      	ldrb	r3, [r7, #31]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d001      	beq.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800a87e:	7ffb      	ldrb	r3, [r7, #31]
 800a880:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d004      	beq.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a892:	4618      	mov	r0, r3
 800a894:	f7ff fd26 	bl	800a2e4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d009      	beq.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f7ff fd45 	bl	800a338 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7ff fd2c 	bl	800a310 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800a8b8:	7fbb      	ldrb	r3, [r7, #30]
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3720      	adds	r7, #32
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b084      	sub	sp, #16
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800a8ce:	f7ff fe61 	bl	800a594 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a8d2:	f7fb fead 	bl	8006630 <HAL_GetTick>
 800a8d6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a8d8:	e009      	b.n	800a8ee <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a8da:	f7fb fea9 	bl	8006630 <HAL_GetTick>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	1ad3      	subs	r3, r2, r3
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d902      	bls.n	800a8ee <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800a8e8:	2303      	movs	r3, #3
 800a8ea:	73fb      	strb	r3, [r7, #15]
      break;
 800a8ec:	e004      	b.n	800a8f8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a8ee:	f7ff fe60 	bl	800a5b2 <LL_RCC_PLLSAI1_IsReady>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d1f0      	bne.n	800a8da <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800a8f8:	7bfb      	ldrb	r3, [r7, #15]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d137      	bne.n	800a96e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800a8fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a902:	691b      	ldr	r3, [r3, #16]
 800a904:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	021b      	lsls	r3, r3, #8
 800a90e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a912:	4313      	orrs	r3, r2
 800a914:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800a916:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a91a:	691b      	ldr	r3, [r3, #16]
 800a91c:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a928:	4313      	orrs	r3, r2
 800a92a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800a92c:	f7ff fe23 	bl	800a576 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a930:	f7fb fe7e 	bl	8006630 <HAL_GetTick>
 800a934:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a936:	e009      	b.n	800a94c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a938:	f7fb fe7a 	bl	8006630 <HAL_GetTick>
 800a93c:	4602      	mov	r2, r0
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	1ad3      	subs	r3, r2, r3
 800a942:	2b02      	cmp	r3, #2
 800a944:	d902      	bls.n	800a94c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800a946:	2303      	movs	r3, #3
 800a948:	73fb      	strb	r3, [r7, #15]
        break;
 800a94a:	e004      	b.n	800a956 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a94c:	f7ff fe31 	bl	800a5b2 <LL_RCC_PLLSAI1_IsReady>
 800a950:	4603      	mov	r3, r0
 800a952:	2b01      	cmp	r3, #1
 800a954:	d1f0      	bne.n	800a938 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800a956:	7bfb      	ldrb	r3, [r7, #15]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d108      	bne.n	800a96e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800a95c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a960:	691a      	ldr	r2, [r3, #16]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	691b      	ldr	r3, [r3, #16]
 800a966:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a96a:	4313      	orrs	r3, r2
 800a96c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800a96e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a970:	4618      	mov	r0, r3
 800a972:	3710      	adds	r7, #16
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a980:	2300      	movs	r3, #0
 800a982:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800a984:	f7ff fe06 	bl	800a594 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a988:	f7fb fe52 	bl	8006630 <HAL_GetTick>
 800a98c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a98e:	e009      	b.n	800a9a4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a990:	f7fb fe4e 	bl	8006630 <HAL_GetTick>
 800a994:	4602      	mov	r2, r0
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	1ad3      	subs	r3, r2, r3
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d902      	bls.n	800a9a4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800a99e:	2303      	movs	r3, #3
 800a9a0:	73fb      	strb	r3, [r7, #15]
      break;
 800a9a2:	e004      	b.n	800a9ae <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a9a4:	f7ff fe05 	bl	800a5b2 <LL_RCC_PLLSAI1_IsReady>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d1f0      	bne.n	800a990 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800a9ae:	7bfb      	ldrb	r3, [r7, #15]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d137      	bne.n	800aa24 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800a9b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	021b      	lsls	r3, r3, #8
 800a9c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800a9cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800a9e2:	f7ff fdc8 	bl	800a576 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9e6:	f7fb fe23 	bl	8006630 <HAL_GetTick>
 800a9ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a9ec:	e009      	b.n	800aa02 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a9ee:	f7fb fe1f 	bl	8006630 <HAL_GetTick>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	1ad3      	subs	r3, r2, r3
 800a9f8:	2b02      	cmp	r3, #2
 800a9fa:	d902      	bls.n	800aa02 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800a9fc:	2303      	movs	r3, #3
 800a9fe:	73fb      	strb	r3, [r7, #15]
        break;
 800aa00:	e004      	b.n	800aa0c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800aa02:	f7ff fdd6 	bl	800a5b2 <LL_RCC_PLLSAI1_IsReady>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d1f0      	bne.n	800a9ee <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800aa0c:	7bfb      	ldrb	r3, [r7, #15]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d108      	bne.n	800aa24 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800aa12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa16:	691a      	ldr	r2, [r3, #16]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	691b      	ldr	r3, [r3, #16]
 800aa1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aa20:	4313      	orrs	r3, r2
 800aa22:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800aa24:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3710      	adds	r7, #16
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}

0800aa2e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	b084      	sub	sp, #16
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa36:	2300      	movs	r3, #0
 800aa38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800aa3a:	f7ff fdab 	bl	800a594 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800aa3e:	f7fb fdf7 	bl	8006630 <HAL_GetTick>
 800aa42:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800aa44:	e009      	b.n	800aa5a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800aa46:	f7fb fdf3 	bl	8006630 <HAL_GetTick>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	1ad3      	subs	r3, r2, r3
 800aa50:	2b02      	cmp	r3, #2
 800aa52:	d902      	bls.n	800aa5a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800aa54:	2303      	movs	r3, #3
 800aa56:	73fb      	strb	r3, [r7, #15]
      break;
 800aa58:	e004      	b.n	800aa64 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800aa5a:	f7ff fdaa 	bl	800a5b2 <LL_RCC_PLLSAI1_IsReady>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d1f0      	bne.n	800aa46 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800aa64:	7bfb      	ldrb	r3, [r7, #15]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d137      	bne.n	800aada <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800aa6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa6e:	691b      	ldr	r3, [r3, #16]
 800aa70:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	021b      	lsls	r3, r3, #8
 800aa7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800aa82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa86:	691b      	ldr	r3, [r3, #16]
 800aa88:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aa94:	4313      	orrs	r3, r2
 800aa96:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800aa98:	f7ff fd6d 	bl	800a576 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa9c:	f7fb fdc8 	bl	8006630 <HAL_GetTick>
 800aaa0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800aaa2:	e009      	b.n	800aab8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800aaa4:	f7fb fdc4 	bl	8006630 <HAL_GetTick>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	1ad3      	subs	r3, r2, r3
 800aaae:	2b02      	cmp	r3, #2
 800aab0:	d902      	bls.n	800aab8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800aab2:	2303      	movs	r3, #3
 800aab4:	73fb      	strb	r3, [r7, #15]
        break;
 800aab6:	e004      	b.n	800aac2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800aab8:	f7ff fd7b 	bl	800a5b2 <LL_RCC_PLLSAI1_IsReady>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	d1f0      	bne.n	800aaa4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800aac2:	7bfb      	ldrb	r3, [r7, #15]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d108      	bne.n	800aada <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800aac8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aacc:	691a      	ldr	r2, [r3, #16]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	691b      	ldr	r3, [r3, #16]
 800aad2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aad6:	4313      	orrs	r3, r2
 800aad8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800aada:	7bfb      	ldrb	r3, [r7, #15]
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3710      	adds	r7, #16
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800aaec:	2301      	movs	r3, #1
 800aaee:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d101      	bne.n	800aafa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e07a      	b.n	800abf0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d106      	bne.n	800ab14 <HAL_RTC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f7f8 fb4e 	bl	80031b0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2202      	movs	r2, #2
 800ab18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	f003 0310 	and.w	r3, r3, #16
 800ab26:	2b10      	cmp	r3, #16
 800ab28:	d058      	beq.n	800abdc <HAL_RTC_Init+0xf8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	22ca      	movs	r2, #202	@ 0xca
 800ab30:	625a      	str	r2, [r3, #36]	@ 0x24
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2253      	movs	r2, #83	@ 0x53
 800ab38:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 f882 	bl	800ac44 <RTC_EnterInitMode>
 800ab40:	4603      	mov	r3, r0
 800ab42:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800ab44:	7bfb      	ldrb	r3, [r7, #15]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d12c      	bne.n	800aba4 <HAL_RTC_Init+0xc0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	689b      	ldr	r3, [r3, #8]
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	6812      	ldr	r2, [r2, #0]
 800ab54:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ab58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab5c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	6899      	ldr	r1, [r3, #8]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	685a      	ldr	r2, [r3, #4]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	691b      	ldr	r3, [r3, #16]
 800ab6c:	431a      	orrs	r2, r3
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	699b      	ldr	r3, [r3, #24]
 800ab72:	431a      	orrs	r2, r3
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	430a      	orrs	r2, r1
 800ab7a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	68d2      	ldr	r2, [r2, #12]
 800ab84:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	6919      	ldr	r1, [r3, #16]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	041a      	lsls	r2, r3, #16
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	430a      	orrs	r2, r1
 800ab98:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 f88a 	bl	800acb4 <RTC_ExitInitMode>
 800aba0:	4603      	mov	r3, r0
 800aba2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800aba4:	7bfb      	ldrb	r3, [r7, #15]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d113      	bne.n	800abd2 <HAL_RTC_Init+0xee>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f022 0203 	bic.w	r2, r2, #3
 800abb8:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	69da      	ldr	r2, [r3, #28]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	695b      	ldr	r3, [r3, #20]
 800abc8:	431a      	orrs	r2, r3
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	430a      	orrs	r2, r1
 800abd0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	22ff      	movs	r2, #255	@ 0xff
 800abd8:	625a      	str	r2, [r3, #36]	@ 0x24
 800abda:	e001      	b.n	800abe0 <HAL_RTC_Init+0xfc>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800abdc:	2300      	movs	r3, #0
 800abde:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800abe0:	7bfb      	ldrb	r3, [r7, #15]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d103      	bne.n	800abee <HAL_RTC_Init+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2201      	movs	r2, #1
 800abea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800abee:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3710      	adds	r7, #16
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ac00:	2300      	movs	r3, #0
 800ac02:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4a0d      	ldr	r2, [pc, #52]	@ (800ac40 <HAL_RTC_WaitForSynchro+0x48>)
 800ac0a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ac0c:	f7fb fd10 	bl	8006630 <HAL_GetTick>
 800ac10:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ac12:	e009      	b.n	800ac28 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ac14:	f7fb fd0c 	bl	8006630 <HAL_GetTick>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	1ad3      	subs	r3, r2, r3
 800ac1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ac22:	d901      	bls.n	800ac28 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800ac24:	2303      	movs	r3, #3
 800ac26:	e007      	b.n	800ac38 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	f003 0320 	and.w	r3, r3, #32
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d0ee      	beq.n	800ac14 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3710      	adds	r7, #16
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	0001ff5f 	.word	0x0001ff5f

0800ac44 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800ac50:	2300      	movs	r3, #0
 800ac52:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	68db      	ldr	r3, [r3, #12]
 800ac5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d123      	bne.n	800acaa <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	68da      	ldr	r2, [r3, #12]
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ac70:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ac72:	f7fb fcdd 	bl	8006630 <HAL_GetTick>
 800ac76:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800ac78:	e00d      	b.n	800ac96 <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ac7a:	f7fb fcd9 	bl	8006630 <HAL_GetTick>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	1ad3      	subs	r3, r2, r3
 800ac84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ac88:	d905      	bls.n	800ac96 <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2204      	movs	r2, #4
 800ac8e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 800ac92:	2301      	movs	r3, #1
 800ac94:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d102      	bne.n	800acaa <RTC_EnterInitMode+0x66>
 800aca4:	7bfb      	ldrb	r3, [r7, #15]
 800aca6:	2b01      	cmp	r3, #1
 800aca8:	d1e7      	bne.n	800ac7a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800acaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3710      	adds	r7, #16
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b084      	sub	sp, #16
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800acbc:	2300      	movs	r3, #0
 800acbe:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	68da      	ldr	r2, [r3, #12]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800acce:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	f003 0320 	and.w	r3, r3, #32
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d10b      	bne.n	800acf6 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f7ff ff8a 	bl	800abf8 <HAL_RTC_WaitForSynchro>
 800ace4:	4603      	mov	r3, r0
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d005      	beq.n	800acf6 <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2204      	movs	r2, #4
 800acee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 800acf2:	2301      	movs	r3, #1
 800acf4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800acf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3710      	adds	r7, #16
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b087      	sub	sp, #28
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800ad0c:	4b5f      	ldr	r3, [pc, #380]	@ (800ae8c <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a5f      	ldr	r2, [pc, #380]	@ (800ae90 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 800ad12:	fba2 2303 	umull	r2, r3, r2, r3
 800ad16:	0adb      	lsrs	r3, r3, #11
 800ad18:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ad1c:	fb02 f303 	mul.w	r3, r2, r3
 800ad20:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d101      	bne.n	800ad30 <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
 800ad2c:	2302      	movs	r3, #2
 800ad2e:	e0a7      	b.n	800ae80 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2202      	movs	r2, #2
 800ad3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	22ca      	movs	r2, #202	@ 0xca
 800ad46:	625a      	str	r2, [r3, #36]	@ 0x24
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2253      	movs	r2, #83	@ 0x53
 800ad4e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d01a      	beq.n	800ad94 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	3b01      	subs	r3, #1
 800ad62:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d10d      	bne.n	800ad86 <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	22ff      	movs	r2, #255	@ 0xff
 800ad70:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2203      	movs	r2, #3
 800ad76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800ad82:	2303      	movs	r3, #3
 800ad84:	e07c      	b.n	800ae80 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	f003 0304 	and.w	r3, r3, #4
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d1e4      	bne.n	800ad5e <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	689a      	ldr	r2, [r3, #8]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ada2:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	68db      	ldr	r3, [r3, #12]
 800adaa:	b2da      	uxtb	r2, r3
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800adb4:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800adb6:	4b35      	ldr	r3, [pc, #212]	@ (800ae8c <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a35      	ldr	r2, [pc, #212]	@ (800ae90 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 800adbc:	fba2 2303 	umull	r2, r3, r2, r3
 800adc0:	0adb      	lsrs	r3, r3, #11
 800adc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800adc6:	fb02 f303 	mul.w	r3, r2, r3
 800adca:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	3b01      	subs	r3, #1
 800add0:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d10d      	bne.n	800adf4 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	22ff      	movs	r2, #255	@ 0xff
 800adde:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2203      	movs	r2, #3
 800ade4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2200      	movs	r2, #0
 800adec:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800adf0:	2303      	movs	r3, #3
 800adf2:	e045      	b.n	800ae80 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	68db      	ldr	r3, [r3, #12]
 800adfa:	f003 0304 	and.w	r3, r3, #4
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d0e4      	beq.n	800adcc <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	689a      	ldr	r2, [r3, #8]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f022 0207 	bic.w	r2, r2, #7
 800ae10:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	6899      	ldr	r1, [r3, #8]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	430a      	orrs	r2, r1
 800ae20:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	68ba      	ldr	r2, [r7, #8]
 800ae28:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800ae2a:	4b1a      	ldr	r3, [pc, #104]	@ (800ae94 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800ae2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae30:	4a18      	ldr	r2, [pc, #96]	@ (800ae94 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800ae32:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ae36:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800ae3a:	4b16      	ldr	r3, [pc, #88]	@ (800ae94 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4a15      	ldr	r2, [pc, #84]	@ (800ae94 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800ae40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ae44:	6013      	str	r3, [r2, #0]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	689a      	ldr	r2, [r3, #8]
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ae54:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	689a      	ldr	r2, [r3, #8]
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ae64:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	22ff      	movs	r2, #255	@ 0xff
 800ae6c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2201      	movs	r2, #1
 800ae72:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800ae7e:	2300      	movs	r3, #0
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	371c      	adds	r7, #28
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr
 800ae8c:	20000200 	.word	0x20000200
 800ae90:	10624dd3 	.word	0x10624dd3
 800ae94:	58000800 	.word	0x58000800

0800ae98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d101      	bne.n	800aeaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aea6:	2301      	movs	r3, #1
 800aea8:	e049      	b.n	800af3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d106      	bne.n	800aec4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f7f8 f9ac 	bl	800321c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2202      	movs	r2, #2
 800aec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	3304      	adds	r3, #4
 800aed4:	4619      	mov	r1, r3
 800aed6:	4610      	mov	r0, r2
 800aed8:	f000 fd14 	bl	800b904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2201      	movs	r2, #1
 800aee0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2201      	movs	r2, #1
 800aee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2201      	movs	r2, #1
 800aef0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2201      	movs	r2, #1
 800aef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2201      	movs	r2, #1
 800af00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2201      	movs	r2, #1
 800af08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2201      	movs	r2, #1
 800af10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2201      	movs	r2, #1
 800af18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2201      	movs	r2, #1
 800af20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2201      	movs	r2, #1
 800af28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2201      	movs	r2, #1
 800af30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2201      	movs	r2, #1
 800af38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800af3c:	2300      	movs	r3, #0
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3708      	adds	r7, #8
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
	...

0800af48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af56:	b2db      	uxtb	r3, r3
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d001      	beq.n	800af60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800af5c:	2301      	movs	r3, #1
 800af5e:	e02e      	b.n	800afbe <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2202      	movs	r2, #2
 800af64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a17      	ldr	r2, [pc, #92]	@ (800afcc <HAL_TIM_Base_Start+0x84>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d004      	beq.n	800af7c <HAL_TIM_Base_Start+0x34>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af7a:	d115      	bne.n	800afa8 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	689a      	ldr	r2, [r3, #8]
 800af82:	4b13      	ldr	r3, [pc, #76]	@ (800afd0 <HAL_TIM_Base_Start+0x88>)
 800af84:	4013      	ands	r3, r2
 800af86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2b06      	cmp	r3, #6
 800af8c:	d015      	beq.n	800afba <HAL_TIM_Base_Start+0x72>
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af94:	d011      	beq.n	800afba <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f042 0201 	orr.w	r2, r2, #1
 800afa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afa6:	e008      	b.n	800afba <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f042 0201 	orr.w	r2, r2, #1
 800afb6:	601a      	str	r2, [r3, #0]
 800afb8:	e000      	b.n	800afbc <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800afbc:	2300      	movs	r3, #0
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3714      	adds	r7, #20
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr
 800afca:	bf00      	nop
 800afcc:	40012c00 	.word	0x40012c00
 800afd0:	00010007 	.word	0x00010007

0800afd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b085      	sub	sp, #20
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d001      	beq.n	800afec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800afe8:	2301      	movs	r3, #1
 800afea:	e036      	b.n	800b05a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2202      	movs	r2, #2
 800aff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	68da      	ldr	r2, [r3, #12]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f042 0201 	orr.w	r2, r2, #1
 800b002:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a17      	ldr	r2, [pc, #92]	@ (800b068 <HAL_TIM_Base_Start_IT+0x94>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d004      	beq.n	800b018 <HAL_TIM_Base_Start_IT+0x44>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b016:	d115      	bne.n	800b044 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	689a      	ldr	r2, [r3, #8]
 800b01e:	4b13      	ldr	r3, [pc, #76]	@ (800b06c <HAL_TIM_Base_Start_IT+0x98>)
 800b020:	4013      	ands	r3, r2
 800b022:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2b06      	cmp	r3, #6
 800b028:	d015      	beq.n	800b056 <HAL_TIM_Base_Start_IT+0x82>
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b030:	d011      	beq.n	800b056 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f042 0201 	orr.w	r2, r2, #1
 800b040:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b042:	e008      	b.n	800b056 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f042 0201 	orr.w	r2, r2, #1
 800b052:	601a      	str	r2, [r3, #0]
 800b054:	e000      	b.n	800b058 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b056:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b058:	2300      	movs	r3, #0
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3714      	adds	r7, #20
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop
 800b068:	40012c00 	.word	0x40012c00
 800b06c:	00010007 	.word	0x00010007

0800b070 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b082      	sub	sp, #8
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d101      	bne.n	800b082 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b07e:	2301      	movs	r3, #1
 800b080:	e049      	b.n	800b116 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d106      	bne.n	800b09c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 f841 	bl	800b11e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2202      	movs	r2, #2
 800b0a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	3304      	adds	r3, #4
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	4610      	mov	r0, r2
 800b0b0:	f000 fc28 	bl	800b904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2201      	movs	r2, #1
 800b0c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2201      	movs	r2, #1
 800b0e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2201      	movs	r2, #1
 800b108:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2201      	movs	r2, #1
 800b110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b114:	2300      	movs	r3, #0
}
 800b116:	4618      	mov	r0, r3
 800b118:	3708      	adds	r7, #8
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b11e:	b480      	push	{r7}
 800b120:	b083      	sub	sp, #12
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b126:	bf00      	nop
 800b128:	370c      	adds	r7, #12
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr
	...

0800b134 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d109      	bne.n	800b158 <HAL_TIM_PWM_Start+0x24>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b14a:	b2db      	uxtb	r3, r3
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	bf14      	ite	ne
 800b150:	2301      	movne	r3, #1
 800b152:	2300      	moveq	r3, #0
 800b154:	b2db      	uxtb	r3, r3
 800b156:	e03c      	b.n	800b1d2 <HAL_TIM_PWM_Start+0x9e>
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	2b04      	cmp	r3, #4
 800b15c:	d109      	bne.n	800b172 <HAL_TIM_PWM_Start+0x3e>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b164:	b2db      	uxtb	r3, r3
 800b166:	2b01      	cmp	r3, #1
 800b168:	bf14      	ite	ne
 800b16a:	2301      	movne	r3, #1
 800b16c:	2300      	moveq	r3, #0
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	e02f      	b.n	800b1d2 <HAL_TIM_PWM_Start+0x9e>
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	2b08      	cmp	r3, #8
 800b176:	d109      	bne.n	800b18c <HAL_TIM_PWM_Start+0x58>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	2b01      	cmp	r3, #1
 800b182:	bf14      	ite	ne
 800b184:	2301      	movne	r3, #1
 800b186:	2300      	moveq	r3, #0
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	e022      	b.n	800b1d2 <HAL_TIM_PWM_Start+0x9e>
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	2b0c      	cmp	r3, #12
 800b190:	d109      	bne.n	800b1a6 <HAL_TIM_PWM_Start+0x72>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	2b01      	cmp	r3, #1
 800b19c:	bf14      	ite	ne
 800b19e:	2301      	movne	r3, #1
 800b1a0:	2300      	moveq	r3, #0
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	e015      	b.n	800b1d2 <HAL_TIM_PWM_Start+0x9e>
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	2b10      	cmp	r3, #16
 800b1aa:	d109      	bne.n	800b1c0 <HAL_TIM_PWM_Start+0x8c>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	bf14      	ite	ne
 800b1b8:	2301      	movne	r3, #1
 800b1ba:	2300      	moveq	r3, #0
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	e008      	b.n	800b1d2 <HAL_TIM_PWM_Start+0x9e>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	bf14      	ite	ne
 800b1cc:	2301      	movne	r3, #1
 800b1ce:	2300      	moveq	r3, #0
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d001      	beq.n	800b1da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	e079      	b.n	800b2ce <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d104      	bne.n	800b1ea <HAL_TIM_PWM_Start+0xb6>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2202      	movs	r2, #2
 800b1e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b1e8:	e023      	b.n	800b232 <HAL_TIM_PWM_Start+0xfe>
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	2b04      	cmp	r3, #4
 800b1ee:	d104      	bne.n	800b1fa <HAL_TIM_PWM_Start+0xc6>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2202      	movs	r2, #2
 800b1f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b1f8:	e01b      	b.n	800b232 <HAL_TIM_PWM_Start+0xfe>
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	2b08      	cmp	r3, #8
 800b1fe:	d104      	bne.n	800b20a <HAL_TIM_PWM_Start+0xd6>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2202      	movs	r2, #2
 800b204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b208:	e013      	b.n	800b232 <HAL_TIM_PWM_Start+0xfe>
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	2b0c      	cmp	r3, #12
 800b20e:	d104      	bne.n	800b21a <HAL_TIM_PWM_Start+0xe6>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2202      	movs	r2, #2
 800b214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b218:	e00b      	b.n	800b232 <HAL_TIM_PWM_Start+0xfe>
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	2b10      	cmp	r3, #16
 800b21e:	d104      	bne.n	800b22a <HAL_TIM_PWM_Start+0xf6>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2202      	movs	r2, #2
 800b224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b228:	e003      	b.n	800b232 <HAL_TIM_PWM_Start+0xfe>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2202      	movs	r2, #2
 800b22e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	2201      	movs	r2, #1
 800b238:	6839      	ldr	r1, [r7, #0]
 800b23a:	4618      	mov	r0, r3
 800b23c:	f000 fee6 	bl	800c00c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4a24      	ldr	r2, [pc, #144]	@ (800b2d8 <HAL_TIM_PWM_Start+0x1a4>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d009      	beq.n	800b25e <HAL_TIM_PWM_Start+0x12a>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	4a23      	ldr	r2, [pc, #140]	@ (800b2dc <HAL_TIM_PWM_Start+0x1a8>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d004      	beq.n	800b25e <HAL_TIM_PWM_Start+0x12a>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a21      	ldr	r2, [pc, #132]	@ (800b2e0 <HAL_TIM_PWM_Start+0x1ac>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d101      	bne.n	800b262 <HAL_TIM_PWM_Start+0x12e>
 800b25e:	2301      	movs	r3, #1
 800b260:	e000      	b.n	800b264 <HAL_TIM_PWM_Start+0x130>
 800b262:	2300      	movs	r3, #0
 800b264:	2b00      	cmp	r3, #0
 800b266:	d007      	beq.n	800b278 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b276:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4a16      	ldr	r2, [pc, #88]	@ (800b2d8 <HAL_TIM_PWM_Start+0x1a4>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d004      	beq.n	800b28c <HAL_TIM_PWM_Start+0x158>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b28a:	d115      	bne.n	800b2b8 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	689a      	ldr	r2, [r3, #8]
 800b292:	4b14      	ldr	r3, [pc, #80]	@ (800b2e4 <HAL_TIM_PWM_Start+0x1b0>)
 800b294:	4013      	ands	r3, r2
 800b296:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2b06      	cmp	r3, #6
 800b29c:	d015      	beq.n	800b2ca <HAL_TIM_PWM_Start+0x196>
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2a4:	d011      	beq.n	800b2ca <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f042 0201 	orr.w	r2, r2, #1
 800b2b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2b6:	e008      	b.n	800b2ca <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f042 0201 	orr.w	r2, r2, #1
 800b2c6:	601a      	str	r2, [r3, #0]
 800b2c8:	e000      	b.n	800b2cc <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b2cc:	2300      	movs	r3, #0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3710      	adds	r7, #16
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	40012c00 	.word	0x40012c00
 800b2dc:	40014400 	.word	0x40014400
 800b2e0:	40014800 	.word	0x40014800
 800b2e4:	00010007 	.word	0x00010007

0800b2e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b084      	sub	sp, #16
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	68db      	ldr	r3, [r3, #12]
 800b2f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	f003 0302 	and.w	r3, r3, #2
 800b306:	2b00      	cmp	r3, #0
 800b308:	d020      	beq.n	800b34c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f003 0302 	and.w	r3, r3, #2
 800b310:	2b00      	cmp	r3, #0
 800b312:	d01b      	beq.n	800b34c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f06f 0202 	mvn.w	r2, #2
 800b31c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2201      	movs	r2, #1
 800b322:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	699b      	ldr	r3, [r3, #24]
 800b32a:	f003 0303 	and.w	r3, r3, #3
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d003      	beq.n	800b33a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 fac7 	bl	800b8c6 <HAL_TIM_IC_CaptureCallback>
 800b338:	e005      	b.n	800b346 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 fab9 	bl	800b8b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 faca 	bl	800b8da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2200      	movs	r2, #0
 800b34a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	f003 0304 	and.w	r3, r3, #4
 800b352:	2b00      	cmp	r3, #0
 800b354:	d020      	beq.n	800b398 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f003 0304 	and.w	r3, r3, #4
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d01b      	beq.n	800b398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f06f 0204 	mvn.w	r2, #4
 800b368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2202      	movs	r2, #2
 800b36e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	699b      	ldr	r3, [r3, #24]
 800b376:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d003      	beq.n	800b386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 faa1 	bl	800b8c6 <HAL_TIM_IC_CaptureCallback>
 800b384:	e005      	b.n	800b392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 fa93 	bl	800b8b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f000 faa4 	bl	800b8da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2200      	movs	r2, #0
 800b396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	f003 0308 	and.w	r3, r3, #8
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d020      	beq.n	800b3e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f003 0308 	and.w	r3, r3, #8
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d01b      	beq.n	800b3e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f06f 0208 	mvn.w	r2, #8
 800b3b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2204      	movs	r2, #4
 800b3ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	69db      	ldr	r3, [r3, #28]
 800b3c2:	f003 0303 	and.w	r3, r3, #3
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d003      	beq.n	800b3d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 fa7b 	bl	800b8c6 <HAL_TIM_IC_CaptureCallback>
 800b3d0:	e005      	b.n	800b3de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 fa6d 	bl	800b8b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f000 fa7e 	bl	800b8da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	f003 0310 	and.w	r3, r3, #16
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d020      	beq.n	800b430 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f003 0310 	and.w	r3, r3, #16
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d01b      	beq.n	800b430 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f06f 0210 	mvn.w	r2, #16
 800b400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2208      	movs	r2, #8
 800b406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	69db      	ldr	r3, [r3, #28]
 800b40e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b412:	2b00      	cmp	r3, #0
 800b414:	d003      	beq.n	800b41e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f000 fa55 	bl	800b8c6 <HAL_TIM_IC_CaptureCallback>
 800b41c:	e005      	b.n	800b42a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 fa47 	bl	800b8b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 fa58 	bl	800b8da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2200      	movs	r2, #0
 800b42e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	f003 0301 	and.w	r3, r3, #1
 800b436:	2b00      	cmp	r3, #0
 800b438:	d00c      	beq.n	800b454 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	f003 0301 	and.w	r3, r3, #1
 800b440:	2b00      	cmp	r3, #0
 800b442:	d007      	beq.n	800b454 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f06f 0201 	mvn.w	r2, #1
 800b44c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f7f7 fd24 	bl	8002e9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d104      	bne.n	800b468 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b464:	2b00      	cmp	r3, #0
 800b466:	d00c      	beq.n	800b482 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d007      	beq.n	800b482 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b47a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 fedb 	bl	800c238 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d00c      	beq.n	800b4a6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b492:	2b00      	cmp	r3, #0
 800b494:	d007      	beq.n	800b4a6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b49e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f000 fed3 	bl	800c24c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d00c      	beq.n	800b4ca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d007      	beq.n	800b4ca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b4c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 fa12 	bl	800b8ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	f003 0320 	and.w	r3, r3, #32
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d00c      	beq.n	800b4ee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f003 0320 	and.w	r3, r3, #32
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d007      	beq.n	800b4ee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f06f 0220 	mvn.w	r2, #32
 800b4e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 fe9b 	bl	800c224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b4ee:	bf00      	nop
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
	...

0800b4f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b086      	sub	sp, #24
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b504:	2300      	movs	r3, #0
 800b506:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d101      	bne.n	800b516 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b512:	2302      	movs	r3, #2
 800b514:	e0ff      	b.n	800b716 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2201      	movs	r2, #1
 800b51a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2b14      	cmp	r3, #20
 800b522:	f200 80f0 	bhi.w	800b706 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b526:	a201      	add	r2, pc, #4	@ (adr r2, 800b52c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b52c:	0800b581 	.word	0x0800b581
 800b530:	0800b707 	.word	0x0800b707
 800b534:	0800b707 	.word	0x0800b707
 800b538:	0800b707 	.word	0x0800b707
 800b53c:	0800b5c1 	.word	0x0800b5c1
 800b540:	0800b707 	.word	0x0800b707
 800b544:	0800b707 	.word	0x0800b707
 800b548:	0800b707 	.word	0x0800b707
 800b54c:	0800b603 	.word	0x0800b603
 800b550:	0800b707 	.word	0x0800b707
 800b554:	0800b707 	.word	0x0800b707
 800b558:	0800b707 	.word	0x0800b707
 800b55c:	0800b643 	.word	0x0800b643
 800b560:	0800b707 	.word	0x0800b707
 800b564:	0800b707 	.word	0x0800b707
 800b568:	0800b707 	.word	0x0800b707
 800b56c:	0800b685 	.word	0x0800b685
 800b570:	0800b707 	.word	0x0800b707
 800b574:	0800b707 	.word	0x0800b707
 800b578:	0800b707 	.word	0x0800b707
 800b57c:	0800b6c5 	.word	0x0800b6c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	68b9      	ldr	r1, [r7, #8]
 800b586:	4618      	mov	r0, r3
 800b588:	f000 fa26 	bl	800b9d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	699a      	ldr	r2, [r3, #24]
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f042 0208 	orr.w	r2, r2, #8
 800b59a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	699a      	ldr	r2, [r3, #24]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f022 0204 	bic.w	r2, r2, #4
 800b5aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	6999      	ldr	r1, [r3, #24]
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	691a      	ldr	r2, [r3, #16]
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	430a      	orrs	r2, r1
 800b5bc:	619a      	str	r2, [r3, #24]
      break;
 800b5be:	e0a5      	b.n	800b70c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	68b9      	ldr	r1, [r7, #8]
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f000 fa82 	bl	800bad0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	699a      	ldr	r2, [r3, #24]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b5da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	699a      	ldr	r2, [r3, #24]
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b5ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	6999      	ldr	r1, [r3, #24]
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	691b      	ldr	r3, [r3, #16]
 800b5f6:	021a      	lsls	r2, r3, #8
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	430a      	orrs	r2, r1
 800b5fe:	619a      	str	r2, [r3, #24]
      break;
 800b600:	e084      	b.n	800b70c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	68b9      	ldr	r1, [r7, #8]
 800b608:	4618      	mov	r0, r3
 800b60a:	f000 fadb 	bl	800bbc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	69da      	ldr	r2, [r3, #28]
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f042 0208 	orr.w	r2, r2, #8
 800b61c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	69da      	ldr	r2, [r3, #28]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f022 0204 	bic.w	r2, r2, #4
 800b62c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	69d9      	ldr	r1, [r3, #28]
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	691a      	ldr	r2, [r3, #16]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	430a      	orrs	r2, r1
 800b63e:	61da      	str	r2, [r3, #28]
      break;
 800b640:	e064      	b.n	800b70c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	68b9      	ldr	r1, [r7, #8]
 800b648:	4618      	mov	r0, r3
 800b64a:	f000 fb33 	bl	800bcb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	69da      	ldr	r2, [r3, #28]
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b65c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	69da      	ldr	r2, [r3, #28]
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b66c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	69d9      	ldr	r1, [r3, #28]
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	691b      	ldr	r3, [r3, #16]
 800b678:	021a      	lsls	r2, r3, #8
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	430a      	orrs	r2, r1
 800b680:	61da      	str	r2, [r3, #28]
      break;
 800b682:	e043      	b.n	800b70c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	68b9      	ldr	r1, [r7, #8]
 800b68a:	4618      	mov	r0, r3
 800b68c:	f000 fb70 	bl	800bd70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f042 0208 	orr.w	r2, r2, #8
 800b69e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f022 0204 	bic.w	r2, r2, #4
 800b6ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	691a      	ldr	r2, [r3, #16]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	430a      	orrs	r2, r1
 800b6c0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b6c2:	e023      	b.n	800b70c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	68b9      	ldr	r1, [r7, #8]
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f000 fba8 	bl	800be20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b6de:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b6ee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	691b      	ldr	r3, [r3, #16]
 800b6fa:	021a      	lsls	r2, r3, #8
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	430a      	orrs	r2, r1
 800b702:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b704:	e002      	b.n	800b70c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b706:	2301      	movs	r3, #1
 800b708:	75fb      	strb	r3, [r7, #23]
      break;
 800b70a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2200      	movs	r2, #0
 800b710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b714:	7dfb      	ldrb	r3, [r7, #23]
}
 800b716:	4618      	mov	r0, r3
 800b718:	3718      	adds	r7, #24
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop

0800b720 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b72a:	2300      	movs	r3, #0
 800b72c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b734:	2b01      	cmp	r3, #1
 800b736:	d101      	bne.n	800b73c <HAL_TIM_ConfigClockSource+0x1c>
 800b738:	2302      	movs	r3, #2
 800b73a:	e0b6      	b.n	800b8aa <HAL_TIM_ConfigClockSource+0x18a>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2201      	movs	r2, #1
 800b740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2202      	movs	r2, #2
 800b748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	689b      	ldr	r3, [r3, #8]
 800b752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800b75a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b75e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b766:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	68ba      	ldr	r2, [r7, #8]
 800b76e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b778:	d03e      	beq.n	800b7f8 <HAL_TIM_ConfigClockSource+0xd8>
 800b77a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b77e:	f200 8087 	bhi.w	800b890 <HAL_TIM_ConfigClockSource+0x170>
 800b782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b786:	f000 8086 	beq.w	800b896 <HAL_TIM_ConfigClockSource+0x176>
 800b78a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b78e:	d87f      	bhi.n	800b890 <HAL_TIM_ConfigClockSource+0x170>
 800b790:	2b70      	cmp	r3, #112	@ 0x70
 800b792:	d01a      	beq.n	800b7ca <HAL_TIM_ConfigClockSource+0xaa>
 800b794:	2b70      	cmp	r3, #112	@ 0x70
 800b796:	d87b      	bhi.n	800b890 <HAL_TIM_ConfigClockSource+0x170>
 800b798:	2b60      	cmp	r3, #96	@ 0x60
 800b79a:	d050      	beq.n	800b83e <HAL_TIM_ConfigClockSource+0x11e>
 800b79c:	2b60      	cmp	r3, #96	@ 0x60
 800b79e:	d877      	bhi.n	800b890 <HAL_TIM_ConfigClockSource+0x170>
 800b7a0:	2b50      	cmp	r3, #80	@ 0x50
 800b7a2:	d03c      	beq.n	800b81e <HAL_TIM_ConfigClockSource+0xfe>
 800b7a4:	2b50      	cmp	r3, #80	@ 0x50
 800b7a6:	d873      	bhi.n	800b890 <HAL_TIM_ConfigClockSource+0x170>
 800b7a8:	2b40      	cmp	r3, #64	@ 0x40
 800b7aa:	d058      	beq.n	800b85e <HAL_TIM_ConfigClockSource+0x13e>
 800b7ac:	2b40      	cmp	r3, #64	@ 0x40
 800b7ae:	d86f      	bhi.n	800b890 <HAL_TIM_ConfigClockSource+0x170>
 800b7b0:	2b30      	cmp	r3, #48	@ 0x30
 800b7b2:	d064      	beq.n	800b87e <HAL_TIM_ConfigClockSource+0x15e>
 800b7b4:	2b30      	cmp	r3, #48	@ 0x30
 800b7b6:	d86b      	bhi.n	800b890 <HAL_TIM_ConfigClockSource+0x170>
 800b7b8:	2b20      	cmp	r3, #32
 800b7ba:	d060      	beq.n	800b87e <HAL_TIM_ConfigClockSource+0x15e>
 800b7bc:	2b20      	cmp	r3, #32
 800b7be:	d867      	bhi.n	800b890 <HAL_TIM_ConfigClockSource+0x170>
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d05c      	beq.n	800b87e <HAL_TIM_ConfigClockSource+0x15e>
 800b7c4:	2b10      	cmp	r3, #16
 800b7c6:	d05a      	beq.n	800b87e <HAL_TIM_ConfigClockSource+0x15e>
 800b7c8:	e062      	b.n	800b890 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b7da:	f000 fbf7 	bl	800bfcc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	689b      	ldr	r3, [r3, #8]
 800b7e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b7ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	68ba      	ldr	r2, [r7, #8]
 800b7f4:	609a      	str	r2, [r3, #8]
      break;
 800b7f6:	e04f      	b.n	800b898 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b808:	f000 fbe0 	bl	800bfcc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	689a      	ldr	r2, [r3, #8]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b81a:	609a      	str	r2, [r3, #8]
      break;
 800b81c:	e03c      	b.n	800b898 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b82a:	461a      	mov	r2, r3
 800b82c:	f000 fb52 	bl	800bed4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	2150      	movs	r1, #80	@ 0x50
 800b836:	4618      	mov	r0, r3
 800b838:	f000 fbab 	bl	800bf92 <TIM_ITRx_SetConfig>
      break;
 800b83c:	e02c      	b.n	800b898 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b84a:	461a      	mov	r2, r3
 800b84c:	f000 fb71 	bl	800bf32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2160      	movs	r1, #96	@ 0x60
 800b856:	4618      	mov	r0, r3
 800b858:	f000 fb9b 	bl	800bf92 <TIM_ITRx_SetConfig>
      break;
 800b85c:	e01c      	b.n	800b898 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b86a:	461a      	mov	r2, r3
 800b86c:	f000 fb32 	bl	800bed4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	2140      	movs	r1, #64	@ 0x40
 800b876:	4618      	mov	r0, r3
 800b878:	f000 fb8b 	bl	800bf92 <TIM_ITRx_SetConfig>
      break;
 800b87c:	e00c      	b.n	800b898 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4619      	mov	r1, r3
 800b888:	4610      	mov	r0, r2
 800b88a:	f000 fb82 	bl	800bf92 <TIM_ITRx_SetConfig>
      break;
 800b88e:	e003      	b.n	800b898 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800b890:	2301      	movs	r3, #1
 800b892:	73fb      	strb	r3, [r7, #15]
      break;
 800b894:	e000      	b.n	800b898 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800b896:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2201      	movs	r2, #1
 800b89c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3710      	adds	r7, #16
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}

0800b8b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b8b2:	b480      	push	{r7}
 800b8b4:	b083      	sub	sp, #12
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b8ba:	bf00      	nop
 800b8bc:	370c      	adds	r7, #12
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr

0800b8c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b8c6:	b480      	push	{r7}
 800b8c8:	b083      	sub	sp, #12
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b8ce:	bf00      	nop
 800b8d0:	370c      	adds	r7, #12
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr

0800b8da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b8da:	b480      	push	{r7}
 800b8dc:	b083      	sub	sp, #12
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b8e2:	bf00      	nop
 800b8e4:	370c      	adds	r7, #12
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ec:	4770      	bx	lr

0800b8ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b8ee:	b480      	push	{r7}
 800b8f0:	b083      	sub	sp, #12
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b8f6:	bf00      	nop
 800b8f8:	370c      	adds	r7, #12
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr
	...

0800b904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b904:	b480      	push	{r7}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	4a2d      	ldr	r2, [pc, #180]	@ (800b9cc <TIM_Base_SetConfig+0xc8>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d003      	beq.n	800b924 <TIM_Base_SetConfig+0x20>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b922:	d108      	bne.n	800b936 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b92a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	68fa      	ldr	r2, [r7, #12]
 800b932:	4313      	orrs	r3, r2
 800b934:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	4a24      	ldr	r2, [pc, #144]	@ (800b9cc <TIM_Base_SetConfig+0xc8>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d00b      	beq.n	800b956 <TIM_Base_SetConfig+0x52>
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b944:	d007      	beq.n	800b956 <TIM_Base_SetConfig+0x52>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	4a21      	ldr	r2, [pc, #132]	@ (800b9d0 <TIM_Base_SetConfig+0xcc>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d003      	beq.n	800b956 <TIM_Base_SetConfig+0x52>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	4a20      	ldr	r2, [pc, #128]	@ (800b9d4 <TIM_Base_SetConfig+0xd0>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d108      	bne.n	800b968 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b95c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	68db      	ldr	r3, [r3, #12]
 800b962:	68fa      	ldr	r2, [r7, #12]
 800b964:	4313      	orrs	r3, r2
 800b966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	695b      	ldr	r3, [r3, #20]
 800b972:	4313      	orrs	r3, r2
 800b974:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	689a      	ldr	r2, [r3, #8]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	4a10      	ldr	r2, [pc, #64]	@ (800b9cc <TIM_Base_SetConfig+0xc8>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d007      	beq.n	800b99e <TIM_Base_SetConfig+0x9a>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	4a0f      	ldr	r2, [pc, #60]	@ (800b9d0 <TIM_Base_SetConfig+0xcc>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d003      	beq.n	800b99e <TIM_Base_SetConfig+0x9a>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	4a0e      	ldr	r2, [pc, #56]	@ (800b9d4 <TIM_Base_SetConfig+0xd0>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d103      	bne.n	800b9a6 <TIM_Base_SetConfig+0xa2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	691a      	ldr	r2, [r3, #16]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f043 0204 	orr.w	r2, r3, #4
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	68fa      	ldr	r2, [r7, #12]
 800b9bc:	601a      	str	r2, [r3, #0]
}
 800b9be:	bf00      	nop
 800b9c0:	3714      	adds	r7, #20
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr
 800b9ca:	bf00      	nop
 800b9cc:	40012c00 	.word	0x40012c00
 800b9d0:	40014400 	.word	0x40014400
 800b9d4:	40014800 	.word	0x40014800

0800b9d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b087      	sub	sp, #28
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6a1b      	ldr	r3, [r3, #32]
 800b9e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6a1b      	ldr	r3, [r3, #32]
 800b9ec:	f023 0201 	bic.w	r2, r3, #1
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	699b      	ldr	r3, [r3, #24]
 800b9fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ba06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f023 0303 	bic.w	r3, r3, #3
 800ba12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	68fa      	ldr	r2, [r7, #12]
 800ba1a:	4313      	orrs	r3, r2
 800ba1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	f023 0302 	bic.w	r3, r3, #2
 800ba24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	689b      	ldr	r3, [r3, #8]
 800ba2a:	697a      	ldr	r2, [r7, #20]
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	4a24      	ldr	r2, [pc, #144]	@ (800bac4 <TIM_OC1_SetConfig+0xec>)
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d007      	beq.n	800ba48 <TIM_OC1_SetConfig+0x70>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	4a23      	ldr	r2, [pc, #140]	@ (800bac8 <TIM_OC1_SetConfig+0xf0>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d003      	beq.n	800ba48 <TIM_OC1_SetConfig+0x70>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	4a22      	ldr	r2, [pc, #136]	@ (800bacc <TIM_OC1_SetConfig+0xf4>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d10c      	bne.n	800ba62 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	f023 0308 	bic.w	r3, r3, #8
 800ba4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	68db      	ldr	r3, [r3, #12]
 800ba54:	697a      	ldr	r2, [r7, #20]
 800ba56:	4313      	orrs	r3, r2
 800ba58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	f023 0304 	bic.w	r3, r3, #4
 800ba60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	4a17      	ldr	r2, [pc, #92]	@ (800bac4 <TIM_OC1_SetConfig+0xec>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d007      	beq.n	800ba7a <TIM_OC1_SetConfig+0xa2>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	4a17      	ldr	r2, [pc, #92]	@ (800bacc <TIM_OC1_SetConfig+0xf4>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d003      	beq.n	800ba7a <TIM_OC1_SetConfig+0xa2>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	4a14      	ldr	r2, [pc, #80]	@ (800bac8 <TIM_OC1_SetConfig+0xf0>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d111      	bne.n	800ba9e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ba80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ba88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	695b      	ldr	r3, [r3, #20]
 800ba8e:	693a      	ldr	r2, [r7, #16]
 800ba90:	4313      	orrs	r3, r2
 800ba92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	699b      	ldr	r3, [r3, #24]
 800ba98:	693a      	ldr	r2, [r7, #16]
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	693a      	ldr	r2, [r7, #16]
 800baa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	68fa      	ldr	r2, [r7, #12]
 800baa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	685a      	ldr	r2, [r3, #4]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	697a      	ldr	r2, [r7, #20]
 800bab6:	621a      	str	r2, [r3, #32]
}
 800bab8:	bf00      	nop
 800baba:	371c      	adds	r7, #28
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr
 800bac4:	40012c00 	.word	0x40012c00
 800bac8:	40014800 	.word	0x40014800
 800bacc:	40014400 	.word	0x40014400

0800bad0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b087      	sub	sp, #28
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6a1b      	ldr	r3, [r3, #32]
 800bade:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6a1b      	ldr	r3, [r3, #32]
 800bae4:	f023 0210 	bic.w	r2, r3, #16
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	699b      	ldr	r3, [r3, #24]
 800baf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bafe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	021b      	lsls	r3, r3, #8
 800bb12:	68fa      	ldr	r2, [r7, #12]
 800bb14:	4313      	orrs	r3, r2
 800bb16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	f023 0320 	bic.w	r3, r3, #32
 800bb1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	689b      	ldr	r3, [r3, #8]
 800bb24:	011b      	lsls	r3, r3, #4
 800bb26:	697a      	ldr	r2, [r7, #20]
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	4a22      	ldr	r2, [pc, #136]	@ (800bbb8 <TIM_OC2_SetConfig+0xe8>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d10d      	bne.n	800bb50 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bb3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	011b      	lsls	r3, r3, #4
 800bb42:	697a      	ldr	r2, [r7, #20]
 800bb44:	4313      	orrs	r3, r2
 800bb46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	4a19      	ldr	r2, [pc, #100]	@ (800bbb8 <TIM_OC2_SetConfig+0xe8>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d007      	beq.n	800bb68 <TIM_OC2_SetConfig+0x98>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	4a18      	ldr	r2, [pc, #96]	@ (800bbbc <TIM_OC2_SetConfig+0xec>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d003      	beq.n	800bb68 <TIM_OC2_SetConfig+0x98>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	4a17      	ldr	r2, [pc, #92]	@ (800bbc0 <TIM_OC2_SetConfig+0xf0>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d113      	bne.n	800bb90 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bb6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bb76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	695b      	ldr	r3, [r3, #20]
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	693a      	ldr	r2, [r7, #16]
 800bb80:	4313      	orrs	r3, r2
 800bb82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	699b      	ldr	r3, [r3, #24]
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	693a      	ldr	r2, [r7, #16]
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	693a      	ldr	r2, [r7, #16]
 800bb94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	68fa      	ldr	r2, [r7, #12]
 800bb9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	685a      	ldr	r2, [r3, #4]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	697a      	ldr	r2, [r7, #20]
 800bba8:	621a      	str	r2, [r3, #32]
}
 800bbaa:	bf00      	nop
 800bbac:	371c      	adds	r7, #28
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr
 800bbb6:	bf00      	nop
 800bbb8:	40012c00 	.word	0x40012c00
 800bbbc:	40014400 	.word	0x40014400
 800bbc0:	40014800 	.word	0x40014800

0800bbc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b087      	sub	sp, #28
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6a1b      	ldr	r3, [r3, #32]
 800bbd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6a1b      	ldr	r3, [r3, #32]
 800bbd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	69db      	ldr	r3, [r3, #28]
 800bbea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bbf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f023 0303 	bic.w	r3, r3, #3
 800bbfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	68fa      	ldr	r2, [r7, #12]
 800bc06:	4313      	orrs	r3, r2
 800bc08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bc10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	689b      	ldr	r3, [r3, #8]
 800bc16:	021b      	lsls	r3, r3, #8
 800bc18:	697a      	ldr	r2, [r7, #20]
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	4a21      	ldr	r2, [pc, #132]	@ (800bca8 <TIM_OC3_SetConfig+0xe4>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d10d      	bne.n	800bc42 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bc2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	021b      	lsls	r3, r3, #8
 800bc34:	697a      	ldr	r2, [r7, #20]
 800bc36:	4313      	orrs	r3, r2
 800bc38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bc40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	4a18      	ldr	r2, [pc, #96]	@ (800bca8 <TIM_OC3_SetConfig+0xe4>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d007      	beq.n	800bc5a <TIM_OC3_SetConfig+0x96>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	4a17      	ldr	r2, [pc, #92]	@ (800bcac <TIM_OC3_SetConfig+0xe8>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d003      	beq.n	800bc5a <TIM_OC3_SetConfig+0x96>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	4a16      	ldr	r2, [pc, #88]	@ (800bcb0 <TIM_OC3_SetConfig+0xec>)
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d113      	bne.n	800bc82 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bc60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bc68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	695b      	ldr	r3, [r3, #20]
 800bc6e:	011b      	lsls	r3, r3, #4
 800bc70:	693a      	ldr	r2, [r7, #16]
 800bc72:	4313      	orrs	r3, r2
 800bc74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	699b      	ldr	r3, [r3, #24]
 800bc7a:	011b      	lsls	r3, r3, #4
 800bc7c:	693a      	ldr	r2, [r7, #16]
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	693a      	ldr	r2, [r7, #16]
 800bc86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	68fa      	ldr	r2, [r7, #12]
 800bc8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	685a      	ldr	r2, [r3, #4]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	697a      	ldr	r2, [r7, #20]
 800bc9a:	621a      	str	r2, [r3, #32]
}
 800bc9c:	bf00      	nop
 800bc9e:	371c      	adds	r7, #28
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr
 800bca8:	40012c00 	.word	0x40012c00
 800bcac:	40014400 	.word	0x40014400
 800bcb0:	40014800 	.word	0x40014800

0800bcb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b087      	sub	sp, #28
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6a1b      	ldr	r3, [r3, #32]
 800bcc2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6a1b      	ldr	r3, [r3, #32]
 800bcc8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	69db      	ldr	r3, [r3, #28]
 800bcda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bcee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	021b      	lsls	r3, r3, #8
 800bcf6:	68fa      	ldr	r2, [r7, #12]
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bd02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	689b      	ldr	r3, [r3, #8]
 800bd08:	031b      	lsls	r3, r3, #12
 800bd0a:	693a      	ldr	r2, [r7, #16]
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	4a14      	ldr	r2, [pc, #80]	@ (800bd64 <TIM_OC4_SetConfig+0xb0>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d007      	beq.n	800bd28 <TIM_OC4_SetConfig+0x74>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	4a13      	ldr	r2, [pc, #76]	@ (800bd68 <TIM_OC4_SetConfig+0xb4>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d003      	beq.n	800bd28 <TIM_OC4_SetConfig+0x74>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	4a12      	ldr	r2, [pc, #72]	@ (800bd6c <TIM_OC4_SetConfig+0xb8>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d109      	bne.n	800bd3c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bd2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	695b      	ldr	r3, [r3, #20]
 800bd34:	019b      	lsls	r3, r3, #6
 800bd36:	697a      	ldr	r2, [r7, #20]
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	697a      	ldr	r2, [r7, #20]
 800bd40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	68fa      	ldr	r2, [r7, #12]
 800bd46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	685a      	ldr	r2, [r3, #4]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	693a      	ldr	r2, [r7, #16]
 800bd54:	621a      	str	r2, [r3, #32]
}
 800bd56:	bf00      	nop
 800bd58:	371c      	adds	r7, #28
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr
 800bd62:	bf00      	nop
 800bd64:	40012c00 	.word	0x40012c00
 800bd68:	40014400 	.word	0x40014400
 800bd6c:	40014800 	.word	0x40014800

0800bd70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b087      	sub	sp, #28
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6a1b      	ldr	r3, [r3, #32]
 800bd7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6a1b      	ldr	r3, [r3, #32]
 800bd84:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bd9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bda2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	68fa      	ldr	r2, [r7, #12]
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bdb4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	689b      	ldr	r3, [r3, #8]
 800bdba:	041b      	lsls	r3, r3, #16
 800bdbc:	693a      	ldr	r2, [r7, #16]
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	4a13      	ldr	r2, [pc, #76]	@ (800be14 <TIM_OC5_SetConfig+0xa4>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d007      	beq.n	800bdda <TIM_OC5_SetConfig+0x6a>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	4a12      	ldr	r2, [pc, #72]	@ (800be18 <TIM_OC5_SetConfig+0xa8>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d003      	beq.n	800bdda <TIM_OC5_SetConfig+0x6a>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	4a11      	ldr	r2, [pc, #68]	@ (800be1c <TIM_OC5_SetConfig+0xac>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d109      	bne.n	800bdee <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bde0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	695b      	ldr	r3, [r3, #20]
 800bde6:	021b      	lsls	r3, r3, #8
 800bde8:	697a      	ldr	r2, [r7, #20]
 800bdea:	4313      	orrs	r3, r2
 800bdec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	697a      	ldr	r2, [r7, #20]
 800bdf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	685a      	ldr	r2, [r3, #4]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	693a      	ldr	r2, [r7, #16]
 800be06:	621a      	str	r2, [r3, #32]
}
 800be08:	bf00      	nop
 800be0a:	371c      	adds	r7, #28
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr
 800be14:	40012c00 	.word	0x40012c00
 800be18:	40014400 	.word	0x40014400
 800be1c:	40014800 	.word	0x40014800

0800be20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800be20:	b480      	push	{r7}
 800be22:	b087      	sub	sp, #28
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6a1b      	ldr	r3, [r3, #32]
 800be2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6a1b      	ldr	r3, [r3, #32]
 800be34:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800be4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	021b      	lsls	r3, r3, #8
 800be5a:	68fa      	ldr	r2, [r7, #12]
 800be5c:	4313      	orrs	r3, r2
 800be5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800be66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	689b      	ldr	r3, [r3, #8]
 800be6c:	051b      	lsls	r3, r3, #20
 800be6e:	693a      	ldr	r2, [r7, #16]
 800be70:	4313      	orrs	r3, r2
 800be72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	4a14      	ldr	r2, [pc, #80]	@ (800bec8 <TIM_OC6_SetConfig+0xa8>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d007      	beq.n	800be8c <TIM_OC6_SetConfig+0x6c>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	4a13      	ldr	r2, [pc, #76]	@ (800becc <TIM_OC6_SetConfig+0xac>)
 800be80:	4293      	cmp	r3, r2
 800be82:	d003      	beq.n	800be8c <TIM_OC6_SetConfig+0x6c>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	4a12      	ldr	r2, [pc, #72]	@ (800bed0 <TIM_OC6_SetConfig+0xb0>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d109      	bne.n	800bea0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800be92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	695b      	ldr	r3, [r3, #20]
 800be98:	029b      	lsls	r3, r3, #10
 800be9a:	697a      	ldr	r2, [r7, #20]
 800be9c:	4313      	orrs	r3, r2
 800be9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	697a      	ldr	r2, [r7, #20]
 800bea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	68fa      	ldr	r2, [r7, #12]
 800beaa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	685a      	ldr	r2, [r3, #4]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	693a      	ldr	r2, [r7, #16]
 800beb8:	621a      	str	r2, [r3, #32]
}
 800beba:	bf00      	nop
 800bebc:	371c      	adds	r7, #28
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr
 800bec6:	bf00      	nop
 800bec8:	40012c00 	.word	0x40012c00
 800becc:	40014400 	.word	0x40014400
 800bed0:	40014800 	.word	0x40014800

0800bed4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b087      	sub	sp, #28
 800bed8:	af00      	add	r7, sp, #0
 800beda:	60f8      	str	r0, [r7, #12]
 800bedc:	60b9      	str	r1, [r7, #8]
 800bede:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	6a1b      	ldr	r3, [r3, #32]
 800bee4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	6a1b      	ldr	r3, [r3, #32]
 800beea:	f023 0201 	bic.w	r2, r3, #1
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	699b      	ldr	r3, [r3, #24]
 800bef6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800befe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	011b      	lsls	r3, r3, #4
 800bf04:	693a      	ldr	r2, [r7, #16]
 800bf06:	4313      	orrs	r3, r2
 800bf08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	f023 030a 	bic.w	r3, r3, #10
 800bf10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bf12:	697a      	ldr	r2, [r7, #20]
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	4313      	orrs	r3, r2
 800bf18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	693a      	ldr	r2, [r7, #16]
 800bf1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	697a      	ldr	r2, [r7, #20]
 800bf24:	621a      	str	r2, [r3, #32]
}
 800bf26:	bf00      	nop
 800bf28:	371c      	adds	r7, #28
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf30:	4770      	bx	lr

0800bf32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf32:	b480      	push	{r7}
 800bf34:	b087      	sub	sp, #28
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	60f8      	str	r0, [r7, #12]
 800bf3a:	60b9      	str	r1, [r7, #8]
 800bf3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	6a1b      	ldr	r3, [r3, #32]
 800bf42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	6a1b      	ldr	r3, [r3, #32]
 800bf48:	f023 0210 	bic.w	r2, r3, #16
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	699b      	ldr	r3, [r3, #24]
 800bf54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bf5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	031b      	lsls	r3, r3, #12
 800bf62:	693a      	ldr	r2, [r7, #16]
 800bf64:	4313      	orrs	r3, r2
 800bf66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bf6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	011b      	lsls	r3, r3, #4
 800bf74:	697a      	ldr	r2, [r7, #20]
 800bf76:	4313      	orrs	r3, r2
 800bf78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	693a      	ldr	r2, [r7, #16]
 800bf7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	697a      	ldr	r2, [r7, #20]
 800bf84:	621a      	str	r2, [r3, #32]
}
 800bf86:	bf00      	nop
 800bf88:	371c      	adds	r7, #28
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr

0800bf92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bf92:	b480      	push	{r7}
 800bf94:	b085      	sub	sp, #20
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
 800bf9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800bfa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bfae:	683a      	ldr	r2, [r7, #0]
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	f043 0307 	orr.w	r3, r3, #7
 800bfb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	68fa      	ldr	r2, [r7, #12]
 800bfbe:	609a      	str	r2, [r3, #8]
}
 800bfc0:	bf00      	nop
 800bfc2:	3714      	adds	r7, #20
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr

0800bfcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b087      	sub	sp, #28
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	60f8      	str	r0, [r7, #12]
 800bfd4:	60b9      	str	r1, [r7, #8]
 800bfd6:	607a      	str	r2, [r7, #4]
 800bfd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	689b      	ldr	r3, [r3, #8]
 800bfde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bfe6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	021a      	lsls	r2, r3, #8
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	431a      	orrs	r2, r3
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	4313      	orrs	r3, r2
 800bff4:	697a      	ldr	r2, [r7, #20]
 800bff6:	4313      	orrs	r3, r2
 800bff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	697a      	ldr	r2, [r7, #20]
 800bffe:	609a      	str	r2, [r3, #8]
}
 800c000:	bf00      	nop
 800c002:	371c      	adds	r7, #28
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr

0800c00c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b087      	sub	sp, #28
 800c010:	af00      	add	r7, sp, #0
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	f003 031f 	and.w	r3, r3, #31
 800c01e:	2201      	movs	r2, #1
 800c020:	fa02 f303 	lsl.w	r3, r2, r3
 800c024:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	6a1a      	ldr	r2, [r3, #32]
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	43db      	mvns	r3, r3
 800c02e:	401a      	ands	r2, r3
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	6a1a      	ldr	r2, [r3, #32]
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	f003 031f 	and.w	r3, r3, #31
 800c03e:	6879      	ldr	r1, [r7, #4]
 800c040:	fa01 f303 	lsl.w	r3, r1, r3
 800c044:	431a      	orrs	r2, r3
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	621a      	str	r2, [r3, #32]
}
 800c04a:	bf00      	nop
 800c04c:	371c      	adds	r7, #28
 800c04e:	46bd      	mov	sp, r7
 800c050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c054:	4770      	bx	lr
	...

0800c058 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c058:	b480      	push	{r7}
 800c05a:	b085      	sub	sp, #20
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c068:	2b01      	cmp	r3, #1
 800c06a:	d101      	bne.n	800c070 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c06c:	2302      	movs	r3, #2
 800c06e:	e04a      	b.n	800c106 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2201      	movs	r2, #1
 800c074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2202      	movs	r2, #2
 800c07c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	685b      	ldr	r3, [r3, #4]
 800c086:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	689b      	ldr	r3, [r3, #8]
 800c08e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4a1f      	ldr	r2, [pc, #124]	@ (800c114 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d108      	bne.n	800c0ac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c0a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	68fa      	ldr	r2, [r7, #12]
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	68fa      	ldr	r2, [r7, #12]
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	68fa      	ldr	r2, [r7, #12]
 800c0c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	4a12      	ldr	r2, [pc, #72]	@ (800c114 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d004      	beq.n	800c0da <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0d8:	d10c      	bne.n	800c0f4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c0e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	689b      	ldr	r3, [r3, #8]
 800c0e6:	68ba      	ldr	r2, [r7, #8]
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	68ba      	ldr	r2, [r7, #8]
 800c0f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c104:	2300      	movs	r3, #0
}
 800c106:	4618      	mov	r0, r3
 800c108:	3714      	adds	r7, #20
 800c10a:	46bd      	mov	sp, r7
 800c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c110:	4770      	bx	lr
 800c112:	bf00      	nop
 800c114:	40012c00 	.word	0x40012c00

0800c118 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c118:	b480      	push	{r7}
 800c11a:	b085      	sub	sp, #20
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c122:	2300      	movs	r3, #0
 800c124:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c12c:	2b01      	cmp	r3, #1
 800c12e:	d101      	bne.n	800c134 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c130:	2302      	movs	r3, #2
 800c132:	e06e      	b.n	800c212 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2201      	movs	r2, #1
 800c138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	68db      	ldr	r3, [r3, #12]
 800c146:	4313      	orrs	r3, r2
 800c148:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	689b      	ldr	r3, [r3, #8]
 800c154:	4313      	orrs	r3, r2
 800c156:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	4313      	orrs	r3, r2
 800c164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4313      	orrs	r3, r2
 800c172:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	691b      	ldr	r3, [r3, #16]
 800c17e:	4313      	orrs	r3, r2
 800c180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	695b      	ldr	r3, [r3, #20]
 800c18c:	4313      	orrs	r3, r2
 800c18e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c19a:	4313      	orrs	r3, r2
 800c19c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	699b      	ldr	r3, [r3, #24]
 800c1a8:	041b      	lsls	r3, r3, #16
 800c1aa:	4313      	orrs	r3, r2
 800c1ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	69db      	ldr	r3, [r3, #28]
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	4a17      	ldr	r2, [pc, #92]	@ (800c220 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d11c      	bne.n	800c200 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1d0:	051b      	lsls	r3, r3, #20
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	6a1b      	ldr	r3, [r3, #32]
 800c1e0:	4313      	orrs	r3, r2
 800c1e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1ee:	4313      	orrs	r3, r2
 800c1f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	68fa      	ldr	r2, [r7, #12]
 800c206:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c210:	2300      	movs	r3, #0
}
 800c212:	4618      	mov	r0, r3
 800c214:	3714      	adds	r7, #20
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr
 800c21e:	bf00      	nop
 800c220:	40012c00 	.word	0x40012c00

0800c224 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c22c:	bf00      	nop
 800c22e:	370c      	adds	r7, #12
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c238:	b480      	push	{r7}
 800c23a:	b083      	sub	sp, #12
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c240:	bf00      	nop
 800c242:	370c      	adds	r7, #12
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr

0800c24c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b083      	sub	sp, #12
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c254:	bf00      	nop
 800c256:	370c      	adds	r7, #12
 800c258:	46bd      	mov	sp, r7
 800c25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25e:	4770      	bx	lr

0800c260 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b088      	sub	sp, #32
 800c264:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800c266:	2300      	movs	r3, #0
 800c268:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c26a:	f107 0308 	add.w	r3, r7, #8
 800c26e:	2218      	movs	r2, #24
 800c270:	2100      	movs	r1, #0
 800c272:	4618      	mov	r0, r3
 800c274:	f001 f92d 	bl	800d4d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c278:	233f      	movs	r3, #63	@ 0x3f
 800c27a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800c27c:	2381      	movs	r3, #129	@ 0x81
 800c27e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c280:	1dfb      	adds	r3, r7, #7
 800c282:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c284:	2301      	movs	r3, #1
 800c286:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c288:	f107 0308 	add.w	r3, r7, #8
 800c28c:	2100      	movs	r1, #0
 800c28e:	4618      	mov	r0, r3
 800c290:	f001 fba8 	bl	800d9e4 <hci_send_req>
 800c294:	4603      	mov	r3, r0
 800c296:	2b00      	cmp	r3, #0
 800c298:	da01      	bge.n	800c29e <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800c29a:	23ff      	movs	r3, #255	@ 0xff
 800c29c:	e000      	b.n	800c2a0 <aci_gap_set_non_discoverable+0x40>
  return status;
 800c29e:	79fb      	ldrb	r3, [r7, #7]
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3720      	adds	r7, #32
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800c2a8:	b5b0      	push	{r4, r5, r7, lr}
 800c2aa:	b0ce      	sub	sp, #312	@ 0x138
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	4605      	mov	r5, r0
 800c2b0:	460c      	mov	r4, r1
 800c2b2:	4610      	mov	r0, r2
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c2ba:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800c2be:	462a      	mov	r2, r5
 800c2c0:	701a      	strb	r2, [r3, #0]
 800c2c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c2c6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c2ca:	4622      	mov	r2, r4
 800c2cc:	801a      	strh	r2, [r3, #0]
 800c2ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c2d2:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800c2d6:	4602      	mov	r2, r0
 800c2d8:	801a      	strh	r2, [r3, #0]
 800c2da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c2de:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800c2e2:	460a      	mov	r2, r1
 800c2e4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800c2e6:	f107 0310 	add.w	r3, r7, #16
 800c2ea:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800c2ee:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800c2f2:	3308      	adds	r3, #8
 800c2f4:	f107 0210 	add.w	r2, r7, #16
 800c2f8:	4413      	add	r3, r2
 800c2fa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800c2fe:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800c302:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800c306:	4413      	add	r3, r2
 800c308:	3309      	adds	r3, #9
 800c30a:	f107 0210 	add.w	r2, r7, #16
 800c30e:	4413      	add	r3, r2
 800c310:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800c314:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c318:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800c31c:	2200      	movs	r2, #0
 800c31e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c320:	2300      	movs	r3, #0
 800c322:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800c326:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c32a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800c32e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800c332:	7812      	ldrb	r2, [r2, #0]
 800c334:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c336:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c33a:	3301      	adds	r3, #1
 800c33c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800c340:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c344:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800c348:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800c34c:	8812      	ldrh	r2, [r2, #0]
 800c34e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800c352:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c356:	3302      	adds	r3, #2
 800c358:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800c35c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c360:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800c364:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800c368:	8812      	ldrh	r2, [r2, #0]
 800c36a:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800c36e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c372:	3302      	adds	r3, #2
 800c374:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800c378:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c37c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800c380:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800c384:	7812      	ldrb	r2, [r2, #0]
 800c386:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800c388:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c38c:	3301      	adds	r3, #1
 800c38e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800c392:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c396:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800c39a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800c39c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800c3a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c3aa:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800c3ae:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800c3b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800c3ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c3be:	3308      	adds	r3, #8
 800c3c0:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800c3c4:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f001 f872 	bl	800d4b2 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800c3ce:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800c3d2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800c3d6:	4413      	add	r3, r2
 800c3d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800c3dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800c3e0:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800c3e4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800c3e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800c3f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800c3fa:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800c3fe:	4618      	mov	r0, r3
 800c400:	f001 f857 	bl	800d4b2 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800c404:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800c408:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800c40c:	4413      	add	r3, r2
 800c40e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800c412:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c416:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800c41a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800c41c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c420:	3302      	adds	r3, #2
 800c422:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800c426:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c42a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800c42e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800c430:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c434:	3302      	adds	r3, #2
 800c436:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c43a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c43e:	2218      	movs	r2, #24
 800c440:	2100      	movs	r1, #0
 800c442:	4618      	mov	r0, r3
 800c444:	f001 f845 	bl	800d4d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c448:	233f      	movs	r3, #63	@ 0x3f
 800c44a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800c44e:	2383      	movs	r3, #131	@ 0x83
 800c450:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c454:	f107 0310 	add.w	r3, r7, #16
 800c458:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c45c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c460:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800c464:	f107 030f 	add.w	r3, r7, #15
 800c468:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800c46c:	2301      	movs	r3, #1
 800c46e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c472:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c476:	2100      	movs	r1, #0
 800c478:	4618      	mov	r0, r3
 800c47a:	f001 fab3 	bl	800d9e4 <hci_send_req>
 800c47e:	4603      	mov	r3, r0
 800c480:	2b00      	cmp	r3, #0
 800c482:	da01      	bge.n	800c488 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800c484:	23ff      	movs	r3, #255	@ 0xff
 800c486:	e004      	b.n	800c492 <aci_gap_set_discoverable+0x1ea>
  return status;
 800c488:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c48c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800c490:	781b      	ldrb	r3, [r3, #0]
}
 800c492:	4618      	mov	r0, r3
 800c494:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800c498:	46bd      	mov	sp, r7
 800c49a:	bdb0      	pop	{r4, r5, r7, pc}

0800c49c <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b0cc      	sub	sp, #304	@ 0x130
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c4a8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800c4ac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800c4ae:	f107 0310 	add.w	r3, r7, #16
 800c4b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800c4b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c4ba:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c4be:	2200      	movs	r2, #0
 800c4c0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800c4c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c4cc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c4d0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800c4d4:	7812      	ldrb	r2, [r2, #0]
 800c4d6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c4d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c4dc:	3301      	adds	r3, #1
 800c4de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c4e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c4e6:	2218      	movs	r2, #24
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f000 fff1 	bl	800d4d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c4f0:	233f      	movs	r3, #63	@ 0x3f
 800c4f2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800c4f6:	2385      	movs	r3, #133	@ 0x85
 800c4f8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c4fc:	f107 0310 	add.w	r3, r7, #16
 800c500:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c504:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c508:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800c50c:	f107 030f 	add.w	r3, r7, #15
 800c510:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800c514:	2301      	movs	r3, #1
 800c516:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c51a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c51e:	2100      	movs	r1, #0
 800c520:	4618      	mov	r0, r3
 800c522:	f001 fa5f 	bl	800d9e4 <hci_send_req>
 800c526:	4603      	mov	r3, r0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	da01      	bge.n	800c530 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800c52c:	23ff      	movs	r3, #255	@ 0xff
 800c52e:	e004      	b.n	800c53a <aci_gap_set_io_capability+0x9e>
  return status;
 800c530:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c534:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c538:	781b      	ldrb	r3, [r3, #0]
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800c544:	b5b0      	push	{r4, r5, r7, lr}
 800c546:	b0cc      	sub	sp, #304	@ 0x130
 800c548:	af00      	add	r7, sp, #0
 800c54a:	4605      	mov	r5, r0
 800c54c:	460c      	mov	r4, r1
 800c54e:	4610      	mov	r0, r2
 800c550:	4619      	mov	r1, r3
 800c552:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c556:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800c55a:	462a      	mov	r2, r5
 800c55c:	701a      	strb	r2, [r3, #0]
 800c55e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c562:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800c566:	4622      	mov	r2, r4
 800c568:	701a      	strb	r2, [r3, #0]
 800c56a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c56e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800c572:	4602      	mov	r2, r0
 800c574:	701a      	strb	r2, [r3, #0]
 800c576:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c57a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800c57e:	460a      	mov	r2, r1
 800c580:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800c582:	f107 0310 	add.w	r3, r7, #16
 800c586:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800c58a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c58e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c592:	2200      	movs	r2, #0
 800c594:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c596:	2300      	movs	r3, #0
 800c598:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800c59c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c5a0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c5a4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800c5a8:	7812      	ldrb	r2, [r2, #0]
 800c5aa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c5ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800c5b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c5ba:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c5be:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800c5c2:	7812      	ldrb	r2, [r2, #0]
 800c5c4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c5c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800c5d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c5d4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c5d8:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800c5dc:	7812      	ldrb	r2, [r2, #0]
 800c5de:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c5e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800c5ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c5ee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c5f2:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800c5f6:	7812      	ldrb	r2, [r2, #0]
 800c5f8:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800c5fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c5fe:	3301      	adds	r3, #1
 800c600:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800c604:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c608:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800c60c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800c60e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c612:	3301      	adds	r3, #1
 800c614:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800c618:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c61c:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800c620:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800c622:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c626:	3301      	adds	r3, #1
 800c628:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800c62c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c630:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800c634:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800c636:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c63a:	3301      	adds	r3, #1
 800c63c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800c640:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c644:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800c648:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800c64c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c650:	3304      	adds	r3, #4
 800c652:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800c656:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c65a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800c65e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800c660:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c664:	3301      	adds	r3, #1
 800c666:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c66a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c66e:	2218      	movs	r2, #24
 800c670:	2100      	movs	r1, #0
 800c672:	4618      	mov	r0, r3
 800c674:	f000 ff2d 	bl	800d4d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c678:	233f      	movs	r3, #63	@ 0x3f
 800c67a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800c67e:	2386      	movs	r3, #134	@ 0x86
 800c680:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c684:	f107 0310 	add.w	r3, r7, #16
 800c688:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c68c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c690:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800c694:	f107 030f 	add.w	r3, r7, #15
 800c698:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800c69c:	2301      	movs	r3, #1
 800c69e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c6a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c6a6:	2100      	movs	r1, #0
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f001 f99b 	bl	800d9e4 <hci_send_req>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	da01      	bge.n	800c6b8 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800c6b4:	23ff      	movs	r3, #255	@ 0xff
 800c6b6:	e004      	b.n	800c6c2 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800c6b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c6bc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c6c0:	781b      	ldrb	r3, [r3, #0]
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bdb0      	pop	{r4, r5, r7, pc}

0800c6cc <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b0cc      	sub	sp, #304	@ 0x130
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	4602      	mov	r2, r0
 800c6d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c6d8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c6dc:	6019      	str	r1, [r3, #0]
 800c6de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c6e2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800c6e6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800c6e8:	f107 0310 	add.w	r3, r7, #16
 800c6ec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800c6f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c6f4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800c702:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c706:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c70a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800c70e:	8812      	ldrh	r2, [r2, #0]
 800c710:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c712:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c716:	3302      	adds	r3, #2
 800c718:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800c71c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c720:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c724:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800c728:	6812      	ldr	r2, [r2, #0]
 800c72a:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800c72e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c732:	3304      	adds	r3, #4
 800c734:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c738:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c73c:	2218      	movs	r2, #24
 800c73e:	2100      	movs	r1, #0
 800c740:	4618      	mov	r0, r3
 800c742:	f000 fec6 	bl	800d4d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c746:	233f      	movs	r3, #63	@ 0x3f
 800c748:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800c74c:	2388      	movs	r3, #136	@ 0x88
 800c74e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c752:	f107 0310 	add.w	r3, r7, #16
 800c756:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c75a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c75e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800c762:	f107 030f 	add.w	r3, r7, #15
 800c766:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800c76a:	2301      	movs	r3, #1
 800c76c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c770:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c774:	2100      	movs	r1, #0
 800c776:	4618      	mov	r0, r3
 800c778:	f001 f934 	bl	800d9e4 <hci_send_req>
 800c77c:	4603      	mov	r3, r0
 800c77e:	2b00      	cmp	r3, #0
 800c780:	da01      	bge.n	800c786 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800c782:	23ff      	movs	r3, #255	@ 0xff
 800c784:	e004      	b.n	800c790 <aci_gap_pass_key_resp+0xc4>
  return status;
 800c786:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c78a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c78e:	781b      	ldrb	r3, [r3, #0]
}
 800c790:	4618      	mov	r0, r3
 800c792:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}

0800c79a <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800c79a:	b590      	push	{r4, r7, lr}
 800c79c:	b0cd      	sub	sp, #308	@ 0x134
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	4604      	mov	r4, r0
 800c7a2:	4608      	mov	r0, r1
 800c7a4:	4611      	mov	r1, r2
 800c7a6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c7aa:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800c7ae:	6013      	str	r3, [r2, #0]
 800c7b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c7b4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800c7b8:	4622      	mov	r2, r4
 800c7ba:	701a      	strb	r2, [r3, #0]
 800c7bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c7c0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800c7c4:	4602      	mov	r2, r0
 800c7c6:	701a      	strb	r2, [r3, #0]
 800c7c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c7cc:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800c7d0:	460a      	mov	r2, r1
 800c7d2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800c7d4:	f107 0310 	add.w	r3, r7, #16
 800c7d8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800c7dc:	f107 0308 	add.w	r3, r7, #8
 800c7e0:	2207      	movs	r2, #7
 800c7e2:	2100      	movs	r1, #0
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f000 fe74 	bl	800d4d2 <Osal_MemSet>
  int index_input = 0;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800c7f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c7f4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c7f8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800c7fc:	7812      	ldrb	r2, [r2, #0]
 800c7fe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c800:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c804:	3301      	adds	r3, #1
 800c806:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800c80a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c80e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c812:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800c816:	7812      	ldrb	r2, [r2, #0]
 800c818:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c81a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c81e:	3301      	adds	r3, #1
 800c820:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800c824:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c828:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c82c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800c830:	7812      	ldrb	r2, [r2, #0]
 800c832:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c834:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c838:	3301      	adds	r3, #1
 800c83a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c83e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c842:	2218      	movs	r2, #24
 800c844:	2100      	movs	r1, #0
 800c846:	4618      	mov	r0, r3
 800c848:	f000 fe43 	bl	800d4d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c84c:	233f      	movs	r3, #63	@ 0x3f
 800c84e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800c852:	238a      	movs	r3, #138	@ 0x8a
 800c854:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c858:	f107 0310 	add.w	r3, r7, #16
 800c85c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c860:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c864:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800c868:	f107 0308 	add.w	r3, r7, #8
 800c86c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800c870:	2307      	movs	r3, #7
 800c872:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c876:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c87a:	2100      	movs	r1, #0
 800c87c:	4618      	mov	r0, r3
 800c87e:	f001 f8b1 	bl	800d9e4 <hci_send_req>
 800c882:	4603      	mov	r3, r0
 800c884:	2b00      	cmp	r3, #0
 800c886:	da01      	bge.n	800c88c <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800c888:	23ff      	movs	r3, #255	@ 0xff
 800c88a:	e02e      	b.n	800c8ea <aci_gap_init+0x150>
  if ( resp.Status )
 800c88c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c890:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d005      	beq.n	800c8a6 <aci_gap_init+0x10c>
    return resp.Status;
 800c89a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c89e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	e021      	b.n	800c8ea <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800c8a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c8aa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800c8ae:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c8b2:	b29a      	uxth	r2, r3
 800c8b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c8b8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800c8c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c8c4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800c8c8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800c8cc:	b29a      	uxth	r2, r3
 800c8ce:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c8d2:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800c8d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c8d8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800c8dc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800c8e0:	b29a      	uxth	r2, r3
 800c8e2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800c8e6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800c8e8:	2300      	movs	r3, #0
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd90      	pop	{r4, r7, pc}

0800c8f4 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b0cc      	sub	sp, #304	@ 0x130
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c900:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c904:	6019      	str	r1, [r3, #0]
 800c906:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c90a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800c90e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800c910:	f107 0310 	add.w	r3, r7, #16
 800c914:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800c918:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c91c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c920:	2200      	movs	r2, #0
 800c922:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c924:	2300      	movs	r3, #0
 800c926:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800c92a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c92e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c932:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800c936:	7812      	ldrb	r2, [r2, #0]
 800c938:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c93a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c93e:	3301      	adds	r3, #1
 800c940:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800c944:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c948:	1c58      	adds	r0, r3, #1
 800c94a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c94e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800c952:	781a      	ldrb	r2, [r3, #0]
 800c954:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c958:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c95c:	6819      	ldr	r1, [r3, #0]
 800c95e:	f000 fda8 	bl	800d4b2 <Osal_MemCpy>
  index_input += AdvDataLen;
 800c962:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c966:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800c96a:	781b      	ldrb	r3, [r3, #0]
 800c96c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800c970:	4413      	add	r3, r2
 800c972:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c976:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c97a:	2218      	movs	r2, #24
 800c97c:	2100      	movs	r1, #0
 800c97e:	4618      	mov	r0, r3
 800c980:	f000 fda7 	bl	800d4d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c984:	233f      	movs	r3, #63	@ 0x3f
 800c986:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800c98a:	238e      	movs	r3, #142	@ 0x8e
 800c98c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c990:	f107 0310 	add.w	r3, r7, #16
 800c994:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c998:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c99c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800c9a0:	f107 030f 	add.w	r3, r7, #15
 800c9a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c9ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c9b2:	2100      	movs	r1, #0
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f001 f815 	bl	800d9e4 <hci_send_req>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	da01      	bge.n	800c9c4 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800c9c0:	23ff      	movs	r3, #255	@ 0xff
 800c9c2:	e004      	b.n	800c9ce <aci_gap_update_adv_data+0xda>
  return status;
 800c9c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c9c8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c9cc:	781b      	ldrb	r3, [r3, #0]
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b088      	sub	sp, #32
 800c9dc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c9e2:	f107 0308 	add.w	r3, r7, #8
 800c9e6:	2218      	movs	r2, #24
 800c9e8:	2100      	movs	r1, #0
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f000 fd71 	bl	800d4d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c9f0:	233f      	movs	r3, #63	@ 0x3f
 800c9f2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800c9f4:	2392      	movs	r3, #146	@ 0x92
 800c9f6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c9f8:	1dfb      	adds	r3, r7, #7
 800c9fa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ca00:	f107 0308 	add.w	r3, r7, #8
 800ca04:	2100      	movs	r1, #0
 800ca06:	4618      	mov	r0, r3
 800ca08:	f000 ffec 	bl	800d9e4 <hci_send_req>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	da01      	bge.n	800ca16 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ca12:	23ff      	movs	r3, #255	@ 0xff
 800ca14:	e000      	b.n	800ca18 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800ca16:	79fb      	ldrb	r3, [r7, #7]
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3720      	adds	r7, #32
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b0cc      	sub	sp, #304	@ 0x130
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	4602      	mov	r2, r0
 800ca28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ca2c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ca30:	801a      	strh	r2, [r3, #0]
 800ca32:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ca36:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800ca3a:	460a      	mov	r2, r1
 800ca3c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800ca3e:	f107 0310 	add.w	r3, r7, #16
 800ca42:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ca46:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ca4a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ca4e:	2200      	movs	r2, #0
 800ca50:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ca52:	2300      	movs	r3, #0
 800ca54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800ca58:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ca5c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ca60:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ca64:	8812      	ldrh	r2, [r2, #0]
 800ca66:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ca68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ca6c:	3302      	adds	r3, #2
 800ca6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800ca72:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ca76:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ca7a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800ca7e:	7812      	ldrb	r2, [r2, #0]
 800ca80:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ca82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ca86:	3301      	adds	r3, #1
 800ca88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ca8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ca90:	2218      	movs	r2, #24
 800ca92:	2100      	movs	r1, #0
 800ca94:	4618      	mov	r0, r3
 800ca96:	f000 fd1c 	bl	800d4d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ca9a:	233f      	movs	r3, #63	@ 0x3f
 800ca9c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800caa0:	23a5      	movs	r3, #165	@ 0xa5
 800caa2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800caa6:	f107 0310 	add.w	r3, r7, #16
 800caaa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800caae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cab2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800cab6:	f107 030f 	add.w	r3, r7, #15
 800caba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800cabe:	2301      	movs	r3, #1
 800cac0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cac4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cac8:	2100      	movs	r1, #0
 800caca:	4618      	mov	r0, r3
 800cacc:	f000 ff8a 	bl	800d9e4 <hci_send_req>
 800cad0:	4603      	mov	r3, r0
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	da01      	bge.n	800cada <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800cad6:	23ff      	movs	r3, #255	@ 0xff
 800cad8:	e004      	b.n	800cae4 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800cada:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cade:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cae2:	781b      	ldrb	r3, [r3, #0]
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}

0800caee <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800caee:	b580      	push	{r7, lr}
 800caf0:	b088      	sub	sp, #32
 800caf2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800caf4:	2300      	movs	r3, #0
 800caf6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800caf8:	f107 0308 	add.w	r3, r7, #8
 800cafc:	2218      	movs	r2, #24
 800cafe:	2100      	movs	r1, #0
 800cb00:	4618      	mov	r0, r3
 800cb02:	f000 fce6 	bl	800d4d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cb06:	233f      	movs	r3, #63	@ 0x3f
 800cb08:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800cb0a:	f240 1301 	movw	r3, #257	@ 0x101
 800cb0e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800cb10:	1dfb      	adds	r3, r7, #7
 800cb12:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800cb14:	2301      	movs	r3, #1
 800cb16:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cb18:	f107 0308 	add.w	r3, r7, #8
 800cb1c:	2100      	movs	r1, #0
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f000 ff60 	bl	800d9e4 <hci_send_req>
 800cb24:	4603      	mov	r3, r0
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	da01      	bge.n	800cb2e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800cb2a:	23ff      	movs	r3, #255	@ 0xff
 800cb2c:	e000      	b.n	800cb30 <aci_gatt_init+0x42>
  return status;
 800cb2e:	79fb      	ldrb	r3, [r7, #7]
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3720      	adds	r7, #32
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800cb38:	b590      	push	{r4, r7, lr}
 800cb3a:	b0cf      	sub	sp, #316	@ 0x13c
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	4604      	mov	r4, r0
 800cb40:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800cb44:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800cb48:	6001      	str	r1, [r0, #0]
 800cb4a:	4610      	mov	r0, r2
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cb52:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800cb56:	4622      	mov	r2, r4
 800cb58:	701a      	strb	r2, [r3, #0]
 800cb5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cb5e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800cb62:	4602      	mov	r2, r0
 800cb64:	701a      	strb	r2, [r3, #0]
 800cb66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cb6a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800cb6e:	460a      	mov	r2, r1
 800cb70:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800cb72:	f107 0310 	add.w	r3, r7, #16
 800cb76:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800cb7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cb7e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d00a      	beq.n	800cb9e <aci_gatt_add_service+0x66>
 800cb88:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cb8c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	2b02      	cmp	r3, #2
 800cb94:	d101      	bne.n	800cb9a <aci_gatt_add_service+0x62>
 800cb96:	2311      	movs	r3, #17
 800cb98:	e002      	b.n	800cba0 <aci_gatt_add_service+0x68>
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	e000      	b.n	800cba0 <aci_gatt_add_service+0x68>
 800cb9e:	2303      	movs	r3, #3
 800cba0:	f107 0210 	add.w	r2, r7, #16
 800cba4:	4413      	add	r3, r2
 800cba6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800cbaa:	f107 030c 	add.w	r3, r7, #12
 800cbae:	2203      	movs	r2, #3
 800cbb0:	2100      	movs	r1, #0
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f000 fc8d 	bl	800d4d2 <Osal_MemSet>
  int index_input = 0;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800cbbe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800cbc2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800cbc6:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800cbca:	7812      	ldrb	r2, [r2, #0]
 800cbcc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cbce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800cbd8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cbdc:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	2b01      	cmp	r3, #1
 800cbe4:	d002      	beq.n	800cbec <aci_gatt_add_service+0xb4>
 800cbe6:	2b02      	cmp	r3, #2
 800cbe8:	d004      	beq.n	800cbf4 <aci_gatt_add_service+0xbc>
 800cbea:	e007      	b.n	800cbfc <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800cbec:	2302      	movs	r3, #2
 800cbee:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800cbf2:	e005      	b.n	800cc00 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800cbf4:	2310      	movs	r3, #16
 800cbf6:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800cbfa:	e001      	b.n	800cc00 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800cbfc:	2397      	movs	r3, #151	@ 0x97
 800cbfe:	e06c      	b.n	800ccda <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800cc00:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800cc04:	1c58      	adds	r0, r3, #1
 800cc06:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800cc0a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cc0e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800cc12:	6819      	ldr	r1, [r3, #0]
 800cc14:	f000 fc4d 	bl	800d4b2 <Osal_MemCpy>
    index_input += size;
 800cc18:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800cc1c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800cc20:	4413      	add	r3, r2
 800cc22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800cc26:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cc2a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800cc2e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800cc32:	7812      	ldrb	r2, [r2, #0]
 800cc34:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800cc36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800cc40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cc44:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800cc48:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800cc4c:	7812      	ldrb	r2, [r2, #0]
 800cc4e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800cc50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cc54:	3301      	adds	r3, #1
 800cc56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cc5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cc5e:	2218      	movs	r2, #24
 800cc60:	2100      	movs	r1, #0
 800cc62:	4618      	mov	r0, r3
 800cc64:	f000 fc35 	bl	800d4d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cc68:	233f      	movs	r3, #63	@ 0x3f
 800cc6a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800cc6e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800cc72:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800cc76:	f107 0310 	add.w	r3, r7, #16
 800cc7a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800cc7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cc82:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800cc86:	f107 030c 	add.w	r3, r7, #12
 800cc8a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800cc8e:	2303      	movs	r3, #3
 800cc90:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cc94:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cc98:	2100      	movs	r1, #0
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f000 fea2 	bl	800d9e4 <hci_send_req>
 800cca0:	4603      	mov	r3, r0
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	da01      	bge.n	800ccaa <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800cca6:	23ff      	movs	r3, #255	@ 0xff
 800cca8:	e017      	b.n	800ccda <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800ccaa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ccae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d005      	beq.n	800ccc4 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800ccb8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ccbc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	e00a      	b.n	800ccda <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800ccc4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ccc8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800cccc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ccd0:	b29a      	uxth	r2, r3
 800ccd2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800ccd6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ccd8:	2300      	movs	r3, #0
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd90      	pop	{r4, r7, pc}

0800cce4 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800cce4:	b590      	push	{r4, r7, lr}
 800cce6:	b0d1      	sub	sp, #324	@ 0x144
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	4604      	mov	r4, r0
 800ccec:	4608      	mov	r0, r1
 800ccee:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800ccf2:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800ccf6:	600a      	str	r2, [r1, #0]
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ccfe:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800cd02:	4622      	mov	r2, r4
 800cd04:	801a      	strh	r2, [r3, #0]
 800cd06:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cd0a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800cd0e:	4602      	mov	r2, r0
 800cd10:	701a      	strb	r2, [r3, #0]
 800cd12:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cd16:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800cd1a:	460a      	mov	r2, r1
 800cd1c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800cd1e:	f107 0318 	add.w	r3, r7, #24
 800cd22:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800cd26:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cd2a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800cd2e:	781b      	ldrb	r3, [r3, #0]
 800cd30:	2b01      	cmp	r3, #1
 800cd32:	d00a      	beq.n	800cd4a <aci_gatt_add_char+0x66>
 800cd34:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cd38:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	2b02      	cmp	r3, #2
 800cd40:	d101      	bne.n	800cd46 <aci_gatt_add_char+0x62>
 800cd42:	2313      	movs	r3, #19
 800cd44:	e002      	b.n	800cd4c <aci_gatt_add_char+0x68>
 800cd46:	2303      	movs	r3, #3
 800cd48:	e000      	b.n	800cd4c <aci_gatt_add_char+0x68>
 800cd4a:	2305      	movs	r3, #5
 800cd4c:	f107 0218 	add.w	r2, r7, #24
 800cd50:	4413      	add	r3, r2
 800cd52:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800cd56:	f107 0314 	add.w	r3, r7, #20
 800cd5a:	2203      	movs	r2, #3
 800cd5c:	2100      	movs	r1, #0
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f000 fbb7 	bl	800d4d2 <Osal_MemSet>
  int index_input = 0;
 800cd64:	2300      	movs	r3, #0
 800cd66:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800cd6a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800cd6e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800cd72:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800cd76:	8812      	ldrh	r2, [r2, #0]
 800cd78:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800cd7a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800cd7e:	3302      	adds	r3, #2
 800cd80:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800cd84:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800cd88:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800cd8c:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800cd90:	7812      	ldrb	r2, [r2, #0]
 800cd92:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800cd94:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800cd98:	3301      	adds	r3, #1
 800cd9a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800cd9e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cda2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	d002      	beq.n	800cdb2 <aci_gatt_add_char+0xce>
 800cdac:	2b02      	cmp	r3, #2
 800cdae:	d004      	beq.n	800cdba <aci_gatt_add_char+0xd6>
 800cdb0:	e007      	b.n	800cdc2 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800cdb2:	2302      	movs	r3, #2
 800cdb4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800cdb8:	e005      	b.n	800cdc6 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800cdba:	2310      	movs	r3, #16
 800cdbc:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800cdc0:	e001      	b.n	800cdc6 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800cdc2:	2397      	movs	r3, #151	@ 0x97
 800cdc4:	e091      	b.n	800ceea <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800cdc6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800cdca:	1cd8      	adds	r0, r3, #3
 800cdcc:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800cdd0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cdd4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800cdd8:	6819      	ldr	r1, [r3, #0]
 800cdda:	f000 fb6a 	bl	800d4b2 <Osal_MemCpy>
    index_input += size;
 800cdde:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800cde2:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800cde6:	4413      	add	r3, r2
 800cde8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800cdec:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cdf0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800cdf4:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800cdf8:	8812      	ldrh	r2, [r2, #0]
 800cdfa:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800cdfc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ce00:	3302      	adds	r3, #2
 800ce02:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800ce06:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ce0a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800ce0e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800ce10:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ce14:	3301      	adds	r3, #1
 800ce16:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800ce1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ce1e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800ce22:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800ce24:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ce28:	3301      	adds	r3, #1
 800ce2a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800ce2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ce32:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800ce36:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800ce38:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ce3c:	3301      	adds	r3, #1
 800ce3e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800ce42:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ce46:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800ce4a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800ce4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ce50:	3301      	adds	r3, #1
 800ce52:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800ce56:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ce5a:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800ce5e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800ce60:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ce64:	3301      	adds	r3, #1
 800ce66:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ce6a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800ce6e:	2218      	movs	r2, #24
 800ce70:	2100      	movs	r1, #0
 800ce72:	4618      	mov	r0, r3
 800ce74:	f000 fb2d 	bl	800d4d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ce78:	233f      	movs	r3, #63	@ 0x3f
 800ce7a:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800ce7e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800ce82:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800ce86:	f107 0318 	add.w	r3, r7, #24
 800ce8a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800ce8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ce92:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800ce96:	f107 0314 	add.w	r3, r7, #20
 800ce9a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800ce9e:	2303      	movs	r3, #3
 800cea0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cea4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800cea8:	2100      	movs	r1, #0
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f000 fd9a 	bl	800d9e4 <hci_send_req>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	da01      	bge.n	800ceba <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800ceb6:	23ff      	movs	r3, #255	@ 0xff
 800ceb8:	e017      	b.n	800ceea <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800ceba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cebe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800cec2:	781b      	ldrb	r3, [r3, #0]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d005      	beq.n	800ced4 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800cec8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cecc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	e00a      	b.n	800ceea <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800ced4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ced8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800cedc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cee0:	b29a      	uxth	r2, r3
 800cee2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800cee6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800cee8:	2300      	movs	r3, #0
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd90      	pop	{r4, r7, pc}

0800cef4 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800cef4:	b5b0      	push	{r4, r5, r7, lr}
 800cef6:	b0cc      	sub	sp, #304	@ 0x130
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	4605      	mov	r5, r0
 800cefc:	460c      	mov	r4, r1
 800cefe:	4610      	mov	r0, r2
 800cf00:	4619      	mov	r1, r3
 800cf02:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cf06:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800cf0a:	462a      	mov	r2, r5
 800cf0c:	801a      	strh	r2, [r3, #0]
 800cf0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cf12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800cf16:	4622      	mov	r2, r4
 800cf18:	801a      	strh	r2, [r3, #0]
 800cf1a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cf1e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800cf22:	4602      	mov	r2, r0
 800cf24:	701a      	strb	r2, [r3, #0]
 800cf26:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cf2a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800cf2e:	460a      	mov	r2, r1
 800cf30:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800cf32:	f107 0310 	add.w	r3, r7, #16
 800cf36:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800cf3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cf3e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cf42:	2200      	movs	r2, #0
 800cf44:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cf46:	2300      	movs	r3, #0
 800cf48:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800cf4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf50:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cf54:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800cf58:	8812      	ldrh	r2, [r2, #0]
 800cf5a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800cf5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf60:	3302      	adds	r3, #2
 800cf62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800cf66:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf6a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cf6e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800cf72:	8812      	ldrh	r2, [r2, #0]
 800cf74:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800cf76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf7a:	3302      	adds	r3, #2
 800cf7c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800cf80:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf84:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cf88:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800cf8c:	7812      	ldrb	r2, [r2, #0]
 800cf8e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800cf90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf94:	3301      	adds	r3, #1
 800cf96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800cf9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf9e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cfa2:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800cfa6:	7812      	ldrb	r2, [r2, #0]
 800cfa8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800cfaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cfae:	3301      	adds	r3, #1
 800cfb0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800cfb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cfb8:	1d98      	adds	r0, r3, #6
 800cfba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cfbe:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800cfca:	f000 fa72 	bl	800d4b2 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800cfce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cfd2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800cfd6:	781b      	ldrb	r3, [r3, #0]
 800cfd8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800cfdc:	4413      	add	r3, r2
 800cfde:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cfe2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cfe6:	2218      	movs	r2, #24
 800cfe8:	2100      	movs	r1, #0
 800cfea:	4618      	mov	r0, r3
 800cfec:	f000 fa71 	bl	800d4d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cff0:	233f      	movs	r3, #63	@ 0x3f
 800cff2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800cff6:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800cffa:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800cffe:	f107 0310 	add.w	r3, r7, #16
 800d002:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d006:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d00a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d00e:	f107 030f 	add.w	r3, r7, #15
 800d012:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d016:	2301      	movs	r3, #1
 800d018:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d01c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d020:	2100      	movs	r1, #0
 800d022:	4618      	mov	r0, r3
 800d024:	f000 fcde 	bl	800d9e4 <hci_send_req>
 800d028:	4603      	mov	r3, r0
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	da01      	bge.n	800d032 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800d02e:	23ff      	movs	r3, #255	@ 0xff
 800d030:	e004      	b.n	800d03c <aci_gatt_update_char_value+0x148>
  return status;
 800d032:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d036:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d03a:	781b      	ldrb	r3, [r3, #0]
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d042:	46bd      	mov	sp, r7
 800d044:	bdb0      	pop	{r4, r5, r7, pc}

0800d046 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800d046:	b580      	push	{r7, lr}
 800d048:	b0cc      	sub	sp, #304	@ 0x130
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	4602      	mov	r2, r0
 800d04e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d052:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d056:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800d058:	f107 0310 	add.w	r3, r7, #16
 800d05c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d060:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d064:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d068:	2200      	movs	r2, #0
 800d06a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d06c:	2300      	movs	r3, #0
 800d06e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d072:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d076:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d07a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d07e:	8812      	ldrh	r2, [r2, #0]
 800d080:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d082:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d086:	3302      	adds	r3, #2
 800d088:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d08c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d090:	2218      	movs	r2, #24
 800d092:	2100      	movs	r1, #0
 800d094:	4618      	mov	r0, r3
 800d096:	f000 fa1c 	bl	800d4d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d09a:	233f      	movs	r3, #63	@ 0x3f
 800d09c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800d0a0:	f240 1325 	movw	r3, #293	@ 0x125
 800d0a4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d0a8:	f107 0310 	add.w	r3, r7, #16
 800d0ac:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d0b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d0b4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d0b8:	f107 030f 	add.w	r3, r7, #15
 800d0bc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d0c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d0ca:	2100      	movs	r1, #0
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f000 fc89 	bl	800d9e4 <hci_send_req>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	da01      	bge.n	800d0dc <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800d0d8:	23ff      	movs	r3, #255	@ 0xff
 800d0da:	e004      	b.n	800d0e6 <aci_gatt_confirm_indication+0xa0>
  return status;
 800d0dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d0e0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d0e4:	781b      	ldrb	r3, [r3, #0]
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}

0800d0f0 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b0cc      	sub	sp, #304	@ 0x130
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d0fa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d0fe:	601a      	str	r2, [r3, #0]
 800d100:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d104:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d108:	4602      	mov	r2, r0
 800d10a:	701a      	strb	r2, [r3, #0]
 800d10c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d110:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d114:	460a      	mov	r2, r1
 800d116:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800d118:	f107 0310 	add.w	r3, r7, #16
 800d11c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d120:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d124:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d128:	2200      	movs	r2, #0
 800d12a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d12c:	2300      	movs	r3, #0
 800d12e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800d132:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d136:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d13a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d13e:	7812      	ldrb	r2, [r2, #0]
 800d140:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d142:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d146:	3301      	adds	r3, #1
 800d148:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800d14c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d150:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d154:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d158:	7812      	ldrb	r2, [r2, #0]
 800d15a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d15c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d160:	3301      	adds	r3, #1
 800d162:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800d166:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d16a:	1c98      	adds	r0, r3, #2
 800d16c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d170:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d174:	781a      	ldrb	r2, [r3, #0]
 800d176:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d17a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d17e:	6819      	ldr	r1, [r3, #0]
 800d180:	f000 f997 	bl	800d4b2 <Osal_MemCpy>
  index_input += Length;
 800d184:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d188:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d192:	4413      	add	r3, r2
 800d194:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d198:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d19c:	2218      	movs	r2, #24
 800d19e:	2100      	movs	r1, #0
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f000 f996 	bl	800d4d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d1a6:	233f      	movs	r3, #63	@ 0x3f
 800d1a8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800d1ac:	230c      	movs	r3, #12
 800d1ae:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d1b2:	f107 0310 	add.w	r3, r7, #16
 800d1b6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d1ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d1be:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d1c2:	f107 030f 	add.w	r3, r7, #15
 800d1c6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d1d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d1d4:	2100      	movs	r1, #0
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f000 fc04 	bl	800d9e4 <hci_send_req>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	da01      	bge.n	800d1e6 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800d1e2:	23ff      	movs	r3, #255	@ 0xff
 800d1e4:	e004      	b.n	800d1f0 <aci_hal_write_config_data+0x100>
  return status;
 800d1e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d1ea:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d1ee:	781b      	ldrb	r3, [r3, #0]
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}

0800d1fa <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800d1fa:	b580      	push	{r7, lr}
 800d1fc:	b0cc      	sub	sp, #304	@ 0x130
 800d1fe:	af00      	add	r7, sp, #0
 800d200:	4602      	mov	r2, r0
 800d202:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d206:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d20a:	701a      	strb	r2, [r3, #0]
 800d20c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d210:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d214:	460a      	mov	r2, r1
 800d216:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800d218:	f107 0310 	add.w	r3, r7, #16
 800d21c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d220:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d224:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d228:	2200      	movs	r2, #0
 800d22a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d22c:	2300      	movs	r3, #0
 800d22e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800d232:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d236:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d23a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d23e:	7812      	ldrb	r2, [r2, #0]
 800d240:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d242:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d246:	3301      	adds	r3, #1
 800d248:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800d24c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d250:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d254:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d258:	7812      	ldrb	r2, [r2, #0]
 800d25a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d25c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d260:	3301      	adds	r3, #1
 800d262:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d266:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d26a:	2218      	movs	r2, #24
 800d26c:	2100      	movs	r1, #0
 800d26e:	4618      	mov	r0, r3
 800d270:	f000 f92f 	bl	800d4d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d274:	233f      	movs	r3, #63	@ 0x3f
 800d276:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800d27a:	230f      	movs	r3, #15
 800d27c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d280:	f107 0310 	add.w	r3, r7, #16
 800d284:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d288:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d28c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d290:	f107 030f 	add.w	r3, r7, #15
 800d294:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d298:	2301      	movs	r3, #1
 800d29a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d29e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d2a2:	2100      	movs	r1, #0
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f000 fb9d 	bl	800d9e4 <hci_send_req>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	da01      	bge.n	800d2b4 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800d2b0:	23ff      	movs	r3, #255	@ 0xff
 800d2b2:	e004      	b.n	800d2be <aci_hal_set_tx_power_level+0xc4>
  return status;
 800d2b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d2b8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d2bc:	781b      	ldrb	r3, [r3, #0]
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}

0800d2c8 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b0cc      	sub	sp, #304	@ 0x130
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	4602      	mov	r2, r0
 800d2d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d2d4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d2d8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800d2da:	f107 0310 	add.w	r3, r7, #16
 800d2de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d2e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d2e6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800d2f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d2f8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d2fc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d300:	8812      	ldrh	r2, [r2, #0]
 800d302:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d304:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d308:	3302      	adds	r3, #2
 800d30a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d30e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d312:	2218      	movs	r2, #24
 800d314:	2100      	movs	r1, #0
 800d316:	4618      	mov	r0, r3
 800d318:	f000 f8db 	bl	800d4d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d31c:	233f      	movs	r3, #63	@ 0x3f
 800d31e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800d322:	2318      	movs	r3, #24
 800d324:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d328:	f107 0310 	add.w	r3, r7, #16
 800d32c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d330:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d334:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d338:	f107 030f 	add.w	r3, r7, #15
 800d33c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d340:	2301      	movs	r3, #1
 800d342:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d346:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d34a:	2100      	movs	r1, #0
 800d34c:	4618      	mov	r0, r3
 800d34e:	f000 fb49 	bl	800d9e4 <hci_send_req>
 800d352:	4603      	mov	r3, r0
 800d354:	2b00      	cmp	r3, #0
 800d356:	da01      	bge.n	800d35c <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800d358:	23ff      	movs	r3, #255	@ 0xff
 800d35a:	e004      	b.n	800d366 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800d35c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d360:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d364:	781b      	ldrb	r3, [r3, #0]
}
 800d366:	4618      	mov	r0, r3
 800d368:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}

0800d370 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b088      	sub	sp, #32
 800d374:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d376:	2300      	movs	r3, #0
 800d378:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d37a:	f107 0308 	add.w	r3, r7, #8
 800d37e:	2218      	movs	r2, #24
 800d380:	2100      	movs	r1, #0
 800d382:	4618      	mov	r0, r3
 800d384:	f000 f8a5 	bl	800d4d2 <Osal_MemSet>
  rq.ogf = 0x03;
 800d388:	2303      	movs	r3, #3
 800d38a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800d38c:	2303      	movs	r3, #3
 800d38e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d390:	1dfb      	adds	r3, r7, #7
 800d392:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d394:	2301      	movs	r3, #1
 800d396:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d398:	f107 0308 	add.w	r3, r7, #8
 800d39c:	2100      	movs	r1, #0
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f000 fb20 	bl	800d9e4 <hci_send_req>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	da01      	bge.n	800d3ae <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d3aa:	23ff      	movs	r3, #255	@ 0xff
 800d3ac:	e000      	b.n	800d3b0 <hci_reset+0x40>
  return status;
 800d3ae:	79fb      	ldrb	r3, [r7, #7]
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3720      	adds	r7, #32
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800d3b8:	b590      	push	{r4, r7, lr}
 800d3ba:	b0cd      	sub	sp, #308	@ 0x134
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	4604      	mov	r4, r0
 800d3c0:	4608      	mov	r0, r1
 800d3c2:	4611      	mov	r1, r2
 800d3c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3c8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d3cc:	4622      	mov	r2, r4
 800d3ce:	701a      	strb	r2, [r3, #0]
 800d3d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3d4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d3d8:	4602      	mov	r2, r0
 800d3da:	701a      	strb	r2, [r3, #0]
 800d3dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3e0:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800d3e4:	460a      	mov	r2, r1
 800d3e6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800d3e8:	f107 0310 	add.w	r3, r7, #16
 800d3ec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d3f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3f4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800d402:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d406:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d40a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d40e:	7812      	ldrb	r2, [r2, #0]
 800d410:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d412:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d416:	3301      	adds	r3, #1
 800d418:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800d41c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d420:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d424:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d428:	7812      	ldrb	r2, [r2, #0]
 800d42a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d42c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d430:	3301      	adds	r3, #1
 800d432:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800d436:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d43a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d43e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800d442:	7812      	ldrb	r2, [r2, #0]
 800d444:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d446:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d44a:	3301      	adds	r3, #1
 800d44c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d450:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d454:	2218      	movs	r2, #24
 800d456:	2100      	movs	r1, #0
 800d458:	4618      	mov	r0, r3
 800d45a:	f000 f83a 	bl	800d4d2 <Osal_MemSet>
  rq.ogf = 0x08;
 800d45e:	2308      	movs	r3, #8
 800d460:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800d464:	2331      	movs	r3, #49	@ 0x31
 800d466:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d46a:	f107 0310 	add.w	r3, r7, #16
 800d46e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d472:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d476:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d47a:	f107 030f 	add.w	r3, r7, #15
 800d47e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d482:	2301      	movs	r3, #1
 800d484:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d488:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d48c:	2100      	movs	r1, #0
 800d48e:	4618      	mov	r0, r3
 800d490:	f000 faa8 	bl	800d9e4 <hci_send_req>
 800d494:	4603      	mov	r3, r0
 800d496:	2b00      	cmp	r3, #0
 800d498:	da01      	bge.n	800d49e <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800d49a:	23ff      	movs	r3, #255	@ 0xff
 800d49c:	e004      	b.n	800d4a8 <hci_le_set_default_phy+0xf0>
  return status;
 800d49e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d4a2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d4a6:	781b      	ldrb	r3, [r3, #0]
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd90      	pop	{r4, r7, pc}

0800d4b2 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800d4b2:	b580      	push	{r7, lr}
 800d4b4:	b084      	sub	sp, #16
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	60f8      	str	r0, [r7, #12]
 800d4ba:	60b9      	str	r1, [r7, #8]
 800d4bc:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	68b9      	ldr	r1, [r7, #8]
 800d4c2:	68f8      	ldr	r0, [r7, #12]
 800d4c4:	f002 ffe7 	bl	8010496 <memcpy>
 800d4c8:	4603      	mov	r3, r0
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3710      	adds	r7, #16
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}

0800d4d2 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800d4d2:	b580      	push	{r7, lr}
 800d4d4:	b084      	sub	sp, #16
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	60f8      	str	r0, [r7, #12]
 800d4da:	60b9      	str	r1, [r7, #8]
 800d4dc:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	68b9      	ldr	r1, [r7, #8]
 800d4e2:	68f8      	ldr	r0, [r7, #12]
 800d4e4:	f002 ff57 	bl	8010396 <memset>
 800d4e8:	4603      	mov	r3, r0
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3710      	adds	r7, #16
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}

0800d4f2 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800d4f2:	b480      	push	{r7}
 800d4f4:	af00      	add	r7, sp, #0
  return;
 800d4f6:	bf00      	nop
}
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr

0800d500 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800d500:	b480      	push	{r7}
 800d502:	af00      	add	r7, sp, #0
  return;
 800d504:	bf00      	nop
}
 800d506:	46bd      	mov	sp, r7
 800d508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50c:	4770      	bx	lr

0800d50e <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800d50e:	b480      	push	{r7}
 800d510:	af00      	add	r7, sp, #0
  return;
 800d512:	bf00      	nop
}
 800d514:	46bd      	mov	sp, r7
 800d516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51a:	4770      	bx	lr

0800d51c <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800d51c:	b480      	push	{r7}
 800d51e:	af00      	add	r7, sp, #0
  return;
 800d520:	bf00      	nop
}
 800d522:	46bd      	mov	sp, r7
 800d524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d528:	4770      	bx	lr

0800d52a <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800d52a:	b480      	push	{r7}
 800d52c:	af00      	add	r7, sp, #0
  return;
 800d52e:	bf00      	nop
}
 800d530:	46bd      	mov	sp, r7
 800d532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d536:	4770      	bx	lr

0800d538 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800d538:	b480      	push	{r7}
 800d53a:	af00      	add	r7, sp, #0
  return;
 800d53c:	bf00      	nop
}
 800d53e:	46bd      	mov	sp, r7
 800d540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d544:	4770      	bx	lr

0800d546 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800d546:	b480      	push	{r7}
 800d548:	af00      	add	r7, sp, #0
  return;
 800d54a:	bf00      	nop
}
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr

0800d554 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800d554:	b480      	push	{r7}
 800d556:	af00      	add	r7, sp, #0
  return;
 800d558:	bf00      	nop
}
 800d55a:	46bd      	mov	sp, r7
 800d55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d560:	4770      	bx	lr

0800d562 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800d562:	b480      	push	{r7}
 800d564:	af00      	add	r7, sp, #0
  return;
 800d566:	bf00      	nop
}
 800d568:	46bd      	mov	sp, r7
 800d56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56e:	4770      	bx	lr

0800d570 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800d570:	b480      	push	{r7}
 800d572:	af00      	add	r7, sp, #0
  return;
 800d574:	bf00      	nop
}
 800d576:	46bd      	mov	sp, r7
 800d578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57c:	4770      	bx	lr

0800d57e <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800d57e:	b480      	push	{r7}
 800d580:	af00      	add	r7, sp, #0
  return;
 800d582:	bf00      	nop
}
 800d584:	46bd      	mov	sp, r7
 800d586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58a:	4770      	bx	lr

0800d58c <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800d58c:	b480      	push	{r7}
 800d58e:	af00      	add	r7, sp, #0
  return;
 800d590:	bf00      	nop
}
 800d592:	46bd      	mov	sp, r7
 800d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d598:	4770      	bx	lr

0800d59a <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800d59a:	b480      	push	{r7}
 800d59c:	af00      	add	r7, sp, #0
  return;
 800d59e:	bf00      	nop
}
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a6:	4770      	bx	lr

0800d5a8 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	af00      	add	r7, sp, #0
  return;
 800d5ac:	bf00      	nop
}
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b4:	4770      	bx	lr

0800d5b6 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800d5b6:	b480      	push	{r7}
 800d5b8:	af00      	add	r7, sp, #0
  return;
 800d5ba:	bf00      	nop
}
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr

0800d5c4 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	af00      	add	r7, sp, #0
  return;
 800d5c8:	bf00      	nop
}
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr

0800d5d2 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800d5d2:	b480      	push	{r7}
 800d5d4:	af00      	add	r7, sp, #0
  return;
 800d5d6:	bf00      	nop
}
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5de:	4770      	bx	lr

0800d5e0 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800d5e4:	4b04      	ldr	r3, [pc, #16]	@ (800d5f8 <SVCCTL_Init+0x18>)
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800d5ea:	4b04      	ldr	r3, [pc, #16]	@ (800d5fc <SVCCTL_Init+0x1c>)
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800d5f0:	f000 f806 	bl	800d600 <SVCCTL_SvcInit>

  return;
 800d5f4:	bf00      	nop
}
 800d5f6:	bd80      	pop	{r7, pc}
 800d5f8:	200003f0 	.word	0x200003f0
 800d5fc:	20000410 	.word	0x20000410

0800d600 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	af00      	add	r7, sp, #0
  BAS_Init();
 800d604:	f7ff ff75 	bl	800d4f2 <BAS_Init>

  BLS_Init();
 800d608:	f7ff ff7a 	bl	800d500 <BLS_Init>

  CRS_STM_Init();
 800d60c:	f7ff ff7f 	bl	800d50e <CRS_STM_Init>

  DIS_Init();
 800d610:	f7ff ff84 	bl	800d51c <DIS_Init>

  EDS_STM_Init();
 800d614:	f7ff ff89 	bl	800d52a <EDS_STM_Init>

  HIDS_Init();
 800d618:	f7ff ff8e 	bl	800d538 <HIDS_Init>

  HRS_Init();
 800d61c:	f7ff ff93 	bl	800d546 <HRS_Init>

  HTS_Init();
 800d620:	f7ff ff98 	bl	800d554 <HTS_Init>

  IAS_Init();
 800d624:	f7ff ff9d 	bl	800d562 <IAS_Init>

  LLS_Init();
 800d628:	f7ff ffa2 	bl	800d570 <LLS_Init>

  TPS_Init();
 800d62c:	f7ff ffa7 	bl	800d57e <TPS_Init>

  MOTENV_STM_Init();
 800d630:	f7ff ffac 	bl	800d58c <MOTENV_STM_Init>

  P2PS_STM_Init();
 800d634:	f7ff ffb1 	bl	800d59a <P2PS_STM_Init>

  ZDD_STM_Init();
 800d638:	f7ff ffb6 	bl	800d5a8 <ZDD_STM_Init>

  OTAS_STM_Init();
 800d63c:	f7ff ffbb 	bl	800d5b6 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800d640:	f7ff ffc7 	bl	800d5d2 <BVOPUS_STM_Init>

  MESH_Init();
 800d644:	f7ff ffbe 	bl	800d5c4 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800d648:	f001 fb4a 	bl	800ece0 <SVCCTL_InitCustomSvc>
  
  return;
 800d64c:	bf00      	nop
}
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800d650:	b480      	push	{r7}
 800d652:	b083      	sub	sp, #12
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800d658:	4b09      	ldr	r3, [pc, #36]	@ (800d680 <SVCCTL_RegisterSvcHandler+0x30>)
 800d65a:	7f1b      	ldrb	r3, [r3, #28]
 800d65c:	4619      	mov	r1, r3
 800d65e:	4a08      	ldr	r2, [pc, #32]	@ (800d680 <SVCCTL_RegisterSvcHandler+0x30>)
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800d666:	4b06      	ldr	r3, [pc, #24]	@ (800d680 <SVCCTL_RegisterSvcHandler+0x30>)
 800d668:	7f1b      	ldrb	r3, [r3, #28]
 800d66a:	3301      	adds	r3, #1
 800d66c:	b2da      	uxtb	r2, r3
 800d66e:	4b04      	ldr	r3, [pc, #16]	@ (800d680 <SVCCTL_RegisterSvcHandler+0x30>)
 800d670:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800d672:	bf00      	nop
}
 800d674:	370c      	adds	r7, #12
 800d676:	46bd      	mov	sp, r7
 800d678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67c:	4770      	bx	lr
 800d67e:	bf00      	nop
 800d680:	200003f0 	.word	0x200003f0

0800d684 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b086      	sub	sp, #24
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	3301      	adds	r3, #1
 800d690:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800d692:	2300      	movs	r3, #0
 800d694:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800d696:	693b      	ldr	r3, [r7, #16]
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	2bff      	cmp	r3, #255	@ 0xff
 800d69c:	d125      	bne.n	800d6ea <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	3302      	adds	r3, #2
 800d6a2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	881b      	ldrh	r3, [r3, #0]
 800d6a8:	b29b      	uxth	r3, r3
 800d6aa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d6ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d6b2:	d118      	bne.n	800d6e6 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	757b      	strb	r3, [r7, #21]
 800d6b8:	e00d      	b.n	800d6d6 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800d6ba:	7d7b      	ldrb	r3, [r7, #21]
 800d6bc:	4a1a      	ldr	r2, [pc, #104]	@ (800d728 <SVCCTL_UserEvtRx+0xa4>)
 800d6be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	4798      	blx	r3
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800d6ca:	7dfb      	ldrb	r3, [r7, #23]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d108      	bne.n	800d6e2 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800d6d0:	7d7b      	ldrb	r3, [r7, #21]
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	757b      	strb	r3, [r7, #21]
 800d6d6:	4b14      	ldr	r3, [pc, #80]	@ (800d728 <SVCCTL_UserEvtRx+0xa4>)
 800d6d8:	7f1b      	ldrb	r3, [r3, #28]
 800d6da:	7d7a      	ldrb	r2, [r7, #21]
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d3ec      	bcc.n	800d6ba <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800d6e0:	e002      	b.n	800d6e8 <SVCCTL_UserEvtRx+0x64>
              break;
 800d6e2:	bf00      	nop
          break;
 800d6e4:	e000      	b.n	800d6e8 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800d6e6:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800d6e8:	e000      	b.n	800d6ec <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800d6ea:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800d6ec:	7dfb      	ldrb	r3, [r7, #23]
 800d6ee:	2b02      	cmp	r3, #2
 800d6f0:	d00f      	beq.n	800d712 <SVCCTL_UserEvtRx+0x8e>
 800d6f2:	2b02      	cmp	r3, #2
 800d6f4:	dc10      	bgt.n	800d718 <SVCCTL_UserEvtRx+0x94>
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d002      	beq.n	800d700 <SVCCTL_UserEvtRx+0x7c>
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d006      	beq.n	800d70c <SVCCTL_UserEvtRx+0x88>
 800d6fe:	e00b      	b.n	800d718 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f000 ff85 	bl	800e610 <SVCCTL_App_Notification>
 800d706:	4603      	mov	r3, r0
 800d708:	75bb      	strb	r3, [r7, #22]
      break;
 800d70a:	e008      	b.n	800d71e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800d70c:	2301      	movs	r3, #1
 800d70e:	75bb      	strb	r3, [r7, #22]
      break;
 800d710:	e005      	b.n	800d71e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800d712:	2300      	movs	r3, #0
 800d714:	75bb      	strb	r3, [r7, #22]
      break;
 800d716:	e002      	b.n	800d71e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800d718:	2301      	movs	r3, #1
 800d71a:	75bb      	strb	r3, [r7, #22]
      break;
 800d71c:	bf00      	nop
  }

  return (return_status);
 800d71e:	7dbb      	ldrb	r3, [r7, #22]
}
 800d720:	4618      	mov	r0, r3
 800d722:	3718      	adds	r7, #24
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}
 800d728:	200003f0 	.word	0x200003f0

0800d72c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b088      	sub	sp, #32
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800d734:	f107 030c 	add.w	r3, r7, #12
 800d738:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800d740:	69fb      	ldr	r3, [r7, #28]
 800d742:	212e      	movs	r1, #46	@ 0x2e
 800d744:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800d748:	f000 fae8 	bl	800dd1c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800d74c:	69fb      	ldr	r3, [r7, #28]
 800d74e:	330b      	adds	r3, #11
 800d750:	78db      	ldrb	r3, [r3, #3]
}
 800d752:	4618      	mov	r0, r3
 800d754:	3720      	adds	r7, #32
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}

0800d75a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800d75a:	b580      	push	{r7, lr}
 800d75c:	b088      	sub	sp, #32
 800d75e:	af00      	add	r7, sp, #0
 800d760:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800d762:	f107 030c 	add.w	r3, r7, #12
 800d766:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800d76e:	69fb      	ldr	r3, [r7, #28]
 800d770:	210f      	movs	r1, #15
 800d772:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800d776:	f000 fad1 	bl	800dd1c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800d77a:	69fb      	ldr	r3, [r7, #28]
 800d77c:	330b      	adds	r3, #11
 800d77e:	78db      	ldrb	r3, [r3, #3]
}
 800d780:	4618      	mov	r0, r3
 800d782:	3720      	adds	r7, #32
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b088      	sub	sp, #32
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800d790:	f107 030c 	add.w	r3, r7, #12
 800d794:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800d796:	69fb      	ldr	r3, [r7, #28]
 800d798:	687a      	ldr	r2, [r7, #4]
 800d79a:	2110      	movs	r1, #16
 800d79c:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800d7a0:	f000 fabc 	bl	800dd1c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800d7a4:	69fb      	ldr	r3, [r7, #28]
 800d7a6:	330b      	adds	r3, #11
 800d7a8:	78db      	ldrb	r3, [r3, #3]
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3720      	adds	r7, #32
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
	...

0800d7b4 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b08b      	sub	sp, #44	@ 0x2c
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800d7dc:	4b4a      	ldr	r3, [pc, #296]	@ (800d908 <SHCI_GetWirelessFwInfo+0x154>)
 800d7de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d7e4:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	009b      	lsls	r3, r3, #2
 800d7ea:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800d7ee:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	4a44      	ldr	r2, [pc, #272]	@ (800d90c <SHCI_GetWirelessFwInfo+0x158>)
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	d10f      	bne.n	800d820 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	695b      	ldr	r3, [r3, #20]
 800d804:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	699b      	ldr	r3, [r3, #24]
 800d80a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	69db      	ldr	r3, [r3, #28]
 800d810:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	68db      	ldr	r3, [r3, #12]
 800d816:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	691b      	ldr	r3, [r3, #16]
 800d81c:	617b      	str	r3, [r7, #20]
 800d81e:	e01a      	b.n	800d856 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	009b      	lsls	r3, r3, #2
 800d824:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800d828:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800d82c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	691b      	ldr	r3, [r3, #16]
 800d834:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	695b      	ldr	r3, [r3, #20]
 800d83c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	699b      	ldr	r3, [r3, #24]
 800d844:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	685b      	ldr	r3, [r3, #4]
 800d84c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	689b      	ldr	r3, [r3, #8]
 800d854:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800d856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d858:	0e1b      	lsrs	r3, r3, #24
 800d85a:	b2da      	uxtb	r2, r3
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800d860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d862:	0c1b      	lsrs	r3, r3, #16
 800d864:	b2da      	uxtb	r2, r3
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800d86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d86c:	0a1b      	lsrs	r3, r3, #8
 800d86e:	b2da      	uxtb	r2, r3
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800d874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d876:	091b      	lsrs	r3, r3, #4
 800d878:	b2db      	uxtb	r3, r3
 800d87a:	f003 030f 	and.w	r3, r3, #15
 800d87e:	b2da      	uxtb	r2, r3
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800d884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d886:	b2db      	uxtb	r3, r3
 800d888:	f003 030f 	and.w	r3, r3, #15
 800d88c:	b2da      	uxtb	r2, r3
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800d892:	6a3b      	ldr	r3, [r7, #32]
 800d894:	0e1b      	lsrs	r3, r3, #24
 800d896:	b2da      	uxtb	r2, r3
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800d89c:	6a3b      	ldr	r3, [r7, #32]
 800d89e:	0c1b      	lsrs	r3, r3, #16
 800d8a0:	b2da      	uxtb	r2, r3
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800d8a6:	6a3b      	ldr	r3, [r7, #32]
 800d8a8:	0a1b      	lsrs	r3, r3, #8
 800d8aa:	b2da      	uxtb	r2, r3
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800d8b0:	6a3b      	ldr	r3, [r7, #32]
 800d8b2:	b2da      	uxtb	r2, r3
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800d8b8:	69fb      	ldr	r3, [r7, #28]
 800d8ba:	b2da      	uxtb	r2, r3
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800d8c0:	69bb      	ldr	r3, [r7, #24]
 800d8c2:	0e1b      	lsrs	r3, r3, #24
 800d8c4:	b2da      	uxtb	r2, r3
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800d8ca:	69bb      	ldr	r3, [r7, #24]
 800d8cc:	0c1b      	lsrs	r3, r3, #16
 800d8ce:	b2da      	uxtb	r2, r3
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800d8d4:	69bb      	ldr	r3, [r7, #24]
 800d8d6:	0a1b      	lsrs	r3, r3, #8
 800d8d8:	b2da      	uxtb	r2, r3
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	0e1b      	lsrs	r3, r3, #24
 800d8e2:	b2da      	uxtb	r2, r3
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	0c1b      	lsrs	r3, r3, #16
 800d8ec:	b2da      	uxtb	r2, r3
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	b2da      	uxtb	r2, r3
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800d8fa:	2300      	movs	r3, #0
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	372c      	adds	r7, #44	@ 0x2c
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr
 800d908:	58004000 	.word	0x58004000
 800d90c:	a94656b9 	.word	0xa94656b9

0800d910 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b082      	sub	sp, #8
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
 800d918:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	685b      	ldr	r3, [r3, #4]
 800d91e:	4a08      	ldr	r2, [pc, #32]	@ (800d940 <hci_init+0x30>)
 800d920:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800d922:	4a08      	ldr	r2, [pc, #32]	@ (800d944 <hci_init+0x34>)
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800d928:	4806      	ldr	r0, [pc, #24]	@ (800d944 <hci_init+0x34>)
 800d92a:	f000 f979 	bl	800dc20 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4618      	mov	r0, r3
 800d934:	f000 f8da 	bl	800daec <TlInit>

  return;
 800d938:	bf00      	nop
}
 800d93a:	3708      	adds	r7, #8
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}
 800d940:	200069d4 	.word	0x200069d4
 800d944:	200069ac 	.word	0x200069ac

0800d948 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800d94e:	4822      	ldr	r0, [pc, #136]	@ (800d9d8 <hci_user_evt_proc+0x90>)
 800d950:	f000 fd32 	bl	800e3b8 <LST_is_empty>
 800d954:	4603      	mov	r3, r0
 800d956:	2b00      	cmp	r3, #0
 800d958:	d12b      	bne.n	800d9b2 <hci_user_evt_proc+0x6a>
 800d95a:	4b20      	ldr	r3, [pc, #128]	@ (800d9dc <hci_user_evt_proc+0x94>)
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d027      	beq.n	800d9b2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800d962:	f107 030c 	add.w	r3, r7, #12
 800d966:	4619      	mov	r1, r3
 800d968:	481b      	ldr	r0, [pc, #108]	@ (800d9d8 <hci_user_evt_proc+0x90>)
 800d96a:	f000 fdb4 	bl	800e4d6 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800d96e:	4b1c      	ldr	r3, [pc, #112]	@ (800d9e0 <hci_user_evt_proc+0x98>)
 800d970:	69db      	ldr	r3, [r3, #28]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d00c      	beq.n	800d990 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800d97a:	2301      	movs	r3, #1
 800d97c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800d97e:	4b18      	ldr	r3, [pc, #96]	@ (800d9e0 <hci_user_evt_proc+0x98>)
 800d980:	69db      	ldr	r3, [r3, #28]
 800d982:	1d3a      	adds	r2, r7, #4
 800d984:	4610      	mov	r0, r2
 800d986:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800d988:	793a      	ldrb	r2, [r7, #4]
 800d98a:	4b14      	ldr	r3, [pc, #80]	@ (800d9dc <hci_user_evt_proc+0x94>)
 800d98c:	701a      	strb	r2, [r3, #0]
 800d98e:	e002      	b.n	800d996 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800d990:	4b12      	ldr	r3, [pc, #72]	@ (800d9dc <hci_user_evt_proc+0x94>)
 800d992:	2201      	movs	r2, #1
 800d994:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800d996:	4b11      	ldr	r3, [pc, #68]	@ (800d9dc <hci_user_evt_proc+0x94>)
 800d998:	781b      	ldrb	r3, [r3, #0]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d004      	beq.n	800d9a8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f000 fc0d 	bl	800e1c0 <TL_MM_EvtDone>
 800d9a6:	e004      	b.n	800d9b2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	4619      	mov	r1, r3
 800d9ac:	480a      	ldr	r0, [pc, #40]	@ (800d9d8 <hci_user_evt_proc+0x90>)
 800d9ae:	f000 fd25 	bl	800e3fc <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800d9b2:	4809      	ldr	r0, [pc, #36]	@ (800d9d8 <hci_user_evt_proc+0x90>)
 800d9b4:	f000 fd00 	bl	800e3b8 <LST_is_empty>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d107      	bne.n	800d9ce <hci_user_evt_proc+0x86>
 800d9be:	4b07      	ldr	r3, [pc, #28]	@ (800d9dc <hci_user_evt_proc+0x94>)
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d003      	beq.n	800d9ce <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800d9c6:	4804      	ldr	r0, [pc, #16]	@ (800d9d8 <hci_user_evt_proc+0x90>)
 800d9c8:	f001 f862 	bl	800ea90 <hci_notify_asynch_evt>
  }


  return;
 800d9cc:	bf00      	nop
 800d9ce:	bf00      	nop
}
 800d9d0:	3710      	adds	r7, #16
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	bf00      	nop
 800d9d8:	20000418 	.word	0x20000418
 800d9dc:	20000424 	.word	0x20000424
 800d9e0:	200069ac 	.word	0x200069ac

0800d9e4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b088      	sub	sp, #32
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	460b      	mov	r3, r1
 800d9ee:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800d9f0:	2000      	movs	r0, #0
 800d9f2:	f000 f8d1 	bl	800db98 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	885b      	ldrh	r3, [r3, #2]
 800d9fe:	b21b      	sxth	r3, r3
 800da00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800da04:	b21a      	sxth	r2, r3
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	881b      	ldrh	r3, [r3, #0]
 800da0a:	b21b      	sxth	r3, r3
 800da0c:	029b      	lsls	r3, r3, #10
 800da0e:	b21b      	sxth	r3, r3
 800da10:	4313      	orrs	r3, r2
 800da12:	b21b      	sxth	r3, r3
 800da14:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800da16:	4b33      	ldr	r3, [pc, #204]	@ (800dae4 <hci_send_req+0x100>)
 800da18:	2201      	movs	r2, #1
 800da1a:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	68db      	ldr	r3, [r3, #12]
 800da20:	b2d9      	uxtb	r1, r3
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	689a      	ldr	r2, [r3, #8]
 800da26:	8bbb      	ldrh	r3, [r7, #28]
 800da28:	4618      	mov	r0, r3
 800da2a:	f000 f88f 	bl	800db4c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800da2e:	e04e      	b.n	800dace <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800da30:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800da34:	f001 f843 	bl	800eabe <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800da38:	e043      	b.n	800dac2 <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800da3a:	f107 030c 	add.w	r3, r7, #12
 800da3e:	4619      	mov	r1, r3
 800da40:	4829      	ldr	r0, [pc, #164]	@ (800dae8 <hci_send_req+0x104>)
 800da42:	f000 fd48 	bl	800e4d6 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	7a5b      	ldrb	r3, [r3, #9]
 800da4a:	2b0f      	cmp	r3, #15
 800da4c:	d114      	bne.n	800da78 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	330b      	adds	r3, #11
 800da52:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	885b      	ldrh	r3, [r3, #2]
 800da58:	b29b      	uxth	r3, r3
 800da5a:	8bba      	ldrh	r2, [r7, #28]
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d104      	bne.n	800da6a <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	691b      	ldr	r3, [r3, #16]
 800da64:	693a      	ldr	r2, [r7, #16]
 800da66:	7812      	ldrb	r2, [r2, #0]
 800da68:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	785b      	ldrb	r3, [r3, #1]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d027      	beq.n	800dac2 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800da72:	2301      	movs	r3, #1
 800da74:	77fb      	strb	r3, [r7, #31]
 800da76:	e024      	b.n	800dac2 <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	330b      	adds	r3, #11
 800da7c:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800da7e:	69bb      	ldr	r3, [r7, #24]
 800da80:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800da84:	b29b      	uxth	r3, r3
 800da86:	8bba      	ldrh	r2, [r7, #28]
 800da88:	429a      	cmp	r2, r3
 800da8a:	d114      	bne.n	800dab6 <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	7a9b      	ldrb	r3, [r3, #10]
 800da90:	3b03      	subs	r3, #3
 800da92:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	695a      	ldr	r2, [r3, #20]
 800da98:	7dfb      	ldrb	r3, [r7, #23]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	bfa8      	it	ge
 800da9e:	461a      	movge	r2, r3
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6918      	ldr	r0, [r3, #16]
 800daa8:	69bb      	ldr	r3, [r7, #24]
 800daaa:	1cd9      	adds	r1, r3, #3
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	695b      	ldr	r3, [r3, #20]
 800dab0:	461a      	mov	r2, r3
 800dab2:	f002 fcf0 	bl	8010496 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800dab6:	69bb      	ldr	r3, [r7, #24]
 800dab8:	781b      	ldrb	r3, [r3, #0]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d001      	beq.n	800dac2 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800dabe:	2301      	movs	r3, #1
 800dac0:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800dac2:	4809      	ldr	r0, [pc, #36]	@ (800dae8 <hci_send_req+0x104>)
 800dac4:	f000 fc78 	bl	800e3b8 <LST_is_empty>
 800dac8:	4603      	mov	r3, r0
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d0b5      	beq.n	800da3a <hci_send_req+0x56>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800dace:	7ffb      	ldrb	r3, [r7, #31]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d0ad      	beq.n	800da30 <hci_send_req+0x4c>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800dad4:	2001      	movs	r0, #1
 800dad6:	f000 f85f 	bl	800db98 <NotifyCmdStatus>

  return 0;
 800dada:	2300      	movs	r3, #0
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3720      	adds	r7, #32
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}
 800dae4:	200069d8 	.word	0x200069d8
 800dae8:	200069cc 	.word	0x200069cc

0800daec <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b086      	sub	sp, #24
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800daf4:	480f      	ldr	r0, [pc, #60]	@ (800db34 <TlInit+0x48>)
 800daf6:	f000 fc4f 	bl	800e398 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800dafa:	4a0f      	ldr	r2, [pc, #60]	@ (800db38 <TlInit+0x4c>)
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800db00:	480e      	ldr	r0, [pc, #56]	@ (800db3c <TlInit+0x50>)
 800db02:	f000 fc49 	bl	800e398 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800db06:	4b0e      	ldr	r3, [pc, #56]	@ (800db40 <TlInit+0x54>)
 800db08:	2201      	movs	r2, #1
 800db0a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800db0c:	4b0d      	ldr	r3, [pc, #52]	@ (800db44 <TlInit+0x58>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d00a      	beq.n	800db2a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800db18:	4b0b      	ldr	r3, [pc, #44]	@ (800db48 <TlInit+0x5c>)
 800db1a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800db1c:	4b09      	ldr	r3, [pc, #36]	@ (800db44 <TlInit+0x58>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f107 0208 	add.w	r2, r7, #8
 800db24:	4610      	mov	r0, r2
 800db26:	4798      	blx	r3
  }

  return;
 800db28:	bf00      	nop
 800db2a:	bf00      	nop
}
 800db2c:	3718      	adds	r7, #24
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	200069cc 	.word	0x200069cc
 800db38:	20000420 	.word	0x20000420
 800db3c:	20000418 	.word	0x20000418
 800db40:	20000424 	.word	0x20000424
 800db44:	200069ac 	.word	0x200069ac
 800db48:	0800dbd9 	.word	0x0800dbd9

0800db4c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b082      	sub	sp, #8
 800db50:	af00      	add	r7, sp, #0
 800db52:	4603      	mov	r3, r0
 800db54:	603a      	str	r2, [r7, #0]
 800db56:	80fb      	strh	r3, [r7, #6]
 800db58:	460b      	mov	r3, r1
 800db5a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800db5c:	4b0c      	ldr	r3, [pc, #48]	@ (800db90 <SendCmd+0x44>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	88fa      	ldrh	r2, [r7, #6]
 800db62:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800db66:	4b0a      	ldr	r3, [pc, #40]	@ (800db90 <SendCmd+0x44>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	797a      	ldrb	r2, [r7, #5]
 800db6c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800db6e:	4b08      	ldr	r3, [pc, #32]	@ (800db90 <SendCmd+0x44>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	330c      	adds	r3, #12
 800db74:	797a      	ldrb	r2, [r7, #5]
 800db76:	6839      	ldr	r1, [r7, #0]
 800db78:	4618      	mov	r0, r3
 800db7a:	f002 fc8c 	bl	8010496 <memcpy>

  hciContext.io.Send(0,0);
 800db7e:	4b05      	ldr	r3, [pc, #20]	@ (800db94 <SendCmd+0x48>)
 800db80:	691b      	ldr	r3, [r3, #16]
 800db82:	2100      	movs	r1, #0
 800db84:	2000      	movs	r0, #0
 800db86:	4798      	blx	r3

  return;
 800db88:	bf00      	nop
}
 800db8a:	3708      	adds	r7, #8
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}
 800db90:	20000420 	.word	0x20000420
 800db94:	200069ac 	.word	0x200069ac

0800db98 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b082      	sub	sp, #8
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	4603      	mov	r3, r0
 800dba0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800dba2:	79fb      	ldrb	r3, [r7, #7]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d108      	bne.n	800dbba <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800dba8:	4b0a      	ldr	r3, [pc, #40]	@ (800dbd4 <NotifyCmdStatus+0x3c>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d00d      	beq.n	800dbcc <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800dbb0:	4b08      	ldr	r3, [pc, #32]	@ (800dbd4 <NotifyCmdStatus+0x3c>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	2000      	movs	r0, #0
 800dbb6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800dbb8:	e008      	b.n	800dbcc <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800dbba:	4b06      	ldr	r3, [pc, #24]	@ (800dbd4 <NotifyCmdStatus+0x3c>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d004      	beq.n	800dbcc <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800dbc2:	4b04      	ldr	r3, [pc, #16]	@ (800dbd4 <NotifyCmdStatus+0x3c>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	2001      	movs	r0, #1
 800dbc8:	4798      	blx	r3
  return;
 800dbca:	bf00      	nop
 800dbcc:	bf00      	nop
}
 800dbce:	3708      	adds	r7, #8
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}
 800dbd4:	200069d4 	.word	0x200069d4

0800dbd8 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b082      	sub	sp, #8
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	7a5b      	ldrb	r3, [r3, #9]
 800dbe4:	2b0f      	cmp	r3, #15
 800dbe6:	d003      	beq.n	800dbf0 <TlEvtReceived+0x18>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	7a5b      	ldrb	r3, [r3, #9]
 800dbec:	2b0e      	cmp	r3, #14
 800dbee:	d107      	bne.n	800dc00 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800dbf0:	6879      	ldr	r1, [r7, #4]
 800dbf2:	4809      	ldr	r0, [pc, #36]	@ (800dc18 <TlEvtReceived+0x40>)
 800dbf4:	f000 fc28 	bl	800e448 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800dbf8:	2000      	movs	r0, #0
 800dbfa:	f000 ff55 	bl	800eaa8 <hci_cmd_resp_release>
 800dbfe:	e006      	b.n	800dc0e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800dc00:	6879      	ldr	r1, [r7, #4]
 800dc02:	4806      	ldr	r0, [pc, #24]	@ (800dc1c <TlEvtReceived+0x44>)
 800dc04:	f000 fc20 	bl	800e448 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800dc08:	4804      	ldr	r0, [pc, #16]	@ (800dc1c <TlEvtReceived+0x44>)
 800dc0a:	f000 ff41 	bl	800ea90 <hci_notify_asynch_evt>
  }

  return;
 800dc0e:	bf00      	nop
}
 800dc10:	3708      	adds	r7, #8
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop
 800dc18:	200069cc 	.word	0x200069cc
 800dc1c:	20000418 	.word	0x20000418

0800dc20 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b083      	sub	sp, #12
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	4a05      	ldr	r2, [pc, #20]	@ (800dc40 <hci_register_io_bus+0x20>)
 800dc2c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	4a04      	ldr	r2, [pc, #16]	@ (800dc44 <hci_register_io_bus+0x24>)
 800dc32:	611a      	str	r2, [r3, #16]

  return;
 800dc34:	bf00      	nop
}
 800dc36:	370c      	adds	r7, #12
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr
 800dc40:	0800df39 	.word	0x0800df39
 800dc44:	0800dfa1 	.word	0x0800dfa1

0800dc48 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	685b      	ldr	r3, [r3, #4]
 800dc56:	4a08      	ldr	r2, [pc, #32]	@ (800dc78 <shci_init+0x30>)
 800dc58:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800dc5a:	4a08      	ldr	r2, [pc, #32]	@ (800dc7c <shci_init+0x34>)
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800dc60:	4806      	ldr	r0, [pc, #24]	@ (800dc7c <shci_init+0x34>)
 800dc62:	f000 f915 	bl	800de90 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f000 f898 	bl	800dda0 <TlInit>

  return;
 800dc70:	bf00      	nop
}
 800dc72:	3708      	adds	r7, #8
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}
 800dc78:	200069fc 	.word	0x200069fc
 800dc7c:	200069dc 	.word	0x200069dc

0800dc80 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b084      	sub	sp, #16
 800dc84:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800dc86:	4822      	ldr	r0, [pc, #136]	@ (800dd10 <shci_user_evt_proc+0x90>)
 800dc88:	f000 fb96 	bl	800e3b8 <LST_is_empty>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d12b      	bne.n	800dcea <shci_user_evt_proc+0x6a>
 800dc92:	4b20      	ldr	r3, [pc, #128]	@ (800dd14 <shci_user_evt_proc+0x94>)
 800dc94:	781b      	ldrb	r3, [r3, #0]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d027      	beq.n	800dcea <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800dc9a:	f107 030c 	add.w	r3, r7, #12
 800dc9e:	4619      	mov	r1, r3
 800dca0:	481b      	ldr	r0, [pc, #108]	@ (800dd10 <shci_user_evt_proc+0x90>)
 800dca2:	f000 fc18 	bl	800e4d6 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800dca6:	4b1c      	ldr	r3, [pc, #112]	@ (800dd18 <shci_user_evt_proc+0x98>)
 800dca8:	69db      	ldr	r3, [r3, #28]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d00c      	beq.n	800dcc8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800dcb6:	4b18      	ldr	r3, [pc, #96]	@ (800dd18 <shci_user_evt_proc+0x98>)
 800dcb8:	69db      	ldr	r3, [r3, #28]
 800dcba:	1d3a      	adds	r2, r7, #4
 800dcbc:	4610      	mov	r0, r2
 800dcbe:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800dcc0:	793a      	ldrb	r2, [r7, #4]
 800dcc2:	4b14      	ldr	r3, [pc, #80]	@ (800dd14 <shci_user_evt_proc+0x94>)
 800dcc4:	701a      	strb	r2, [r3, #0]
 800dcc6:	e002      	b.n	800dcce <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800dcc8:	4b12      	ldr	r3, [pc, #72]	@ (800dd14 <shci_user_evt_proc+0x94>)
 800dcca:	2201      	movs	r2, #1
 800dccc:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800dcce:	4b11      	ldr	r3, [pc, #68]	@ (800dd14 <shci_user_evt_proc+0x94>)
 800dcd0:	781b      	ldrb	r3, [r3, #0]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d004      	beq.n	800dce0 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f000 fa71 	bl	800e1c0 <TL_MM_EvtDone>
 800dcde:	e004      	b.n	800dcea <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	4619      	mov	r1, r3
 800dce4:	480a      	ldr	r0, [pc, #40]	@ (800dd10 <shci_user_evt_proc+0x90>)
 800dce6:	f000 fb89 	bl	800e3fc <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800dcea:	4809      	ldr	r0, [pc, #36]	@ (800dd10 <shci_user_evt_proc+0x90>)
 800dcec:	f000 fb64 	bl	800e3b8 <LST_is_empty>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d107      	bne.n	800dd06 <shci_user_evt_proc+0x86>
 800dcf6:	4b07      	ldr	r3, [pc, #28]	@ (800dd14 <shci_user_evt_proc+0x94>)
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d003      	beq.n	800dd06 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800dcfe:	4804      	ldr	r0, [pc, #16]	@ (800dd10 <shci_user_evt_proc+0x90>)
 800dd00:	f7f3 f9bd 	bl	800107e <shci_notify_asynch_evt>
  }


  return;
 800dd04:	bf00      	nop
 800dd06:	bf00      	nop
}
 800dd08:	3710      	adds	r7, #16
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}
 800dd0e:	bf00      	nop
 800dd10:	20000428 	.word	0x20000428
 800dd14:	20000438 	.word	0x20000438
 800dd18:	200069dc 	.word	0x200069dc

0800dd1c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b084      	sub	sp, #16
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	60ba      	str	r2, [r7, #8]
 800dd24:	607b      	str	r3, [r7, #4]
 800dd26:	4603      	mov	r3, r0
 800dd28:	81fb      	strh	r3, [r7, #14]
 800dd2a:	460b      	mov	r3, r1
 800dd2c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800dd2e:	2000      	movs	r0, #0
 800dd30:	f000 f868 	bl	800de04 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800dd34:	4b17      	ldr	r3, [pc, #92]	@ (800dd94 <shci_send+0x78>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	89fa      	ldrh	r2, [r7, #14]
 800dd3a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800dd3e:	4b15      	ldr	r3, [pc, #84]	@ (800dd94 <shci_send+0x78>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	7b7a      	ldrb	r2, [r7, #13]
 800dd44:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800dd46:	4b13      	ldr	r3, [pc, #76]	@ (800dd94 <shci_send+0x78>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	330c      	adds	r3, #12
 800dd4c:	7b7a      	ldrb	r2, [r7, #13]
 800dd4e:	68b9      	ldr	r1, [r7, #8]
 800dd50:	4618      	mov	r0, r3
 800dd52:	f002 fba0 	bl	8010496 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800dd56:	4b10      	ldr	r3, [pc, #64]	@ (800dd98 <shci_send+0x7c>)
 800dd58:	2201      	movs	r2, #1
 800dd5a:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800dd5c:	4b0f      	ldr	r3, [pc, #60]	@ (800dd9c <shci_send+0x80>)
 800dd5e:	691b      	ldr	r3, [r3, #16]
 800dd60:	2100      	movs	r1, #0
 800dd62:	2000      	movs	r0, #0
 800dd64:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800dd66:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800dd6a:	f7f3 f99f 	bl	80010ac <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f103 0008 	add.w	r0, r3, #8
 800dd74:	4b07      	ldr	r3, [pc, #28]	@ (800dd94 <shci_send+0x78>)
 800dd76:	6819      	ldr	r1, [r3, #0]
 800dd78:	4b06      	ldr	r3, [pc, #24]	@ (800dd94 <shci_send+0x78>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	789b      	ldrb	r3, [r3, #2]
 800dd7e:	3303      	adds	r3, #3
 800dd80:	461a      	mov	r2, r3
 800dd82:	f002 fb88 	bl	8010496 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800dd86:	2001      	movs	r0, #1
 800dd88:	f000 f83c 	bl	800de04 <Cmd_SetStatus>

  return;
 800dd8c:	bf00      	nop
}
 800dd8e:	3710      	adds	r7, #16
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	20000434 	.word	0x20000434
 800dd98:	20006a00 	.word	0x20006a00
 800dd9c:	200069dc 	.word	0x200069dc

0800dda0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b086      	sub	sp, #24
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800dda8:	4a10      	ldr	r2, [pc, #64]	@ (800ddec <TlInit+0x4c>)
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800ddae:	4810      	ldr	r0, [pc, #64]	@ (800ddf0 <TlInit+0x50>)
 800ddb0:	f000 faf2 	bl	800e398 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800ddb4:	2001      	movs	r0, #1
 800ddb6:	f000 f825 	bl	800de04 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800ddba:	4b0e      	ldr	r3, [pc, #56]	@ (800ddf4 <TlInit+0x54>)
 800ddbc:	2201      	movs	r2, #1
 800ddbe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800ddc0:	4b0d      	ldr	r3, [pc, #52]	@ (800ddf8 <TlInit+0x58>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d00c      	beq.n	800dde2 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800ddcc:	4b0b      	ldr	r3, [pc, #44]	@ (800ddfc <TlInit+0x5c>)
 800ddce:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800ddd0:	4b0b      	ldr	r3, [pc, #44]	@ (800de00 <TlInit+0x60>)
 800ddd2:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800ddd4:	4b08      	ldr	r3, [pc, #32]	@ (800ddf8 <TlInit+0x58>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	f107 020c 	add.w	r2, r7, #12
 800dddc:	4610      	mov	r0, r2
 800ddde:	4798      	blx	r3
  }

  return;
 800dde0:	bf00      	nop
 800dde2:	bf00      	nop
}
 800dde4:	3718      	adds	r7, #24
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}
 800ddea:	bf00      	nop
 800ddec:	20000434 	.word	0x20000434
 800ddf0:	20000428 	.word	0x20000428
 800ddf4:	20000438 	.word	0x20000438
 800ddf8:	200069dc 	.word	0x200069dc
 800ddfc:	0800de55 	.word	0x0800de55
 800de00:	0800de6d 	.word	0x0800de6d

0800de04 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b082      	sub	sp, #8
 800de08:	af00      	add	r7, sp, #0
 800de0a:	4603      	mov	r3, r0
 800de0c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800de0e:	79fb      	ldrb	r3, [r7, #7]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d10b      	bne.n	800de2c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800de14:	4b0d      	ldr	r3, [pc, #52]	@ (800de4c <Cmd_SetStatus+0x48>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d003      	beq.n	800de24 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800de1c:	4b0b      	ldr	r3, [pc, #44]	@ (800de4c <Cmd_SetStatus+0x48>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	2000      	movs	r0, #0
 800de22:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800de24:	4b0a      	ldr	r3, [pc, #40]	@ (800de50 <Cmd_SetStatus+0x4c>)
 800de26:	2200      	movs	r2, #0
 800de28:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800de2a:	e00b      	b.n	800de44 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800de2c:	4b08      	ldr	r3, [pc, #32]	@ (800de50 <Cmd_SetStatus+0x4c>)
 800de2e:	2201      	movs	r2, #1
 800de30:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800de32:	4b06      	ldr	r3, [pc, #24]	@ (800de4c <Cmd_SetStatus+0x48>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d004      	beq.n	800de44 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800de3a:	4b04      	ldr	r3, [pc, #16]	@ (800de4c <Cmd_SetStatus+0x48>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	2001      	movs	r0, #1
 800de40:	4798      	blx	r3
  return;
 800de42:	bf00      	nop
 800de44:	bf00      	nop
}
 800de46:	3708      	adds	r7, #8
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}
 800de4c:	200069fc 	.word	0x200069fc
 800de50:	20000430 	.word	0x20000430

0800de54 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b082      	sub	sp, #8
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800de5c:	2000      	movs	r0, #0
 800de5e:	f7f3 f91a 	bl	8001096 <shci_cmd_resp_release>

  return;
 800de62:	bf00      	nop
}
 800de64:	3708      	adds	r7, #8
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}
	...

0800de6c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b082      	sub	sp, #8
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800de74:	6879      	ldr	r1, [r7, #4]
 800de76:	4805      	ldr	r0, [pc, #20]	@ (800de8c <TlUserEvtReceived+0x20>)
 800de78:	f000 fae6 	bl	800e448 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800de7c:	4803      	ldr	r0, [pc, #12]	@ (800de8c <TlUserEvtReceived+0x20>)
 800de7e:	f7f3 f8fe 	bl	800107e <shci_notify_asynch_evt>

  return;
 800de82:	bf00      	nop
}
 800de84:	3708      	adds	r7, #8
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}
 800de8a:	bf00      	nop
 800de8c:	20000428 	.word	0x20000428

0800de90 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800de90:	b480      	push	{r7}
 800de92:	b083      	sub	sp, #12
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	4a05      	ldr	r2, [pc, #20]	@ (800deb0 <shci_register_io_bus+0x20>)
 800de9c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	4a04      	ldr	r2, [pc, #16]	@ (800deb4 <shci_register_io_bus+0x24>)
 800dea2:	611a      	str	r2, [r3, #16]

  return;
 800dea4:	bf00      	nop
}
 800dea6:	370c      	adds	r7, #12
 800dea8:	46bd      	mov	sp, r7
 800deaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deae:	4770      	bx	lr
 800deb0:	0800e04d 	.word	0x0800e04d
 800deb4:	0800e0a1 	.word	0x0800e0a1

0800deb8 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800debc:	f001 f922 	bl	800f104 <HW_IPCC_Enable>

  return;
 800dec0:	bf00      	nop
}
 800dec2:	bd80      	pop	{r7, pc}

0800dec4 <TL_Init>:


void TL_Init( void )
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800dec8:	4b10      	ldr	r3, [pc, #64]	@ (800df0c <TL_Init+0x48>)
 800deca:	4a11      	ldr	r2, [pc, #68]	@ (800df10 <TL_Init+0x4c>)
 800decc:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800dece:	4b0f      	ldr	r3, [pc, #60]	@ (800df0c <TL_Init+0x48>)
 800ded0:	4a10      	ldr	r2, [pc, #64]	@ (800df14 <TL_Init+0x50>)
 800ded2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800ded4:	4b0d      	ldr	r3, [pc, #52]	@ (800df0c <TL_Init+0x48>)
 800ded6:	4a10      	ldr	r2, [pc, #64]	@ (800df18 <TL_Init+0x54>)
 800ded8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800deda:	4b0c      	ldr	r3, [pc, #48]	@ (800df0c <TL_Init+0x48>)
 800dedc:	4a0f      	ldr	r2, [pc, #60]	@ (800df1c <TL_Init+0x58>)
 800dede:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800dee0:	4b0a      	ldr	r3, [pc, #40]	@ (800df0c <TL_Init+0x48>)
 800dee2:	4a0f      	ldr	r2, [pc, #60]	@ (800df20 <TL_Init+0x5c>)
 800dee4:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800dee6:	4b09      	ldr	r3, [pc, #36]	@ (800df0c <TL_Init+0x48>)
 800dee8:	4a0e      	ldr	r2, [pc, #56]	@ (800df24 <TL_Init+0x60>)
 800deea:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800deec:	4b07      	ldr	r3, [pc, #28]	@ (800df0c <TL_Init+0x48>)
 800deee:	4a0e      	ldr	r2, [pc, #56]	@ (800df28 <TL_Init+0x64>)
 800def0:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800def2:	4b06      	ldr	r3, [pc, #24]	@ (800df0c <TL_Init+0x48>)
 800def4:	4a0d      	ldr	r2, [pc, #52]	@ (800df2c <TL_Init+0x68>)
 800def6:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800def8:	4b04      	ldr	r3, [pc, #16]	@ (800df0c <TL_Init+0x48>)
 800defa:	4a0d      	ldr	r2, [pc, #52]	@ (800df30 <TL_Init+0x6c>)
 800defc:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800defe:	4b03      	ldr	r3, [pc, #12]	@ (800df0c <TL_Init+0x48>)
 800df00:	4a0c      	ldr	r2, [pc, #48]	@ (800df34 <TL_Init+0x70>)
 800df02:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800df04:	f001 f912 	bl	800f12c <HW_IPCC_Init>

  return;
 800df08:	bf00      	nop
}
 800df0a:	bd80      	pop	{r7, pc}
 800df0c:	20030000 	.word	0x20030000
 800df10:	20030028 	.word	0x20030028
 800df14:	20030048 	.word	0x20030048
 800df18:	20030058 	.word	0x20030058
 800df1c:	20030068 	.word	0x20030068
 800df20:	20030070 	.word	0x20030070
 800df24:	20030078 	.word	0x20030078
 800df28:	20030080 	.word	0x20030080
 800df2c:	2003009c 	.word	0x2003009c
 800df30:	200300a0 	.word	0x200300a0
 800df34:	200300ac 	.word	0x200300ac

0800df38 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b084      	sub	sp, #16
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800df44:	4811      	ldr	r0, [pc, #68]	@ (800df8c <TL_BLE_Init+0x54>)
 800df46:	f000 fa27 	bl	800e398 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800df4a:	4b11      	ldr	r3, [pc, #68]	@ (800df90 <TL_BLE_Init+0x58>)
 800df4c:	685b      	ldr	r3, [r3, #4]
 800df4e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	689a      	ldr	r2, [r3, #8]
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	68da      	ldr	r2, [r3, #12]
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	4a0c      	ldr	r2, [pc, #48]	@ (800df94 <TL_BLE_Init+0x5c>)
 800df64:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	4a08      	ldr	r2, [pc, #32]	@ (800df8c <TL_BLE_Init+0x54>)
 800df6a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800df6c:	f001 f8f4 	bl	800f158 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	4a08      	ldr	r2, [pc, #32]	@ (800df98 <TL_BLE_Init+0x60>)
 800df76:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	685b      	ldr	r3, [r3, #4]
 800df7c:	4a07      	ldr	r2, [pc, #28]	@ (800df9c <TL_BLE_Init+0x64>)
 800df7e:	6013      	str	r3, [r2, #0]

  return 0;
 800df80:	2300      	movs	r3, #0
}
 800df82:	4618      	mov	r0, r3
 800df84:	3710      	adds	r7, #16
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	200300c8 	.word	0x200300c8
 800df90:	20030000 	.word	0x20030000
 800df94:	20030a58 	.word	0x20030a58
 800df98:	20006a0c 	.word	0x20006a0c
 800df9c:	20006a10 	.word	0x20006a10

0800dfa0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b082      	sub	sp, #8
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	460b      	mov	r3, r1
 800dfaa:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800dfac:	4b09      	ldr	r3, [pc, #36]	@ (800dfd4 <TL_BLE_SendCmd+0x34>)
 800dfae:	685b      	ldr	r3, [r3, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	2201      	movs	r2, #1
 800dfb4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800dfb6:	4b07      	ldr	r3, [pc, #28]	@ (800dfd4 <TL_BLE_SendCmd+0x34>)
 800dfb8:	685b      	ldr	r3, [r3, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	4619      	mov	r1, r3
 800dfbe:	2001      	movs	r0, #1
 800dfc0:	f000 f96c 	bl	800e29c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800dfc4:	f001 f8e2 	bl	800f18c <HW_IPCC_BLE_SendCmd>

  return 0;
 800dfc8:	2300      	movs	r3, #0
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3708      	adds	r7, #8
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}
 800dfd2:	bf00      	nop
 800dfd4:	20030000 	.word	0x20030000

0800dfd8 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b082      	sub	sp, #8
 800dfdc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800dfde:	e01c      	b.n	800e01a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800dfe0:	1d3b      	adds	r3, r7, #4
 800dfe2:	4619      	mov	r1, r3
 800dfe4:	4812      	ldr	r0, [pc, #72]	@ (800e030 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800dfe6:	f000 fa76 	bl	800e4d6 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	7a5b      	ldrb	r3, [r3, #9]
 800dfee:	2b0f      	cmp	r3, #15
 800dff0:	d003      	beq.n	800dffa <HW_IPCC_BLE_RxEvtNot+0x22>
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	7a5b      	ldrb	r3, [r3, #9]
 800dff6:	2b0e      	cmp	r3, #14
 800dff8:	d105      	bne.n	800e006 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	4619      	mov	r1, r3
 800dffe:	2002      	movs	r0, #2
 800e000:	f000 f94c 	bl	800e29c <OutputDbgTrace>
 800e004:	e004      	b.n	800e010 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	4619      	mov	r1, r3
 800e00a:	2003      	movs	r0, #3
 800e00c:	f000 f946 	bl	800e29c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800e010:	4b08      	ldr	r3, [pc, #32]	@ (800e034 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	687a      	ldr	r2, [r7, #4]
 800e016:	4610      	mov	r0, r2
 800e018:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800e01a:	4805      	ldr	r0, [pc, #20]	@ (800e030 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e01c:	f000 f9cc 	bl	800e3b8 <LST_is_empty>
 800e020:	4603      	mov	r3, r0
 800e022:	2b00      	cmp	r3, #0
 800e024:	d0dc      	beq.n	800dfe0 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800e026:	bf00      	nop
}
 800e028:	3708      	adds	r7, #8
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}
 800e02e:	bf00      	nop
 800e030:	200300c8 	.word	0x200300c8
 800e034:	20006a0c 	.word	0x20006a0c

0800e038 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800e03c:	4b02      	ldr	r3, [pc, #8]	@ (800e048 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4798      	blx	r3

  return;
 800e042:	bf00      	nop
}
 800e044:	bd80      	pop	{r7, pc}
 800e046:	bf00      	nop
 800e048:	20006a10 	.word	0x20006a10

0800e04c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b084      	sub	sp, #16
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800e058:	480d      	ldr	r0, [pc, #52]	@ (800e090 <TL_SYS_Init+0x44>)
 800e05a:	f000 f99d 	bl	800e398 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800e05e:	4b0d      	ldr	r3, [pc, #52]	@ (800e094 <TL_SYS_Init+0x48>)
 800e060:	68db      	ldr	r3, [r3, #12]
 800e062:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	689a      	ldr	r2, [r3, #8]
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	4a08      	ldr	r2, [pc, #32]	@ (800e090 <TL_SYS_Init+0x44>)
 800e070:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800e072:	f001 f8bd 	bl	800f1f0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	4a07      	ldr	r2, [pc, #28]	@ (800e098 <TL_SYS_Init+0x4c>)
 800e07c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	685b      	ldr	r3, [r3, #4]
 800e082:	4a06      	ldr	r2, [pc, #24]	@ (800e09c <TL_SYS_Init+0x50>)
 800e084:	6013      	str	r3, [r2, #0]

  return 0;
 800e086:	2300      	movs	r3, #0
}
 800e088:	4618      	mov	r0, r3
 800e08a:	3710      	adds	r7, #16
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}
 800e090:	200300d0 	.word	0x200300d0
 800e094:	20030000 	.word	0x20030000
 800e098:	20006a14 	.word	0x20006a14
 800e09c:	20006a18 	.word	0x20006a18

0800e0a0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b082      	sub	sp, #8
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	460b      	mov	r3, r1
 800e0aa:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800e0ac:	4b09      	ldr	r3, [pc, #36]	@ (800e0d4 <TL_SYS_SendCmd+0x34>)
 800e0ae:	68db      	ldr	r3, [r3, #12]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	2210      	movs	r2, #16
 800e0b4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800e0b6:	4b07      	ldr	r3, [pc, #28]	@ (800e0d4 <TL_SYS_SendCmd+0x34>)
 800e0b8:	68db      	ldr	r3, [r3, #12]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4619      	mov	r1, r3
 800e0be:	2004      	movs	r0, #4
 800e0c0:	f000 f8ec 	bl	800e29c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800e0c4:	f001 f8ae 	bl	800f224 <HW_IPCC_SYS_SendCmd>

  return 0;
 800e0c8:	2300      	movs	r3, #0
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3708      	adds	r7, #8
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}
 800e0d2:	bf00      	nop
 800e0d4:	20030000 	.word	0x20030000

0800e0d8 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800e0dc:	4b07      	ldr	r3, [pc, #28]	@ (800e0fc <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800e0de:	68db      	ldr	r3, [r3, #12]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	4619      	mov	r1, r3
 800e0e4:	2005      	movs	r0, #5
 800e0e6:	f000 f8d9 	bl	800e29c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800e0ea:	4b05      	ldr	r3, [pc, #20]	@ (800e100 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	4a03      	ldr	r2, [pc, #12]	@ (800e0fc <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800e0f0:	68d2      	ldr	r2, [r2, #12]
 800e0f2:	6812      	ldr	r2, [r2, #0]
 800e0f4:	4610      	mov	r0, r2
 800e0f6:	4798      	blx	r3

  return;
 800e0f8:	bf00      	nop
}
 800e0fa:	bd80      	pop	{r7, pc}
 800e0fc:	20030000 	.word	0x20030000
 800e100:	20006a14 	.word	0x20006a14

0800e104 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b082      	sub	sp, #8
 800e108:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800e10a:	e00e      	b.n	800e12a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800e10c:	1d3b      	adds	r3, r7, #4
 800e10e:	4619      	mov	r1, r3
 800e110:	480b      	ldr	r0, [pc, #44]	@ (800e140 <HW_IPCC_SYS_EvtNot+0x3c>)
 800e112:	f000 f9e0 	bl	800e4d6 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	4619      	mov	r1, r3
 800e11a:	2006      	movs	r0, #6
 800e11c:	f000 f8be 	bl	800e29c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800e120:	4b08      	ldr	r3, [pc, #32]	@ (800e144 <HW_IPCC_SYS_EvtNot+0x40>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	687a      	ldr	r2, [r7, #4]
 800e126:	4610      	mov	r0, r2
 800e128:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800e12a:	4805      	ldr	r0, [pc, #20]	@ (800e140 <HW_IPCC_SYS_EvtNot+0x3c>)
 800e12c:	f000 f944 	bl	800e3b8 <LST_is_empty>
 800e130:	4603      	mov	r3, r0
 800e132:	2b00      	cmp	r3, #0
 800e134:	d0ea      	beq.n	800e10c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800e136:	bf00      	nop
}
 800e138:	3708      	adds	r7, #8
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}
 800e13e:	bf00      	nop
 800e140:	200300d0 	.word	0x200300d0
 800e144:	20006a18 	.word	0x20006a18

0800e148 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b082      	sub	sp, #8
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800e150:	4817      	ldr	r0, [pc, #92]	@ (800e1b0 <TL_MM_Init+0x68>)
 800e152:	f000 f921 	bl	800e398 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800e156:	4817      	ldr	r0, [pc, #92]	@ (800e1b4 <TL_MM_Init+0x6c>)
 800e158:	f000 f91e 	bl	800e398 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800e15c:	4b16      	ldr	r3, [pc, #88]	@ (800e1b8 <TL_MM_Init+0x70>)
 800e15e:	691b      	ldr	r3, [r3, #16]
 800e160:	4a16      	ldr	r2, [pc, #88]	@ (800e1bc <TL_MM_Init+0x74>)
 800e162:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800e164:	4b15      	ldr	r3, [pc, #84]	@ (800e1bc <TL_MM_Init+0x74>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	687a      	ldr	r2, [r7, #4]
 800e16a:	6892      	ldr	r2, [r2, #8]
 800e16c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800e16e:	4b13      	ldr	r3, [pc, #76]	@ (800e1bc <TL_MM_Init+0x74>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	687a      	ldr	r2, [r7, #4]
 800e174:	68d2      	ldr	r2, [r2, #12]
 800e176:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800e178:	4b10      	ldr	r3, [pc, #64]	@ (800e1bc <TL_MM_Init+0x74>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	4a0c      	ldr	r2, [pc, #48]	@ (800e1b0 <TL_MM_Init+0x68>)
 800e17e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800e180:	4b0e      	ldr	r3, [pc, #56]	@ (800e1bc <TL_MM_Init+0x74>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	687a      	ldr	r2, [r7, #4]
 800e186:	6812      	ldr	r2, [r2, #0]
 800e188:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800e18a:	4b0c      	ldr	r3, [pc, #48]	@ (800e1bc <TL_MM_Init+0x74>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	687a      	ldr	r2, [r7, #4]
 800e190:	6852      	ldr	r2, [r2, #4]
 800e192:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800e194:	4b09      	ldr	r3, [pc, #36]	@ (800e1bc <TL_MM_Init+0x74>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	687a      	ldr	r2, [r7, #4]
 800e19a:	6912      	ldr	r2, [r2, #16]
 800e19c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800e19e:	4b07      	ldr	r3, [pc, #28]	@ (800e1bc <TL_MM_Init+0x74>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	6952      	ldr	r2, [r2, #20]
 800e1a6:	619a      	str	r2, [r3, #24]

  return;
 800e1a8:	bf00      	nop
}
 800e1aa:	3708      	adds	r7, #8
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}
 800e1b0:	200300b8 	.word	0x200300b8
 800e1b4:	20006a04 	.word	0x20006a04
 800e1b8:	20030000 	.word	0x20030000
 800e1bc:	20006a1c 	.word	0x20006a1c

0800e1c0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b082      	sub	sp, #8
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800e1c8:	6879      	ldr	r1, [r7, #4]
 800e1ca:	4807      	ldr	r0, [pc, #28]	@ (800e1e8 <TL_MM_EvtDone+0x28>)
 800e1cc:	f000 f93c 	bl	800e448 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800e1d0:	6879      	ldr	r1, [r7, #4]
 800e1d2:	2000      	movs	r0, #0
 800e1d4:	f000 f862 	bl	800e29c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800e1d8:	4804      	ldr	r0, [pc, #16]	@ (800e1ec <TL_MM_EvtDone+0x2c>)
 800e1da:	f001 f869 	bl	800f2b0 <HW_IPCC_MM_SendFreeBuf>

  return;
 800e1de:	bf00      	nop
}
 800e1e0:	3708      	adds	r7, #8
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	bf00      	nop
 800e1e8:	20006a04 	.word	0x20006a04
 800e1ec:	0800e1f1 	.word	0x0800e1f1

0800e1f0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800e1f6:	e00c      	b.n	800e212 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800e1f8:	1d3b      	adds	r3, r7, #4
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	480a      	ldr	r0, [pc, #40]	@ (800e228 <SendFreeBuf+0x38>)
 800e1fe:	f000 f96a 	bl	800e4d6 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800e202:	4b0a      	ldr	r3, [pc, #40]	@ (800e22c <SendFreeBuf+0x3c>)
 800e204:	691b      	ldr	r3, [r3, #16]
 800e206:	691b      	ldr	r3, [r3, #16]
 800e208:	687a      	ldr	r2, [r7, #4]
 800e20a:	4611      	mov	r1, r2
 800e20c:	4618      	mov	r0, r3
 800e20e:	f000 f91b 	bl	800e448 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800e212:	4805      	ldr	r0, [pc, #20]	@ (800e228 <SendFreeBuf+0x38>)
 800e214:	f000 f8d0 	bl	800e3b8 <LST_is_empty>
 800e218:	4603      	mov	r3, r0
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d0ec      	beq.n	800e1f8 <SendFreeBuf+0x8>
  }

  return;
 800e21e:	bf00      	nop
}
 800e220:	3708      	adds	r7, #8
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	20006a04 	.word	0x20006a04
 800e22c:	20030000 	.word	0x20030000

0800e230 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800e230:	b580      	push	{r7, lr}
 800e232:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800e234:	4805      	ldr	r0, [pc, #20]	@ (800e24c <TL_TRACES_Init+0x1c>)
 800e236:	f000 f8af 	bl	800e398 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800e23a:	4b05      	ldr	r3, [pc, #20]	@ (800e250 <TL_TRACES_Init+0x20>)
 800e23c:	695b      	ldr	r3, [r3, #20]
 800e23e:	4a03      	ldr	r2, [pc, #12]	@ (800e24c <TL_TRACES_Init+0x1c>)
 800e240:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800e242:	f001 f887 	bl	800f354 <HW_IPCC_TRACES_Init>

  return;
 800e246:	bf00      	nop
}
 800e248:	bd80      	pop	{r7, pc}
 800e24a:	bf00      	nop
 800e24c:	200300c0 	.word	0x200300c0
 800e250:	20030000 	.word	0x20030000

0800e254 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b082      	sub	sp, #8
 800e258:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800e25a:	e008      	b.n	800e26e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800e25c:	1d3b      	adds	r3, r7, #4
 800e25e:	4619      	mov	r1, r3
 800e260:	4808      	ldr	r0, [pc, #32]	@ (800e284 <HW_IPCC_TRACES_EvtNot+0x30>)
 800e262:	f000 f938 	bl	800e4d6 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	4618      	mov	r0, r3
 800e26a:	f000 f80d 	bl	800e288 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800e26e:	4805      	ldr	r0, [pc, #20]	@ (800e284 <HW_IPCC_TRACES_EvtNot+0x30>)
 800e270:	f000 f8a2 	bl	800e3b8 <LST_is_empty>
 800e274:	4603      	mov	r3, r0
 800e276:	2b00      	cmp	r3, #0
 800e278:	d0f0      	beq.n	800e25c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800e27a:	bf00      	nop
}
 800e27c:	3708      	adds	r7, #8
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}
 800e282:	bf00      	nop
 800e284:	200300c0 	.word	0x200300c0

0800e288 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800e288:	b480      	push	{r7}
 800e28a:	b083      	sub	sp, #12
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800e290:	bf00      	nop
 800e292:	370c      	adds	r7, #12
 800e294:	46bd      	mov	sp, r7
 800e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29a:	4770      	bx	lr

0800e29c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800e29c:	b480      	push	{r7}
 800e29e:	b087      	sub	sp, #28
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	6039      	str	r1, [r7, #0]
 800e2a6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 800e2a8:	79fb      	ldrb	r3, [r7, #7]
 800e2aa:	2b06      	cmp	r3, #6
 800e2ac:	d845      	bhi.n	800e33a <OutputDbgTrace+0x9e>
 800e2ae:	a201      	add	r2, pc, #4	@ (adr r2, 800e2b4 <OutputDbgTrace+0x18>)
 800e2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2b4:	0800e2d1 	.word	0x0800e2d1
 800e2b8:	0800e2f5 	.word	0x0800e2f5
 800e2bc:	0800e2fb 	.word	0x0800e2fb
 800e2c0:	0800e30f 	.word	0x0800e30f
 800e2c4:	0800e31b 	.word	0x0800e31b
 800e2c8:	0800e321 	.word	0x0800e321
 800e2cc:	0800e32f 	.word	0x0800e32f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	7a5b      	ldrb	r3, [r3, #9]
 800e2d8:	2bff      	cmp	r3, #255	@ 0xff
 800e2da:	d005      	beq.n	800e2e8 <OutputDbgTrace+0x4c>
 800e2dc:	2bff      	cmp	r3, #255	@ 0xff
 800e2de:	dc05      	bgt.n	800e2ec <OutputDbgTrace+0x50>
 800e2e0:	2b0e      	cmp	r3, #14
 800e2e2:	d005      	beq.n	800e2f0 <OutputDbgTrace+0x54>
 800e2e4:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800e2e6:	e001      	b.n	800e2ec <OutputDbgTrace+0x50>
          break;
 800e2e8:	bf00      	nop
 800e2ea:	e027      	b.n	800e33c <OutputDbgTrace+0xa0>
          break;
 800e2ec:	bf00      	nop
 800e2ee:	e025      	b.n	800e33c <OutputDbgTrace+0xa0>
          break;
 800e2f0:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800e2f2:	e023      	b.n	800e33c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800e2f8:	e020      	b.n	800e33c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	7a5b      	ldrb	r3, [r3, #9]
 800e302:	2b0e      	cmp	r3, #14
 800e304:	d001      	beq.n	800e30a <OutputDbgTrace+0x6e>
 800e306:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800e308:	e000      	b.n	800e30c <OutputDbgTrace+0x70>
          break;
 800e30a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e30c:	e016      	b.n	800e33c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800e312:	697b      	ldr	r3, [r7, #20]
 800e314:	7a5b      	ldrb	r3, [r3, #9]
 800e316:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e318:	e010      	b.n	800e33c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800e31e:	e00d      	b.n	800e33c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 800e324:	693b      	ldr	r3, [r7, #16]
 800e326:	785b      	ldrb	r3, [r3, #1]
 800e328:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 800e32a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e32c:	e006      	b.n	800e33c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800e332:	697b      	ldr	r3, [r7, #20]
 800e334:	7a5b      	ldrb	r3, [r3, #9]
 800e336:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e338:	e000      	b.n	800e33c <OutputDbgTrace+0xa0>

    default:
      break;
 800e33a:	bf00      	nop
  }

  return;
 800e33c:	bf00      	nop
}
 800e33e:	371c      	adds	r7, #28
 800e340:	46bd      	mov	sp, r7
 800e342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e346:	4770      	bx	lr

0800e348 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800e348:	b480      	push	{r7}
 800e34a:	b085      	sub	sp, #20
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	4603      	mov	r3, r0
 800e350:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800e352:	4b0f      	ldr	r3, [pc, #60]	@ (800e390 <OTP_Read+0x48>)
 800e354:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800e356:	e002      	b.n	800e35e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	3b08      	subs	r3, #8
 800e35c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	3307      	adds	r3, #7
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	79fa      	ldrb	r2, [r7, #7]
 800e366:	429a      	cmp	r2, r3
 800e368:	d003      	beq.n	800e372 <OTP_Read+0x2a>
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	4a09      	ldr	r2, [pc, #36]	@ (800e394 <OTP_Read+0x4c>)
 800e36e:	4293      	cmp	r3, r2
 800e370:	d1f2      	bne.n	800e358 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	3307      	adds	r3, #7
 800e376:	781b      	ldrb	r3, [r3, #0]
 800e378:	79fa      	ldrb	r2, [r7, #7]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	d001      	beq.n	800e382 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800e37e:	2300      	movs	r3, #0
 800e380:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800e382:	68fb      	ldr	r3, [r7, #12]
}
 800e384:	4618      	mov	r0, r3
 800e386:	3714      	adds	r7, #20
 800e388:	46bd      	mov	sp, r7
 800e38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38e:	4770      	bx	lr
 800e390:	1fff73f8 	.word	0x1fff73f8
 800e394:	1fff7000 	.word	0x1fff7000

0800e398 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800e398:	b480      	push	{r7}
 800e39a:	b083      	sub	sp, #12
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	687a      	ldr	r2, [r7, #4]
 800e3a4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	687a      	ldr	r2, [r7, #4]
 800e3aa:	605a      	str	r2, [r3, #4]
}
 800e3ac:	bf00      	nop
 800e3ae:	370c      	adds	r7, #12
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b6:	4770      	bx	lr

0800e3b8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b087      	sub	sp, #28
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e3c0:	f3ef 8310 	mrs	r3, PRIMASK
 800e3c4:	60fb      	str	r3, [r7, #12]
  return(result);
 800e3c6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e3c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800e3ca:	b672      	cpsid	i
}
 800e3cc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	687a      	ldr	r2, [r7, #4]
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d102      	bne.n	800e3de <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800e3d8:	2301      	movs	r3, #1
 800e3da:	75fb      	strb	r3, [r7, #23]
 800e3dc:	e001      	b.n	800e3e2 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	75fb      	strb	r3, [r7, #23]
 800e3e2:	693b      	ldr	r3, [r7, #16]
 800e3e4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	f383 8810 	msr	PRIMASK, r3
}
 800e3ec:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800e3ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	371c      	adds	r7, #28
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fa:	4770      	bx	lr

0800e3fc <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b087      	sub	sp, #28
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e406:	f3ef 8310 	mrs	r3, PRIMASK
 800e40a:	60fb      	str	r3, [r7, #12]
  return(result);
 800e40c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e40e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e410:	b672      	cpsid	i
}
 800e412:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681a      	ldr	r2, [r3, #0]
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	687a      	ldr	r2, [r7, #4]
 800e420:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	683a      	ldr	r2, [r7, #0]
 800e426:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	683a      	ldr	r2, [r7, #0]
 800e42e:	605a      	str	r2, [r3, #4]
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e434:	693b      	ldr	r3, [r7, #16]
 800e436:	f383 8810 	msr	PRIMASK, r3
}
 800e43a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e43c:	bf00      	nop
 800e43e:	371c      	adds	r7, #28
 800e440:	46bd      	mov	sp, r7
 800e442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e446:	4770      	bx	lr

0800e448 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800e448:	b480      	push	{r7}
 800e44a:	b087      	sub	sp, #28
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e452:	f3ef 8310 	mrs	r3, PRIMASK
 800e456:	60fb      	str	r3, [r7, #12]
  return(result);
 800e458:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e45a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e45c:	b672      	cpsid	i
}
 800e45e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	685a      	ldr	r2, [r3, #4]
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	683a      	ldr	r2, [r7, #0]
 800e472:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	685b      	ldr	r3, [r3, #4]
 800e478:	683a      	ldr	r2, [r7, #0]
 800e47a:	601a      	str	r2, [r3, #0]
 800e47c:	697b      	ldr	r3, [r7, #20]
 800e47e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	f383 8810 	msr	PRIMASK, r3
}
 800e486:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e488:	bf00      	nop
 800e48a:	371c      	adds	r7, #28
 800e48c:	46bd      	mov	sp, r7
 800e48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e492:	4770      	bx	lr

0800e494 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800e494:	b480      	push	{r7}
 800e496:	b087      	sub	sp, #28
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e49c:	f3ef 8310 	mrs	r3, PRIMASK
 800e4a0:	60fb      	str	r3, [r7, #12]
  return(result);
 800e4a2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e4a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e4a6:	b672      	cpsid	i
}
 800e4a8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	685b      	ldr	r3, [r3, #4]
 800e4ae:	687a      	ldr	r2, [r7, #4]
 800e4b0:	6812      	ldr	r2, [r2, #0]
 800e4b2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	687a      	ldr	r2, [r7, #4]
 800e4ba:	6852      	ldr	r2, [r2, #4]
 800e4bc:	605a      	str	r2, [r3, #4]
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	f383 8810 	msr	PRIMASK, r3
}
 800e4c8:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e4ca:	bf00      	nop
 800e4cc:	371c      	adds	r7, #28
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d4:	4770      	bx	lr

0800e4d6 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800e4d6:	b580      	push	{r7, lr}
 800e4d8:	b086      	sub	sp, #24
 800e4da:	af00      	add	r7, sp, #0
 800e4dc:	6078      	str	r0, [r7, #4]
 800e4de:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e4e0:	f3ef 8310 	mrs	r3, PRIMASK
 800e4e4:	60fb      	str	r3, [r7, #12]
  return(result);
 800e4e6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e4e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e4ea:	b672      	cpsid	i
}
 800e4ec:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681a      	ldr	r2, [r3, #0]
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7ff ffca 	bl	800e494 <LST_remove_node>
 800e500:	697b      	ldr	r3, [r7, #20]
 800e502:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	f383 8810 	msr	PRIMASK, r3
}
 800e50a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e50c:	bf00      	nop
 800e50e:	3718      	adds	r7, #24
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}

0800e514 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800e514:	b480      	push	{r7}
 800e516:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800e518:	4b03      	ldr	r3, [pc, #12]	@ (800e528 <LL_FLASH_GetUDN+0x14>)
 800e51a:	681b      	ldr	r3, [r3, #0]
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	46bd      	mov	sp, r7
 800e520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e524:	4770      	bx	lr
 800e526:	bf00      	nop
 800e528:	1fff7580 	.word	0x1fff7580

0800e52c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800e52c:	b480      	push	{r7}
 800e52e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800e530:	4b03      	ldr	r3, [pc, #12]	@ (800e540 <LL_FLASH_GetDeviceID+0x14>)
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	b2db      	uxtb	r3, r3
}
 800e536:	4618      	mov	r0, r3
 800e538:	46bd      	mov	sp, r7
 800e53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53e:	4770      	bx	lr
 800e540:	1fff7584 	.word	0x1fff7584

0800e544 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800e544:	b480      	push	{r7}
 800e546:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800e548:	4b03      	ldr	r3, [pc, #12]	@ (800e558 <LL_FLASH_GetSTCompanyID+0x14>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	0a1b      	lsrs	r3, r3, #8
}
 800e54e:	4618      	mov	r0, r3
 800e550:	46bd      	mov	sp, r7
 800e552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e556:	4770      	bx	lr
 800e558:	1fff7584 	.word	0x1fff7584

0800e55c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800e55c:	b5b0      	push	{r4, r5, r7, lr}
 800e55e:	b090      	sub	sp, #64	@ 0x40
 800e560:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800e562:	2392      	movs	r3, #146	@ 0x92
 800e564:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800e568:	4b25      	ldr	r3, [pc, #148]	@ (800e600 <APP_BLE_Init+0xa4>)
 800e56a:	1d3c      	adds	r4, r7, #4
 800e56c:	461d      	mov	r5, r3
 800e56e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e57a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e57e:	c403      	stmia	r4!, {r0, r1}
 800e580:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800e582:	f000 f92d 	bl	800e7e0 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800e586:	2101      	movs	r1, #1
 800e588:	2002      	movs	r0, #2
 800e58a:	f000 ff1b 	bl	800f3c4 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800e58e:	4a1d      	ldr	r2, [pc, #116]	@ (800e604 <APP_BLE_Init+0xa8>)
 800e590:	2100      	movs	r1, #0
 800e592:	2002      	movs	r0, #2
 800e594:	f001 f842 	bl	800f61c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800e598:	1d3b      	adds	r3, r7, #4
 800e59a:	4618      	mov	r0, r3
 800e59c:	f7ff f8c6 	bl	800d72c <SHCI_C2_BLE_Init>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800e5a6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d001      	beq.n	800e5b2 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800e5ae:	f7f4 fc87 	bl	8002ec0 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800e5b2:	f000 f92b 	bl	800e80c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800e5b6:	f7ff f813 	bl	800d5e0 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800e5ba:	4b13      	ldr	r3, [pc, #76]	@ (800e608 <APP_BLE_Init+0xac>)
 800e5bc:	2200      	movs	r2, #0
 800e5be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800e5c2:	4b11      	ldr	r3, [pc, #68]	@ (800e608 <APP_BLE_Init+0xac>)
 800e5c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e5c8:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800e5ca:	4a10      	ldr	r2, [pc, #64]	@ (800e60c <APP_BLE_Init+0xb0>)
 800e5cc:	2100      	movs	r1, #0
 800e5ce:	2001      	movs	r0, #1
 800e5d0:	f001 f824 	bl	800f61c <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800e5d4:	2006      	movs	r0, #6
 800e5d6:	f7fe fe77 	bl	800d2c8 <aci_hal_set_radio_activity_mask>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800e5e0:	f000 fae0 	bl	800eba4 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800e5e4:	4b08      	ldr	r3, [pc, #32]	@ (800e608 <APP_BLE_Init+0xac>)
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800e5ea:	4b07      	ldr	r3, [pc, #28]	@ (800e608 <APP_BLE_Init+0xac>)
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800e5f0:	2001      	movs	r0, #1
 800e5f2:	f000 f9bf 	bl	800e974 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800e5f6:	bf00      	nop
}
 800e5f8:	3740      	adds	r7, #64	@ 0x40
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bdb0      	pop	{r4, r5, r7, pc}
 800e5fe:	bf00      	nop
 800e600:	080133b8 	.word	0x080133b8
 800e604:	0800d949 	.word	0x0800d949
 800e608:	20006a28 	.word	0x20006a28
 800e60c:	0800ea5d 	.word	0x0800ea5d

0800e610 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b08c      	sub	sp, #48	@ 0x30
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800e618:	2392      	movs	r3, #146	@ 0x92
 800e61a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	3301      	adds	r3, #1
 800e622:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 800e624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	2bff      	cmp	r3, #255	@ 0xff
 800e62a:	d05c      	beq.n	800e6e6 <SVCCTL_App_Notification+0xd6>
 800e62c:	2bff      	cmp	r3, #255	@ 0xff
 800e62e:	f300 80bd 	bgt.w	800e7ac <SVCCTL_App_Notification+0x19c>
 800e632:	2b3e      	cmp	r3, #62	@ 0x3e
 800e634:	d02b      	beq.n	800e68e <SVCCTL_App_Notification+0x7e>
 800e636:	2b3e      	cmp	r3, #62	@ 0x3e
 800e638:	f300 80b8 	bgt.w	800e7ac <SVCCTL_App_Notification+0x19c>
 800e63c:	2b05      	cmp	r3, #5
 800e63e:	d002      	beq.n	800e646 <SVCCTL_App_Notification+0x36>
 800e640:	2b10      	cmp	r3, #16
 800e642:	d020      	beq.n	800e686 <SVCCTL_App_Notification+0x76>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800e644:	e0b2      	b.n	800e7ac <SVCCTL_App_Notification+0x19c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800e646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e648:	3302      	adds	r3, #2
 800e64a:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e652:	b29a      	uxth	r2, r3
 800e654:	4b59      	ldr	r3, [pc, #356]	@ (800e7bc <SVCCTL_App_Notification+0x1ac>)
 800e656:	8adb      	ldrh	r3, [r3, #22]
 800e658:	429a      	cmp	r2, r3
 800e65a:	d106      	bne.n	800e66a <SVCCTL_App_Notification+0x5a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800e65c:	4b57      	ldr	r3, [pc, #348]	@ (800e7bc <SVCCTL_App_Notification+0x1ac>)
 800e65e:	2200      	movs	r2, #0
 800e660:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800e662:	4b56      	ldr	r3, [pc, #344]	@ (800e7bc <SVCCTL_App_Notification+0x1ac>)
 800e664:	2200      	movs	r2, #0
 800e666:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800e66a:	2001      	movs	r0, #1
 800e66c:	f000 f982 	bl	800e974 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800e670:	4b53      	ldr	r3, [pc, #332]	@ (800e7c0 <SVCCTL_App_Notification+0x1b0>)
 800e672:	2201      	movs	r2, #1
 800e674:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800e676:	4b51      	ldr	r3, [pc, #324]	@ (800e7bc <SVCCTL_App_Notification+0x1ac>)
 800e678:	8ada      	ldrh	r2, [r3, #22]
 800e67a:	4b51      	ldr	r3, [pc, #324]	@ (800e7c0 <SVCCTL_App_Notification+0x1b0>)
 800e67c:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800e67e:	4850      	ldr	r0, [pc, #320]	@ (800e7c0 <SVCCTL_App_Notification+0x1b0>)
 800e680:	f000 fa7c 	bl	800eb7c <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800e684:	e095      	b.n	800e7b2 <SVCCTL_App_Notification+0x1a2>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 800e686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e688:	3302      	adds	r3, #2
 800e68a:	613b      	str	r3, [r7, #16]
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 800e68c:	e091      	b.n	800e7b2 <SVCCTL_App_Notification+0x1a2>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800e68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e690:	3302      	adds	r3, #2
 800e692:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 800e694:	69bb      	ldr	r3, [r7, #24]
 800e696:	781b      	ldrb	r3, [r3, #0]
 800e698:	2b01      	cmp	r3, #1
 800e69a:	d001      	beq.n	800e6a0 <SVCCTL_App_Notification+0x90>
 800e69c:	2b03      	cmp	r3, #3
          break;
 800e69e:	e021      	b.n	800e6e4 <SVCCTL_App_Notification+0xd4>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800e6a0:	69bb      	ldr	r3, [r7, #24]
 800e6a2:	3301      	adds	r3, #1
 800e6a4:	617b      	str	r3, [r7, #20]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800e6a6:	4b45      	ldr	r3, [pc, #276]	@ (800e7bc <SVCCTL_App_Notification+0x1ac>)
 800e6a8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e6ac:	2b04      	cmp	r3, #4
 800e6ae:	d104      	bne.n	800e6ba <SVCCTL_App_Notification+0xaa>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800e6b0:	4b42      	ldr	r3, [pc, #264]	@ (800e7bc <SVCCTL_App_Notification+0x1ac>)
 800e6b2:	2206      	movs	r2, #6
 800e6b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800e6b8:	e003      	b.n	800e6c2 <SVCCTL_App_Notification+0xb2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800e6ba:	4b40      	ldr	r3, [pc, #256]	@ (800e7bc <SVCCTL_App_Notification+0x1ac>)
 800e6bc:	2205      	movs	r2, #5
 800e6be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e6c8:	b29a      	uxth	r2, r3
 800e6ca:	4b3c      	ldr	r3, [pc, #240]	@ (800e7bc <SVCCTL_App_Notification+0x1ac>)
 800e6cc:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800e6ce:	4b3c      	ldr	r3, [pc, #240]	@ (800e7c0 <SVCCTL_App_Notification+0x1b0>)
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800e6d4:	4b39      	ldr	r3, [pc, #228]	@ (800e7bc <SVCCTL_App_Notification+0x1ac>)
 800e6d6:	8ada      	ldrh	r2, [r3, #22]
 800e6d8:	4b39      	ldr	r3, [pc, #228]	@ (800e7c0 <SVCCTL_App_Notification+0x1b0>)
 800e6da:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800e6dc:	4838      	ldr	r0, [pc, #224]	@ (800e7c0 <SVCCTL_App_Notification+0x1b0>)
 800e6de:	f000 fa4d 	bl	800eb7c <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800e6e2:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800e6e4:	e065      	b.n	800e7b2 <SVCCTL_App_Notification+0x1a2>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800e6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6e8:	3302      	adds	r3, #2
 800e6ea:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 800e6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6ee:	881b      	ldrh	r3, [r3, #0]
 800e6f0:	b29b      	uxth	r3, r3
 800e6f2:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800e6f6:	4293      	cmp	r3, r2
 800e6f8:	d048      	beq.n	800e78c <SVCCTL_App_Notification+0x17c>
 800e6fa:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800e6fe:	4293      	cmp	r3, r2
 800e700:	dc56      	bgt.n	800e7b0 <SVCCTL_App_Notification+0x1a0>
 800e702:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e706:	d04b      	beq.n	800e7a0 <SVCCTL_App_Notification+0x190>
 800e708:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e70c:	dc50      	bgt.n	800e7b0 <SVCCTL_App_Notification+0x1a0>
 800e70e:	f240 420a 	movw	r2, #1034	@ 0x40a
 800e712:	4293      	cmp	r3, r2
 800e714:	dc4c      	bgt.n	800e7b0 <SVCCTL_App_Notification+0x1a0>
 800e716:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e71a:	dc04      	bgt.n	800e726 <SVCCTL_App_Notification+0x116>
 800e71c:	2b04      	cmp	r3, #4
 800e71e:	d041      	beq.n	800e7a4 <SVCCTL_App_Notification+0x194>
 800e720:	2b06      	cmp	r3, #6
 800e722:	d039      	beq.n	800e798 <SVCCTL_App_Notification+0x188>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800e724:	e044      	b.n	800e7b0 <SVCCTL_App_Notification+0x1a0>
      switch (p_blecore_evt->ecode)
 800e726:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800e72a:	2b09      	cmp	r3, #9
 800e72c:	d840      	bhi.n	800e7b0 <SVCCTL_App_Notification+0x1a0>
 800e72e:	a201      	add	r2, pc, #4	@ (adr r2, 800e734 <SVCCTL_App_Notification+0x124>)
 800e730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e734:	0800e785 	.word	0x0800e785
 800e738:	0800e75d 	.word	0x0800e75d
 800e73c:	0800e7b1 	.word	0x0800e7b1
 800e740:	0800e7b1 	.word	0x0800e7b1
 800e744:	0800e7b1 	.word	0x0800e7b1
 800e748:	0800e7b1 	.word	0x0800e7b1
 800e74c:	0800e7a9 	.word	0x0800e7a9
 800e750:	0800e7b1 	.word	0x0800e7b1
 800e754:	0800e771 	.word	0x0800e771
 800e758:	0800e7a9 	.word	0x0800e7a9
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800e75c:	4b17      	ldr	r3, [pc, #92]	@ (800e7bc <SVCCTL_App_Notification+0x1ac>)
 800e75e:	8adb      	ldrh	r3, [r3, #22]
 800e760:	4918      	ldr	r1, [pc, #96]	@ (800e7c4 <SVCCTL_App_Notification+0x1b4>)
 800e762:	4618      	mov	r0, r3
 800e764:	f7fd ffb2 	bl	800c6cc <aci_gap_pass_key_resp>
 800e768:	4603      	mov	r3, r0
 800e76a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 800e76e:	e01c      	b.n	800e7aa <SVCCTL_App_Notification+0x19a>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800e770:	4b12      	ldr	r3, [pc, #72]	@ (800e7bc <SVCCTL_App_Notification+0x1ac>)
 800e772:	8adb      	ldrh	r3, [r3, #22]
 800e774:	2101      	movs	r1, #1
 800e776:	4618      	mov	r0, r3
 800e778:	f7fe f952 	bl	800ca20 <aci_gap_numeric_comparison_value_confirm_yesno>
 800e77c:	4603      	mov	r3, r0
 800e77e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 800e782:	e012      	b.n	800e7aa <SVCCTL_App_Notification+0x19a>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800e784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e786:	3302      	adds	r3, #2
 800e788:	623b      	str	r3, [r7, #32]
          break;
 800e78a:	e00e      	b.n	800e7aa <SVCCTL_App_Notification+0x19a>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800e78c:	4b0b      	ldr	r3, [pc, #44]	@ (800e7bc <SVCCTL_App_Notification+0x1ac>)
 800e78e:	8adb      	ldrh	r3, [r3, #22]
 800e790:	4618      	mov	r0, r3
 800e792:	f7fe fc58 	bl	800d046 <aci_gatt_confirm_indication>
        break;
 800e796:	e008      	b.n	800e7aa <SVCCTL_App_Notification+0x19a>
	      p_warning_event = (aci_hal_warning_event_rp0 *)p_blecore_evt->data;
 800e798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e79a:	3302      	adds	r3, #2
 800e79c:	61fb      	str	r3, [r7, #28]
          break;
 800e79e:	e004      	b.n	800e7aa <SVCCTL_App_Notification+0x19a>
          break;
 800e7a0:	bf00      	nop
 800e7a2:	e005      	b.n	800e7b0 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800e7a4:	bf00      	nop
 800e7a6:	e003      	b.n	800e7b0 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800e7a8:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800e7aa:	e001      	b.n	800e7b0 <SVCCTL_App_Notification+0x1a0>
      break;
 800e7ac:	bf00      	nop
 800e7ae:	e000      	b.n	800e7b2 <SVCCTL_App_Notification+0x1a2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800e7b0:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800e7b2:	2301      	movs	r3, #1
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3730      	adds	r7, #48	@ 0x30
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}
 800e7bc:	20006a28 	.word	0x20006a28
 800e7c0:	20006aac 	.word	0x20006aac
 800e7c4:	0001b207 	.word	0x0001b207

0800e7c8 <APP_BLE_Get_Server_Connection_Status>:

APP_BLE_ConnStatus_t APP_BLE_Get_Server_Connection_Status(void)
{
 800e7c8:	b480      	push	{r7}
 800e7ca:	af00      	add	r7, sp, #0
  return BleApplicationContext.Device_Connection_Status;
 800e7cc:	4b03      	ldr	r3, [pc, #12]	@ (800e7dc <APP_BLE_Get_Server_Connection_Status+0x14>)
 800e7ce:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7da:	4770      	bx	lr
 800e7dc:	20006a28 	.word	0x20006a28

0800e7e0 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b082      	sub	sp, #8
 800e7e4:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800e7e6:	4b06      	ldr	r3, [pc, #24]	@ (800e800 <Ble_Tl_Init+0x20>)
 800e7e8:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800e7ea:	4b06      	ldr	r3, [pc, #24]	@ (800e804 <Ble_Tl_Init+0x24>)
 800e7ec:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800e7ee:	463b      	mov	r3, r7
 800e7f0:	4619      	mov	r1, r3
 800e7f2:	4805      	ldr	r0, [pc, #20]	@ (800e808 <Ble_Tl_Init+0x28>)
 800e7f4:	f7ff f88c 	bl	800d910 <hci_init>

  return;
 800e7f8:	bf00      	nop
}
 800e7fa:	3708      	adds	r7, #8
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}
 800e800:	200300d8 	.word	0x200300d8
 800e804:	0800eb0d 	.word	0x0800eb0d
 800e808:	0800ead5 	.word	0x0800ead5

0800e80c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800e80c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e80e:	b08d      	sub	sp, #52	@ 0x34
 800e810:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800e812:	2300      	movs	r3, #0
 800e814:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800e816:	2392      	movs	r3, #146	@ 0x92
 800e818:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800e81a:	f7fe fda9 	bl	800d370 <hci_reset>
 800e81e:	4603      	mov	r3, r0
 800e820:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800e822:	f000 f8d7 	bl	800e9d4 <BleGetBdAddress>
 800e826:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, CONFIG_DATA_PUBLIC_ADDRESS_LEN, (uint8_t*) p_bd_addr);
 800e828:	693a      	ldr	r2, [r7, #16]
 800e82a:	2106      	movs	r1, #6
 800e82c:	2000      	movs	r0, #0
 800e82e:	f7fe fc5f 	bl	800d0f0 <aci_hal_write_config_data>
 800e832:	4603      	mov	r3, r0
 800e834:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800e836:	4a4a      	ldr	r2, [pc, #296]	@ (800e960 <Ble_Hci_Gap_Gatt_Init+0x154>)
 800e838:	2110      	movs	r1, #16
 800e83a:	2018      	movs	r0, #24
 800e83c:	f7fe fc58 	bl	800d0f0 <aci_hal_write_config_data>
 800e840:	4603      	mov	r3, r0
 800e842:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800e844:	4a47      	ldr	r2, [pc, #284]	@ (800e964 <Ble_Hci_Gap_Gatt_Init+0x158>)
 800e846:	2110      	movs	r1, #16
 800e848:	2008      	movs	r0, #8
 800e84a:	f7fe fc51 	bl	800d0f0 <aci_hal_write_config_data>
 800e84e:	4603      	mov	r3, r0
 800e850:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800e852:	2118      	movs	r1, #24
 800e854:	2001      	movs	r0, #1
 800e856:	f7fe fcd0 	bl	800d1fa <aci_hal_set_tx_power_level>
 800e85a:	4603      	mov	r3, r0
 800e85c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800e85e:	f7fe f946 	bl	800caee <aci_gatt_init>
 800e862:	4603      	mov	r3, r0
 800e864:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800e866:	2300      	movs	r3, #0
 800e868:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800e86a:	7bfb      	ldrb	r3, [r7, #15]
 800e86c:	f043 0301 	orr.w	r3, r3, #1
 800e870:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800e872:	7bfb      	ldrb	r3, [r7, #15]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d01f      	beq.n	800e8b8 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800e878:	4b3b      	ldr	r3, [pc, #236]	@ (800e968 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800e87a:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800e87c:	1dba      	adds	r2, r7, #6
 800e87e:	7bf8      	ldrb	r0, [r7, #15]
 800e880:	1cbb      	adds	r3, r7, #2
 800e882:	9301      	str	r3, [sp, #4]
 800e884:	1d3b      	adds	r3, r7, #4
 800e886:	9300      	str	r3, [sp, #0]
 800e888:	4613      	mov	r3, r2
 800e88a:	2208      	movs	r2, #8
 800e88c:	2100      	movs	r1, #0
 800e88e:	f7fd ff84 	bl	800c79a <aci_gap_init>
 800e892:	4603      	mov	r3, r0
 800e894:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800e896:	88fc      	ldrh	r4, [r7, #6]
 800e898:	88bd      	ldrh	r5, [r7, #4]
 800e89a:	68b8      	ldr	r0, [r7, #8]
 800e89c:	f7f1 fcc0 	bl	8000220 <strlen>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	b2da      	uxtb	r2, r3
 800e8a4:	68bb      	ldr	r3, [r7, #8]
 800e8a6:	9300      	str	r3, [sp, #0]
 800e8a8:	4613      	mov	r3, r2
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	4629      	mov	r1, r5
 800e8ae:	4620      	mov	r0, r4
 800e8b0:	f7fe fb20 	bl	800cef4 <aci_gatt_update_char_value>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800e8b8:	88f8      	ldrh	r0, [r7, #6]
 800e8ba:	8879      	ldrh	r1, [r7, #2]
 800e8bc:	463b      	mov	r3, r7
 800e8be:	9300      	str	r3, [sp, #0]
 800e8c0:	2302      	movs	r3, #2
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	f7fe fb16 	bl	800cef4 <aci_gatt_update_char_value>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800e8cc:	2202      	movs	r2, #2
 800e8ce:	2102      	movs	r1, #2
 800e8d0:	2000      	movs	r0, #0
 800e8d2:	f7fe fd71 	bl	800d3b8 <hci_le_set_default_phy>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800e8da:	4b24      	ldr	r3, [pc, #144]	@ (800e96c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e8dc:	2201      	movs	r2, #1
 800e8de:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800e8e0:	4b22      	ldr	r3, [pc, #136]	@ (800e96c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e8e2:	781b      	ldrb	r3, [r3, #0]
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f7fd fdd9 	bl	800c49c <aci_gap_set_io_capability>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800e8ee:	4b1f      	ldr	r3, [pc, #124]	@ (800e96c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e8f0:	2201      	movs	r2, #1
 800e8f2:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800e8f4:	4b1d      	ldr	r3, [pc, #116]	@ (800e96c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e8f6:	2208      	movs	r2, #8
 800e8f8:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800e8fa:	4b1c      	ldr	r3, [pc, #112]	@ (800e96c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e8fc:	2210      	movs	r2, #16
 800e8fe:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800e900:	4b1a      	ldr	r3, [pc, #104]	@ (800e96c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e902:	2200      	movs	r2, #0
 800e904:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800e906:	4b19      	ldr	r3, [pc, #100]	@ (800e96c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e908:	4a19      	ldr	r2, [pc, #100]	@ (800e970 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800e90a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800e90c:	4b17      	ldr	r3, [pc, #92]	@ (800e96c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e90e:	2200      	movs	r2, #0
 800e910:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800e912:	4b16      	ldr	r3, [pc, #88]	@ (800e96c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e914:	789c      	ldrb	r4, [r3, #2]
 800e916:	4b15      	ldr	r3, [pc, #84]	@ (800e96c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e918:	785d      	ldrb	r5, [r3, #1]
 800e91a:	4b14      	ldr	r3, [pc, #80]	@ (800e96c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e91c:	791b      	ldrb	r3, [r3, #4]
 800e91e:	4a13      	ldr	r2, [pc, #76]	@ (800e96c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e920:	7952      	ldrb	r2, [r2, #5]
 800e922:	4912      	ldr	r1, [pc, #72]	@ (800e96c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e924:	78c9      	ldrb	r1, [r1, #3]
 800e926:	4811      	ldr	r0, [pc, #68]	@ (800e96c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e928:	6880      	ldr	r0, [r0, #8]
 800e92a:	2600      	movs	r6, #0
 800e92c:	9604      	str	r6, [sp, #16]
 800e92e:	9003      	str	r0, [sp, #12]
 800e930:	9102      	str	r1, [sp, #8]
 800e932:	9201      	str	r2, [sp, #4]
 800e934:	9300      	str	r3, [sp, #0]
 800e936:	2300      	movs	r3, #0
 800e938:	2201      	movs	r2, #1
 800e93a:	4629      	mov	r1, r5
 800e93c:	4620      	mov	r0, r4
 800e93e:	f7fd fe01 	bl	800c544 <aci_gap_set_authentication_requirement>
 800e942:	4603      	mov	r3, r0
 800e944:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800e946:	4b09      	ldr	r3, [pc, #36]	@ (800e96c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e948:	789b      	ldrb	r3, [r3, #2]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d003      	beq.n	800e956 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800e94e:	f7fe f843 	bl	800c9d8 <aci_gap_configure_filter_accept_list>
 800e952:	4603      	mov	r3, r0
 800e954:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800e956:	bf00      	nop
 800e958:	371c      	adds	r7, #28
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e95e:	bf00      	nop
 800e960:	08029210 	.word	0x08029210
 800e964:	08029220 	.word	0x08029220
 800e968:	080133f4 	.word	0x080133f4
 800e96c:	20006a28 	.word	0x20006a28
 800e970:	0001b207 	.word	0x0001b207

0800e974 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b08c      	sub	sp, #48	@ 0x30
 800e978:	af08      	add	r7, sp, #32
 800e97a:	4603      	mov	r3, r0
 800e97c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800e97e:	2392      	movs	r3, #146	@ 0x92
 800e980:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800e982:	4a12      	ldr	r2, [pc, #72]	@ (800e9cc <Adv_Request+0x58>)
 800e984:	79fb      	ldrb	r3, [r7, #7]
 800e986:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800e98a:	2300      	movs	r3, #0
 800e98c:	9306      	str	r3, [sp, #24]
 800e98e:	2300      	movs	r3, #0
 800e990:	9305      	str	r3, [sp, #20]
 800e992:	2300      	movs	r3, #0
 800e994:	9304      	str	r3, [sp, #16]
 800e996:	2300      	movs	r3, #0
 800e998:	9303      	str	r3, [sp, #12]
 800e99a:	2300      	movs	r3, #0
 800e99c:	9302      	str	r3, [sp, #8]
 800e99e:	2300      	movs	r3, #0
 800e9a0:	9301      	str	r3, [sp, #4]
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	9300      	str	r3, [sp, #0]
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	22a0      	movs	r2, #160	@ 0xa0
 800e9aa:	2180      	movs	r1, #128	@ 0x80
 800e9ac:	2000      	movs	r0, #0
 800e9ae:	f7fd fc7b 	bl	800c2a8 <aci_gap_set_discoverable>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800e9b6:	4906      	ldr	r1, [pc, #24]	@ (800e9d0 <Adv_Request+0x5c>)
 800e9b8:	2012      	movs	r0, #18
 800e9ba:	f7fd ff9b 	bl	800c8f4 <aci_gap_update_adv_data>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800e9c2:	bf00      	nop
}
 800e9c4:	3710      	adds	r7, #16
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	bf00      	nop
 800e9cc:	20006a28 	.word	0x20006a28
 800e9d0:	2000020c 	.word	0x2000020c

0800e9d4 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b086      	sub	sp, #24
 800e9d8:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800e9da:	f7ff fd9b 	bl	800e514 <LL_FLASH_GetUDN>
 800e9de:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9e6:	d023      	beq.n	800ea30 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800e9e8:	f7ff fdac 	bl	800e544 <LL_FLASH_GetSTCompanyID>
 800e9ec:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800e9ee:	f7ff fd9d 	bl	800e52c <LL_FLASH_GetDeviceID>
 800e9f2:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	b2da      	uxtb	r2, r3
 800e9f8:	4b16      	ldr	r3, [pc, #88]	@ (800ea54 <BleGetBdAddress+0x80>)
 800e9fa:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800e9fc:	693b      	ldr	r3, [r7, #16]
 800e9fe:	0a1b      	lsrs	r3, r3, #8
 800ea00:	b2da      	uxtb	r2, r3
 800ea02:	4b14      	ldr	r3, [pc, #80]	@ (800ea54 <BleGetBdAddress+0x80>)
 800ea04:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	b2da      	uxtb	r2, r3
 800ea0a:	4b12      	ldr	r3, [pc, #72]	@ (800ea54 <BleGetBdAddress+0x80>)
 800ea0c:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	b2da      	uxtb	r2, r3
 800ea12:	4b10      	ldr	r3, [pc, #64]	@ (800ea54 <BleGetBdAddress+0x80>)
 800ea14:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	0a1b      	lsrs	r3, r3, #8
 800ea1a:	b2da      	uxtb	r2, r3
 800ea1c:	4b0d      	ldr	r3, [pc, #52]	@ (800ea54 <BleGetBdAddress+0x80>)
 800ea1e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	0c1b      	lsrs	r3, r3, #16
 800ea24:	b2da      	uxtb	r2, r3
 800ea26:	4b0b      	ldr	r3, [pc, #44]	@ (800ea54 <BleGetBdAddress+0x80>)
 800ea28:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800ea2a:	4b0a      	ldr	r3, [pc, #40]	@ (800ea54 <BleGetBdAddress+0x80>)
 800ea2c:	617b      	str	r3, [r7, #20]
 800ea2e:	e00b      	b.n	800ea48 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800ea30:	2000      	movs	r0, #0
 800ea32:	f7ff fc89 	bl	800e348 <OTP_Read>
 800ea36:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d002      	beq.n	800ea44 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	617b      	str	r3, [r7, #20]
 800ea42:	e001      	b.n	800ea48 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800ea44:	4b04      	ldr	r3, [pc, #16]	@ (800ea58 <BleGetBdAddress+0x84>)
 800ea46:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800ea48:	697b      	ldr	r3, [r7, #20]
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3718      	adds	r7, #24
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	bf00      	nop
 800ea54:	20006a20 	.word	0x20006a20
 800ea58:	08029208 	.word	0x08029208

0800ea5c <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b082      	sub	sp, #8
 800ea60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800ea62:	4b0a      	ldr	r3, [pc, #40]	@ (800ea8c <Adv_Cancel+0x30>)
 800ea64:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ea68:	2b05      	cmp	r3, #5
 800ea6a:	d00a      	beq.n	800ea82 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ea6c:	2392      	movs	r3, #146	@ 0x92
 800ea6e:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800ea70:	f7fd fbf6 	bl	800c260 <aci_gap_set_non_discoverable>
 800ea74:	4603      	mov	r3, r0
 800ea76:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ea78:	4b04      	ldr	r3, [pc, #16]	@ (800ea8c <Adv_Cancel+0x30>)
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800ea80:	bf00      	nop
 800ea82:	bf00      	nop
}
 800ea84:	3708      	adds	r7, #8
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}
 800ea8a:	bf00      	nop
 800ea8c:	20006a28 	.word	0x20006a28

0800ea90 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b082      	sub	sp, #8
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800ea98:	2100      	movs	r1, #0
 800ea9a:	2002      	movs	r0, #2
 800ea9c:	f000 fde0 	bl	800f660 <UTIL_SEQ_SetTask>

  return;
 800eaa0:	bf00      	nop
}
 800eaa2:	3708      	adds	r7, #8
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}

0800eaa8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b082      	sub	sp, #8
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800eab0:	2001      	movs	r0, #1
 800eab2:	f000 fe41 	bl	800f738 <UTIL_SEQ_SetEvt>

  return;
 800eab6:	bf00      	nop
}
 800eab8:	3708      	adds	r7, #8
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}

0800eabe <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800eabe:	b580      	push	{r7, lr}
 800eac0:	b082      	sub	sp, #8
 800eac2:	af00      	add	r7, sp, #0
 800eac4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800eac6:	2001      	movs	r0, #1
 800eac8:	f000 fe56 	bl	800f778 <UTIL_SEQ_WaitEvt>

  return;
 800eacc:	bf00      	nop
}
 800eace:	3708      	adds	r7, #8
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}

0800ead4 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	685b      	ldr	r3, [r3, #4]
 800eae4:	3308      	adds	r3, #8
 800eae6:	4618      	mov	r0, r3
 800eae8:	f7fe fdcc 	bl	800d684 <SVCCTL_UserEvtRx>
 800eaec:	4603      	mov	r3, r0
 800eaee:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800eaf0:	7afb      	ldrb	r3, [r7, #11]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d003      	beq.n	800eafe <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	2201      	movs	r2, #1
 800eafa:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800eafc:	e003      	b.n	800eb06 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	2200      	movs	r2, #0
 800eb02:	701a      	strb	r2, [r3, #0]
  return;
 800eb04:	bf00      	nop
}
 800eb06:	3710      	adds	r7, #16
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}

0800eb0c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b084      	sub	sp, #16
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	4603      	mov	r3, r0
 800eb14:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800eb16:	79fb      	ldrb	r3, [r7, #7]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d002      	beq.n	800eb22 <BLE_StatusNot+0x16>
 800eb1c:	2b01      	cmp	r3, #1
 800eb1e:	d006      	beq.n	800eb2e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800eb20:	e00b      	b.n	800eb3a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800eb22:	2303      	movs	r3, #3
 800eb24:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800eb26:	68f8      	ldr	r0, [r7, #12]
 800eb28:	f000 fdc6 	bl	800f6b8 <UTIL_SEQ_PauseTask>
      break;
 800eb2c:	e005      	b.n	800eb3a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800eb2e:	2303      	movs	r3, #3
 800eb30:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800eb32:	68f8      	ldr	r0, [r7, #12]
 800eb34:	f000 fde0 	bl	800f6f8 <UTIL_SEQ_ResumeTask>
      break;
 800eb38:	bf00      	nop
  }

  return;
 800eb3a:	bf00      	nop
}
 800eb3c:	3710      	adds	r7, #16
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd80      	pop	{r7, pc}
	...

0800eb44 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800eb44:	b480      	push	{r7}
 800eb46:	b083      	sub	sp, #12
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	2b03      	cmp	r3, #3
 800eb52:	d80b      	bhi.n	800eb6c <Custom_STM_App_Notification+0x28>
 800eb54:	a201      	add	r2, pc, #4	@ (adr r2, 800eb5c <Custom_STM_App_Notification+0x18>)
 800eb56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb5a:	bf00      	nop
 800eb5c:	0800eb6d 	.word	0x0800eb6d
 800eb60:	0800eb6d 	.word	0x0800eb6d
 800eb64:	0800eb6d 	.word	0x0800eb6d
 800eb68:	0800eb6d 	.word	0x0800eb6d

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800eb6c:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800eb6e:	bf00      	nop
}
 800eb70:	370c      	adds	r7, #12
 800eb72:	46bd      	mov	sp, r7
 800eb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb78:	4770      	bx	lr
 800eb7a:	bf00      	nop

0800eb7c <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b083      	sub	sp, #12
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	781b      	ldrb	r3, [r3, #0]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d002      	beq.n	800eb92 <Custom_APP_Notification+0x16>
 800eb8c:	2b01      	cmp	r3, #1
 800eb8e:	d002      	beq.n	800eb96 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800eb90:	e002      	b.n	800eb98 <Custom_APP_Notification+0x1c>
      break;
 800eb92:	bf00      	nop
 800eb94:	e000      	b.n	800eb98 <Custom_APP_Notification+0x1c>
      break;
 800eb96:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800eb98:	bf00      	nop
}
 800eb9a:	370c      	adds	r7, #12
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba2:	4770      	bx	lr

0800eba4 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800eba4:	b480      	push	{r7}
 800eba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800eba8:	bf00      	nop
}
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb0:	4770      	bx	lr
	...

0800ebb4 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b08c      	sub	sp, #48	@ 0x30
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	3301      	adds	r3, #1
 800ebc6:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 800ebc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebca:	781b      	ldrb	r3, [r3, #0]
 800ebcc:	2bff      	cmp	r3, #255	@ 0xff
 800ebce:	d17d      	bne.n	800eccc <Custom_STM_Event_Handler+0x118>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800ebd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebd2:	3302      	adds	r3, #2
 800ebd4:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 800ebd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebd8:	881b      	ldrh	r3, [r3, #0]
 800ebda:	b29b      	uxth	r3, r3
 800ebdc:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800ebe0:	2b1a      	cmp	r3, #26
 800ebe2:	d86f      	bhi.n	800ecc4 <Custom_STM_Event_Handler+0x110>
 800ebe4:	a201      	add	r2, pc, #4	@ (adr r2, 800ebec <Custom_STM_Event_Handler+0x38>)
 800ebe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebea:	bf00      	nop
 800ebec:	0800ec59 	.word	0x0800ec59
 800ebf0:	0800ecc5 	.word	0x0800ecc5
 800ebf4:	0800ecc5 	.word	0x0800ecc5
 800ebf8:	0800ecc5 	.word	0x0800ecc5
 800ebfc:	0800ecc5 	.word	0x0800ecc5
 800ec00:	0800ecc5 	.word	0x0800ecc5
 800ec04:	0800ecc5 	.word	0x0800ecc5
 800ec08:	0800ecc5 	.word	0x0800ecc5
 800ec0c:	0800ecc5 	.word	0x0800ecc5
 800ec10:	0800ecc5 	.word	0x0800ecc5
 800ec14:	0800ecc5 	.word	0x0800ecc5
 800ec18:	0800ecc5 	.word	0x0800ecc5
 800ec1c:	0800ecc5 	.word	0x0800ecc5
 800ec20:	0800ecc5 	.word	0x0800ecc5
 800ec24:	0800ecc5 	.word	0x0800ecc5
 800ec28:	0800ecc5 	.word	0x0800ecc5
 800ec2c:	0800ecc5 	.word	0x0800ecc5
 800ec30:	0800ecc5 	.word	0x0800ecc5
 800ec34:	0800ecc5 	.word	0x0800ecc5
 800ec38:	0800ecc5 	.word	0x0800ecc5
 800ec3c:	0800ecc5 	.word	0x0800ecc5
 800ec40:	0800ecc5 	.word	0x0800ecc5
 800ec44:	0800ecc5 	.word	0x0800ecc5
 800ec48:	0800ecc5 	.word	0x0800ecc5
 800ec4c:	0800ecc5 	.word	0x0800ecc5
 800ec50:	0800ecc5 	.word	0x0800ecc5
 800ec54:	0800eca7 	.word	0x0800eca7
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800ec58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec5a:	3302      	adds	r3, #2
 800ec5c:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomCharcastHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800ec5e:	69fb      	ldr	r3, [r7, #28]
 800ec60:	885b      	ldrh	r3, [r3, #2]
 800ec62:	b29b      	uxth	r3, r3
 800ec64:	461a      	mov	r2, r3
 800ec66:	4b1d      	ldr	r3, [pc, #116]	@ (800ecdc <Custom_STM_Event_Handler+0x128>)
 800ec68:	885b      	ldrh	r3, [r3, #2]
 800ec6a:	3302      	adds	r3, #2
 800ec6c:	429a      	cmp	r2, r3
 800ec6e:	d12b      	bne.n	800ecc8 <Custom_STM_Event_Handler+0x114>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800ec70:	2301      	movs	r3, #1
 800ec72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 800ec76:	69fb      	ldr	r3, [r7, #28]
 800ec78:	7a1b      	ldrb	r3, [r3, #8]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d002      	beq.n	800ec84 <Custom_STM_Event_Handler+0xd0>
 800ec7e:	2b01      	cmp	r3, #1
 800ec80:	d008      	beq.n	800ec94 <Custom_STM_Event_Handler+0xe0>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_1_default */
              break;
 800ec82:	e00f      	b.n	800eca4 <Custom_STM_Event_Handler+0xf0>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_CHARCAST_NOTIFY_DISABLED_EVT;
 800ec84:	2302      	movs	r3, #2
 800ec86:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800ec88:	f107 0308 	add.w	r3, r7, #8
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f7ff ff59 	bl	800eb44 <Custom_STM_App_Notification>
                break;
 800ec92:	e007      	b.n	800eca4 <Custom_STM_Event_Handler+0xf0>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_CHARCAST_NOTIFY_ENABLED_EVT;
 800ec94:	2301      	movs	r3, #1
 800ec96:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800ec98:	f107 0308 	add.w	r3, r7, #8
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f7ff ff51 	bl	800eb44 <Custom_STM_App_Notification>
                break;
 800eca2:	bf00      	nop
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomCharcastHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 800eca4:	e010      	b.n	800ecc8 <Custom_STM_Event_Handler+0x114>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800eca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eca8:	3302      	adds	r3, #2
 800ecaa:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 800ecac:	2303      	movs	r3, #3
 800ecae:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 800ecb0:	6a3b      	ldr	r3, [r7, #32]
 800ecb2:	881b      	ldrh	r3, [r3, #0]
 800ecb4:	b29b      	uxth	r3, r3
 800ecb6:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 800ecb8:	f107 0308 	add.w	r3, r7, #8
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7ff ff41 	bl	800eb44 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800ecc2:	e002      	b.n	800ecca <Custom_STM_Event_Handler+0x116>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800ecc4:	bf00      	nop
 800ecc6:	e002      	b.n	800ecce <Custom_STM_Event_Handler+0x11a>
          break;
 800ecc8:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800ecca:	e000      	b.n	800ecce <Custom_STM_Event_Handler+0x11a>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800eccc:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800ecce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3730      	adds	r7, #48	@ 0x30
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	20006ab0 	.word	0x20006ab0

0800ece0 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b08c      	sub	sp, #48	@ 0x30
 800ece4:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ece6:	2392      	movs	r3, #146	@ 0x92
 800ece8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800ecea:	4834      	ldr	r0, [pc, #208]	@ (800edbc <SVCCTL_InitCustomSvc+0xdc>)
 800ecec:	f7fe fcb0 	bl	800d650 <SVCCTL_RegisterSvcHandler>
   *                              = 4
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 4;
 800ecf0:	2304      	movs	r3, #4
 800ecf2:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService1 */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService1 */

  COPY_TUNERSERVICE_UUID(uuid.Char_UUID_128);
 800ecf4:	238f      	movs	r3, #143	@ 0x8f
 800ecf6:	713b      	strb	r3, [r7, #4]
 800ecf8:	23e5      	movs	r3, #229	@ 0xe5
 800ecfa:	717b      	strb	r3, [r7, #5]
 800ecfc:	23b3      	movs	r3, #179	@ 0xb3
 800ecfe:	71bb      	strb	r3, [r7, #6]
 800ed00:	23d5      	movs	r3, #213	@ 0xd5
 800ed02:	71fb      	strb	r3, [r7, #7]
 800ed04:	232e      	movs	r3, #46	@ 0x2e
 800ed06:	723b      	strb	r3, [r7, #8]
 800ed08:	237f      	movs	r3, #127	@ 0x7f
 800ed0a:	727b      	strb	r3, [r7, #9]
 800ed0c:	234a      	movs	r3, #74	@ 0x4a
 800ed0e:	72bb      	strb	r3, [r7, #10]
 800ed10:	2398      	movs	r3, #152	@ 0x98
 800ed12:	72fb      	strb	r3, [r7, #11]
 800ed14:	232a      	movs	r3, #42	@ 0x2a
 800ed16:	733b      	strb	r3, [r7, #12]
 800ed18:	2348      	movs	r3, #72	@ 0x48
 800ed1a:	737b      	strb	r3, [r7, #13]
 800ed1c:	237a      	movs	r3, #122	@ 0x7a
 800ed1e:	73bb      	strb	r3, [r7, #14]
 800ed20:	23cc      	movs	r3, #204	@ 0xcc
 800ed22:	73fb      	strb	r3, [r7, #15]
 800ed24:	2300      	movs	r3, #0
 800ed26:	743b      	strb	r3, [r7, #16]
 800ed28:	2300      	movs	r3, #0
 800ed2a:	747b      	strb	r3, [r7, #17]
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	74bb      	strb	r3, [r7, #18]
 800ed30:	2300      	movs	r3, #0
 800ed32:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800ed34:	7dbb      	ldrb	r3, [r7, #22]
 800ed36:	1d39      	adds	r1, r7, #4
 800ed38:	4a21      	ldr	r2, [pc, #132]	@ (800edc0 <SVCCTL_InitCustomSvc+0xe0>)
 800ed3a:	9200      	str	r2, [sp, #0]
 800ed3c:	2201      	movs	r2, #1
 800ed3e:	2002      	movs	r0, #2
 800ed40:	f7fd fefa 	bl	800cb38 <aci_gatt_add_service>
 800ed44:	4603      	mov	r3, r0
 800ed46:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  charCast
   */
  COPY_CHARCAST_UUID(uuid.Char_UUID_128);
 800ed48:	2319      	movs	r3, #25
 800ed4a:	713b      	strb	r3, [r7, #4]
 800ed4c:	23ed      	movs	r3, #237	@ 0xed
 800ed4e:	717b      	strb	r3, [r7, #5]
 800ed50:	2382      	movs	r3, #130	@ 0x82
 800ed52:	71bb      	strb	r3, [r7, #6]
 800ed54:	23ae      	movs	r3, #174	@ 0xae
 800ed56:	71fb      	strb	r3, [r7, #7]
 800ed58:	23ed      	movs	r3, #237	@ 0xed
 800ed5a:	723b      	strb	r3, [r7, #8]
 800ed5c:	2321      	movs	r3, #33	@ 0x21
 800ed5e:	727b      	strb	r3, [r7, #9]
 800ed60:	234c      	movs	r3, #76	@ 0x4c
 800ed62:	72bb      	strb	r3, [r7, #10]
 800ed64:	239d      	movs	r3, #157	@ 0x9d
 800ed66:	72fb      	strb	r3, [r7, #11]
 800ed68:	2341      	movs	r3, #65	@ 0x41
 800ed6a:	733b      	strb	r3, [r7, #12]
 800ed6c:	2345      	movs	r3, #69	@ 0x45
 800ed6e:	737b      	strb	r3, [r7, #13]
 800ed70:	2322      	movs	r3, #34	@ 0x22
 800ed72:	73bb      	strb	r3, [r7, #14]
 800ed74:	238e      	movs	r3, #142	@ 0x8e
 800ed76:	73fb      	strb	r3, [r7, #15]
 800ed78:	2300      	movs	r3, #0
 800ed7a:	743b      	strb	r3, [r7, #16]
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	747b      	strb	r3, [r7, #17]
 800ed80:	2300      	movs	r3, #0
 800ed82:	74bb      	strb	r3, [r7, #18]
 800ed84:	2300      	movs	r3, #0
 800ed86:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomTunerserviceHdle,
 800ed88:	4b0d      	ldr	r3, [pc, #52]	@ (800edc0 <SVCCTL_InitCustomSvc+0xe0>)
 800ed8a:	8818      	ldrh	r0, [r3, #0]
 800ed8c:	4b0d      	ldr	r3, [pc, #52]	@ (800edc4 <SVCCTL_InitCustomSvc+0xe4>)
 800ed8e:	881b      	ldrh	r3, [r3, #0]
 800ed90:	1d3a      	adds	r2, r7, #4
 800ed92:	490d      	ldr	r1, [pc, #52]	@ (800edc8 <SVCCTL_InitCustomSvc+0xe8>)
 800ed94:	9105      	str	r1, [sp, #20]
 800ed96:	2100      	movs	r1, #0
 800ed98:	9104      	str	r1, [sp, #16]
 800ed9a:	2110      	movs	r1, #16
 800ed9c:	9103      	str	r1, [sp, #12]
 800ed9e:	2101      	movs	r1, #1
 800eda0:	9102      	str	r1, [sp, #8]
 800eda2:	2100      	movs	r1, #0
 800eda4:	9101      	str	r1, [sp, #4]
 800eda6:	2112      	movs	r1, #18
 800eda8:	9100      	str	r1, [sp, #0]
 800edaa:	2102      	movs	r1, #2
 800edac:	f7fd ff9a 	bl	800cce4 <aci_gatt_add_char>
 800edb0:	4603      	mov	r3, r0
 800edb2:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800edb4:	bf00      	nop
}
 800edb6:	3718      	adds	r7, #24
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}
 800edbc:	0800ebb5 	.word	0x0800ebb5
 800edc0:	20006ab0 	.word	0x20006ab0
 800edc4:	2000021e 	.word	0x2000021e
 800edc8:	20006ab2 	.word	0x20006ab2

0800edcc <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b086      	sub	sp, #24
 800edd0:	af02      	add	r7, sp, #8
 800edd2:	4603      	mov	r3, r0
 800edd4:	6039      	str	r1, [r7, #0]
 800edd6:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800edd8:	2392      	movs	r3, #146	@ 0x92
 800edda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800eddc:	79fb      	ldrb	r3, [r7, #7]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d10f      	bne.n	800ee02 <Custom_STM_App_Update_Char+0x36>
  {

    case CUSTOM_STM_CHARCAST:
      ret = aci_gatt_update_char_value(CustomContext.CustomTunerserviceHdle,
 800ede2:	4b0b      	ldr	r3, [pc, #44]	@ (800ee10 <Custom_STM_App_Update_Char+0x44>)
 800ede4:	8818      	ldrh	r0, [r3, #0]
 800ede6:	4b0a      	ldr	r3, [pc, #40]	@ (800ee10 <Custom_STM_App_Update_Char+0x44>)
 800ede8:	8859      	ldrh	r1, [r3, #2]
 800edea:	4b0a      	ldr	r3, [pc, #40]	@ (800ee14 <Custom_STM_App_Update_Char+0x48>)
 800edec:	881b      	ldrh	r3, [r3, #0]
 800edee:	b2da      	uxtb	r2, r3
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	9300      	str	r3, [sp, #0]
 800edf4:	4613      	mov	r3, r2
 800edf6:	2200      	movs	r2, #0
 800edf8:	f7fe f87c 	bl	800cef4 <aci_gatt_update_char_value>
 800edfc:	4603      	mov	r3, r0
 800edfe:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value CHARCAST command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 800ee00:	e000      	b.n	800ee04 <Custom_STM_App_Update_Char+0x38>

    default:
      break;
 800ee02:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800ee04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee06:	4618      	mov	r0, r3
 800ee08:	3710      	adds	r7, #16
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}
 800ee0e:	bf00      	nop
 800ee10:	20006ab0 	.word	0x20006ab0
 800ee14:	2000021e 	.word	0x2000021e

0800ee18 <LL_PWR_EnableBootC2>:
{
 800ee18:	b480      	push	{r7}
 800ee1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800ee1c:	4b05      	ldr	r3, [pc, #20]	@ (800ee34 <LL_PWR_EnableBootC2+0x1c>)
 800ee1e:	68db      	ldr	r3, [r3, #12]
 800ee20:	4a04      	ldr	r2, [pc, #16]	@ (800ee34 <LL_PWR_EnableBootC2+0x1c>)
 800ee22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ee26:	60d3      	str	r3, [r2, #12]
}
 800ee28:	bf00      	nop
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee30:	4770      	bx	lr
 800ee32:	bf00      	nop
 800ee34:	58000400 	.word	0x58000400

0800ee38 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800ee38:	b480      	push	{r7}
 800ee3a:	b083      	sub	sp, #12
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800ee40:	4b06      	ldr	r3, [pc, #24]	@ (800ee5c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800ee42:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800ee46:	4905      	ldr	r1, [pc, #20]	@ (800ee5c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	4313      	orrs	r3, r2
 800ee4c:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800ee50:	bf00      	nop
 800ee52:	370c      	adds	r7, #12
 800ee54:	46bd      	mov	sp, r7
 800ee56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5a:	4770      	bx	lr
 800ee5c:	58000800 	.word	0x58000800

0800ee60 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800ee60:	b480      	push	{r7}
 800ee62:	b083      	sub	sp, #12
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800ee68:	4b05      	ldr	r3, [pc, #20]	@ (800ee80 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800ee6a:	6a1a      	ldr	r2, [r3, #32]
 800ee6c:	4904      	ldr	r1, [pc, #16]	@ (800ee80 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	4313      	orrs	r3, r2
 800ee72:	620b      	str	r3, [r1, #32]
}
 800ee74:	bf00      	nop
 800ee76:	370c      	adds	r7, #12
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7e:	4770      	bx	lr
 800ee80:	58000800 	.word	0x58000800

0800ee84 <LL_AHB3_GRP1_EnableClock>:
{
 800ee84:	b480      	push	{r7}
 800ee86:	b085      	sub	sp, #20
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800ee8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ee90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ee92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	4313      	orrs	r3, r2
 800ee9a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800ee9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eea0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	4013      	ands	r3, r2
 800eea6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800eea8:	68fb      	ldr	r3, [r7, #12]
}
 800eeaa:	bf00      	nop
 800eeac:	3714      	adds	r7, #20
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb4:	4770      	bx	lr

0800eeb6 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800eeb6:	b480      	push	{r7}
 800eeb8:	b085      	sub	sp, #20
 800eeba:	af00      	add	r7, sp, #0
 800eebc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800eebe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eec2:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800eec6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	4313      	orrs	r3, r2
 800eece:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800eed2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eed6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	4013      	ands	r3, r2
 800eede:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800eee0:	68fb      	ldr	r3, [r7, #12]
}
 800eee2:	bf00      	nop
 800eee4:	3714      	adds	r7, #20
 800eee6:	46bd      	mov	sp, r7
 800eee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeec:	4770      	bx	lr

0800eeee <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800eeee:	b480      	push	{r7}
 800eef0:	b083      	sub	sp, #12
 800eef2:	af00      	add	r7, sp, #0
 800eef4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	601a      	str	r2, [r3, #0]
}
 800ef02:	bf00      	nop
 800ef04:	370c      	adds	r7, #12
 800ef06:	46bd      	mov	sp, r7
 800ef08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0c:	4770      	bx	lr

0800ef0e <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800ef0e:	b480      	push	{r7}
 800ef10:	b083      	sub	sp, #12
 800ef12:	af00      	add	r7, sp, #0
 800ef14:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f043 0201 	orr.w	r2, r3, #1
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	601a      	str	r2, [r3, #0]
}
 800ef22:	bf00      	nop
 800ef24:	370c      	adds	r7, #12
 800ef26:	46bd      	mov	sp, r7
 800ef28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2c:	4770      	bx	lr

0800ef2e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800ef2e:	b480      	push	{r7}
 800ef30:	b083      	sub	sp, #12
 800ef32:	af00      	add	r7, sp, #0
 800ef34:	6078      	str	r0, [r7, #4]
 800ef36:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	685a      	ldr	r2, [r3, #4]
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	041b      	lsls	r3, r3, #16
 800ef40:	43db      	mvns	r3, r3
 800ef42:	401a      	ands	r2, r3
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	605a      	str	r2, [r3, #4]
}
 800ef48:	bf00      	nop
 800ef4a:	370c      	adds	r7, #12
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef52:	4770      	bx	lr

0800ef54 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800ef54:	b480      	push	{r7}
 800ef56:	b083      	sub	sp, #12
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	685a      	ldr	r2, [r3, #4]
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	041b      	lsls	r3, r3, #16
 800ef66:	431a      	orrs	r2, r3
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	605a      	str	r2, [r3, #4]
}
 800ef6c:	bf00      	nop
 800ef6e:	370c      	adds	r7, #12
 800ef70:	46bd      	mov	sp, r7
 800ef72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef76:	4770      	bx	lr

0800ef78 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b083      	sub	sp, #12
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	685a      	ldr	r2, [r3, #4]
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	43db      	mvns	r3, r3
 800ef8a:	401a      	ands	r2, r3
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	605a      	str	r2, [r3, #4]
}
 800ef90:	bf00      	nop
 800ef92:	370c      	adds	r7, #12
 800ef94:	46bd      	mov	sp, r7
 800ef96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9a:	4770      	bx	lr

0800ef9c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b083      	sub	sp, #12
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
 800efa4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	683a      	ldr	r2, [r7, #0]
 800efaa:	609a      	str	r2, [r3, #8]
}
 800efac:	bf00      	nop
 800efae:	370c      	adds	r7, #12
 800efb0:	46bd      	mov	sp, r7
 800efb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb6:	4770      	bx	lr

0800efb8 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800efb8:	b480      	push	{r7}
 800efba:	b083      	sub	sp, #12
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	041a      	lsls	r2, r3, #16
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	609a      	str	r2, [r3, #8]
}
 800efca:	bf00      	nop
 800efcc:	370c      	adds	r7, #12
 800efce:	46bd      	mov	sp, r7
 800efd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd4:	4770      	bx	lr

0800efd6 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800efd6:	b480      	push	{r7}
 800efd8:	b083      	sub	sp, #12
 800efda:	af00      	add	r7, sp, #0
 800efdc:	6078      	str	r0, [r7, #4]
 800efde:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	68da      	ldr	r2, [r3, #12]
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	4013      	ands	r3, r2
 800efe8:	683a      	ldr	r2, [r7, #0]
 800efea:	429a      	cmp	r2, r3
 800efec:	d101      	bne.n	800eff2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800efee:	2301      	movs	r3, #1
 800eff0:	e000      	b.n	800eff4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800eff2:	2300      	movs	r3, #0
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	370c      	adds	r7, #12
 800eff8:	46bd      	mov	sp, r7
 800effa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effe:	4770      	bx	lr

0800f000 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800f000:	b480      	push	{r7}
 800f002:	b083      	sub	sp, #12
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
 800f008:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	69da      	ldr	r2, [r3, #28]
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	4013      	ands	r3, r2
 800f012:	683a      	ldr	r2, [r7, #0]
 800f014:	429a      	cmp	r2, r3
 800f016:	d101      	bne.n	800f01c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800f018:	2301      	movs	r3, #1
 800f01a:	e000      	b.n	800f01e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800f01c:	2300      	movs	r3, #0
}
 800f01e:	4618      	mov	r0, r3
 800f020:	370c      	adds	r7, #12
 800f022:	46bd      	mov	sp, r7
 800f024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f028:	4770      	bx	lr
	...

0800f02c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800f030:	2102      	movs	r1, #2
 800f032:	4818      	ldr	r0, [pc, #96]	@ (800f094 <HW_IPCC_Rx_Handler+0x68>)
 800f034:	f7ff ffe4 	bl	800f000 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f038:	4603      	mov	r3, r0
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d008      	beq.n	800f050 <HW_IPCC_Rx_Handler+0x24>
 800f03e:	4b15      	ldr	r3, [pc, #84]	@ (800f094 <HW_IPCC_Rx_Handler+0x68>)
 800f040:	685b      	ldr	r3, [r3, #4]
 800f042:	f003 0302 	and.w	r3, r3, #2
 800f046:	2b00      	cmp	r3, #0
 800f048:	d102      	bne.n	800f050 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800f04a:	f000 f925 	bl	800f298 <HW_IPCC_SYS_EvtHandler>
 800f04e:	e01e      	b.n	800f08e <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800f050:	2101      	movs	r1, #1
 800f052:	4810      	ldr	r0, [pc, #64]	@ (800f094 <HW_IPCC_Rx_Handler+0x68>)
 800f054:	f7ff ffd4 	bl	800f000 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f058:	4603      	mov	r3, r0
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d008      	beq.n	800f070 <HW_IPCC_Rx_Handler+0x44>
 800f05e:	4b0d      	ldr	r3, [pc, #52]	@ (800f094 <HW_IPCC_Rx_Handler+0x68>)
 800f060:	685b      	ldr	r3, [r3, #4]
 800f062:	f003 0301 	and.w	r3, r3, #1
 800f066:	2b00      	cmp	r3, #0
 800f068:	d102      	bne.n	800f070 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800f06a:	f000 f899 	bl	800f1a0 <HW_IPCC_BLE_EvtHandler>
 800f06e:	e00e      	b.n	800f08e <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800f070:	2108      	movs	r1, #8
 800f072:	4808      	ldr	r0, [pc, #32]	@ (800f094 <HW_IPCC_Rx_Handler+0x68>)
 800f074:	f7ff ffc4 	bl	800f000 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f078:	4603      	mov	r3, r0
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d008      	beq.n	800f090 <HW_IPCC_Rx_Handler+0x64>
 800f07e:	4b05      	ldr	r3, [pc, #20]	@ (800f094 <HW_IPCC_Rx_Handler+0x68>)
 800f080:	685b      	ldr	r3, [r3, #4]
 800f082:	f003 0308 	and.w	r3, r3, #8
 800f086:	2b00      	cmp	r3, #0
 800f088:	d102      	bne.n	800f090 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800f08a:	f000 f97d 	bl	800f388 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800f08e:	bf00      	nop
 800f090:	bf00      	nop
}
 800f092:	bd80      	pop	{r7, pc}
 800f094:	58000c00 	.word	0x58000c00

0800f098 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800f09c:	2102      	movs	r1, #2
 800f09e:	4818      	ldr	r0, [pc, #96]	@ (800f100 <HW_IPCC_Tx_Handler+0x68>)
 800f0a0:	f7ff ff99 	bl	800efd6 <LL_C1_IPCC_IsActiveFlag_CHx>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d108      	bne.n	800f0bc <HW_IPCC_Tx_Handler+0x24>
 800f0aa:	4b15      	ldr	r3, [pc, #84]	@ (800f100 <HW_IPCC_Tx_Handler+0x68>)
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d102      	bne.n	800f0bc <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800f0b6:	f000 f8d3 	bl	800f260 <HW_IPCC_SYS_CmdEvtHandler>
 800f0ba:	e01e      	b.n	800f0fa <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800f0bc:	2108      	movs	r1, #8
 800f0be:	4810      	ldr	r0, [pc, #64]	@ (800f100 <HW_IPCC_Tx_Handler+0x68>)
 800f0c0:	f7ff ff89 	bl	800efd6 <LL_C1_IPCC_IsActiveFlag_CHx>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d108      	bne.n	800f0dc <HW_IPCC_Tx_Handler+0x44>
 800f0ca:	4b0d      	ldr	r3, [pc, #52]	@ (800f100 <HW_IPCC_Tx_Handler+0x68>)
 800f0cc:	685b      	ldr	r3, [r3, #4]
 800f0ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d102      	bne.n	800f0dc <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800f0d6:	f000 f919 	bl	800f30c <HW_IPCC_MM_FreeBufHandler>
 800f0da:	e00e      	b.n	800f0fa <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800f0dc:	2120      	movs	r1, #32
 800f0de:	4808      	ldr	r0, [pc, #32]	@ (800f100 <HW_IPCC_Tx_Handler+0x68>)
 800f0e0:	f7ff ff79 	bl	800efd6 <LL_C1_IPCC_IsActiveFlag_CHx>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d108      	bne.n	800f0fc <HW_IPCC_Tx_Handler+0x64>
 800f0ea:	4b05      	ldr	r3, [pc, #20]	@ (800f100 <HW_IPCC_Tx_Handler+0x68>)
 800f0ec:	685b      	ldr	r3, [r3, #4]
 800f0ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d102      	bne.n	800f0fc <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800f0f6:	f000 f85f 	bl	800f1b8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800f0fa:	bf00      	nop
 800f0fc:	bf00      	nop
}
 800f0fe:	bd80      	pop	{r7, pc}
 800f100:	58000c00 	.word	0x58000c00

0800f104 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800f104:	b580      	push	{r7, lr}
 800f106:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800f108:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800f10c:	f7ff fed3 	bl	800eeb6 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800f110:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800f114:	f7ff fea4 	bl	800ee60 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800f118:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800f11c:	f7ff fe8c 	bl	800ee38 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800f120:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800f122:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800f124:	f7ff fe78 	bl	800ee18 <LL_PWR_EnableBootC2>

  return;
 800f128:	bf00      	nop
}
 800f12a:	bd80      	pop	{r7, pc}

0800f12c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800f130:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800f134:	f7ff fea6 	bl	800ee84 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800f138:	4806      	ldr	r0, [pc, #24]	@ (800f154 <HW_IPCC_Init+0x28>)
 800f13a:	f7ff fee8 	bl	800ef0e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800f13e:	4805      	ldr	r0, [pc, #20]	@ (800f154 <HW_IPCC_Init+0x28>)
 800f140:	f7ff fed5 	bl	800eeee <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800f144:	202c      	movs	r0, #44	@ 0x2c
 800f146:	f7f8 fd5d 	bl	8007c04 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800f14a:	202d      	movs	r0, #45	@ 0x2d
 800f14c:	f7f8 fd5a 	bl	8007c04 <HAL_NVIC_EnableIRQ>

  return;
 800f150:	bf00      	nop
}
 800f152:	bd80      	pop	{r7, pc}
 800f154:	58000c00 	.word	0x58000c00

0800f158 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b084      	sub	sp, #16
 800f15c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f15e:	f3ef 8310 	mrs	r3, PRIMASK
 800f162:	607b      	str	r3, [r7, #4]
  return(result);
 800f164:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800f166:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f168:	b672      	cpsid	i
}
 800f16a:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800f16c:	2101      	movs	r1, #1
 800f16e:	4806      	ldr	r0, [pc, #24]	@ (800f188 <HW_IPCC_BLE_Init+0x30>)
 800f170:	f7ff ff02 	bl	800ef78 <LL_C1_IPCC_EnableReceiveChannel>
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f178:	68bb      	ldr	r3, [r7, #8]
 800f17a:	f383 8810 	msr	PRIMASK, r3
}
 800f17e:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800f180:	bf00      	nop
}
 800f182:	3710      	adds	r7, #16
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}
 800f188:	58000c00 	.word	0x58000c00

0800f18c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800f190:	2101      	movs	r1, #1
 800f192:	4802      	ldr	r0, [pc, #8]	@ (800f19c <HW_IPCC_BLE_SendCmd+0x10>)
 800f194:	f7ff ff10 	bl	800efb8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800f198:	bf00      	nop
}
 800f19a:	bd80      	pop	{r7, pc}
 800f19c:	58000c00 	.word	0x58000c00

0800f1a0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800f1a4:	f7fe ff18 	bl	800dfd8 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800f1a8:	2101      	movs	r1, #1
 800f1aa:	4802      	ldr	r0, [pc, #8]	@ (800f1b4 <HW_IPCC_BLE_EvtHandler+0x14>)
 800f1ac:	f7ff fef6 	bl	800ef9c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800f1b0:	bf00      	nop
}
 800f1b2:	bd80      	pop	{r7, pc}
 800f1b4:	58000c00 	.word	0x58000c00

0800f1b8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b084      	sub	sp, #16
 800f1bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f1be:	f3ef 8310 	mrs	r3, PRIMASK
 800f1c2:	607b      	str	r3, [r7, #4]
  return(result);
 800f1c4:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800f1c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f1c8:	b672      	cpsid	i
}
 800f1ca:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800f1cc:	2120      	movs	r1, #32
 800f1ce:	4807      	ldr	r0, [pc, #28]	@ (800f1ec <HW_IPCC_BLE_AclDataEvtHandler+0x34>)
 800f1d0:	f7ff fec0 	bl	800ef54 <LL_C1_IPCC_DisableTransmitChannel>
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	f383 8810 	msr	PRIMASK, r3
}
 800f1de:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_BLE_AclDataAckNot();
 800f1e0:	f7fe ff2a 	bl	800e038 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800f1e4:	bf00      	nop
}
 800f1e6:	3710      	adds	r7, #16
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	bd80      	pop	{r7, pc}
 800f1ec:	58000c00 	.word	0x58000c00

0800f1f0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b084      	sub	sp, #16
 800f1f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f1f6:	f3ef 8310 	mrs	r3, PRIMASK
 800f1fa:	607b      	str	r3, [r7, #4]
  return(result);
 800f1fc:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800f1fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f200:	b672      	cpsid	i
}
 800f202:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800f204:	2102      	movs	r1, #2
 800f206:	4806      	ldr	r0, [pc, #24]	@ (800f220 <HW_IPCC_SYS_Init+0x30>)
 800f208:	f7ff feb6 	bl	800ef78 <LL_C1_IPCC_EnableReceiveChannel>
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	f383 8810 	msr	PRIMASK, r3
}
 800f216:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800f218:	bf00      	nop
}
 800f21a:	3710      	adds	r7, #16
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bd80      	pop	{r7, pc}
 800f220:	58000c00 	.word	0x58000c00

0800f224 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b084      	sub	sp, #16
 800f228:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800f22a:	2102      	movs	r1, #2
 800f22c:	480b      	ldr	r0, [pc, #44]	@ (800f25c <HW_IPCC_SYS_SendCmd+0x38>)
 800f22e:	f7ff fec3 	bl	800efb8 <LL_C1_IPCC_SetFlag_CHx>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f232:	f3ef 8310 	mrs	r3, PRIMASK
 800f236:	607b      	str	r3, [r7, #4]
  return(result);
 800f238:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800f23a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f23c:	b672      	cpsid	i
}
 800f23e:	bf00      	nop
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800f240:	2102      	movs	r1, #2
 800f242:	4806      	ldr	r0, [pc, #24]	@ (800f25c <HW_IPCC_SYS_SendCmd+0x38>)
 800f244:	f7ff fe73 	bl	800ef2e <LL_C1_IPCC_EnableTransmitChannel>
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	f383 8810 	msr	PRIMASK, r3
}
 800f252:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800f254:	bf00      	nop
}
 800f256:	3710      	adds	r7, #16
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}
 800f25c:	58000c00 	.word	0x58000c00

0800f260 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b084      	sub	sp, #16
 800f264:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f266:	f3ef 8310 	mrs	r3, PRIMASK
 800f26a:	607b      	str	r3, [r7, #4]
  return(result);
 800f26c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800f26e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f270:	b672      	cpsid	i
}
 800f272:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800f274:	2102      	movs	r1, #2
 800f276:	4807      	ldr	r0, [pc, #28]	@ (800f294 <HW_IPCC_SYS_CmdEvtHandler+0x34>)
 800f278:	f7ff fe6c 	bl	800ef54 <LL_C1_IPCC_DisableTransmitChannel>
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	f383 8810 	msr	PRIMASK, r3
}
 800f286:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_SYS_CmdEvtNot();
 800f288:	f7fe ff26 	bl	800e0d8 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800f28c:	bf00      	nop
}
 800f28e:	3710      	adds	r7, #16
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}
 800f294:	58000c00 	.word	0x58000c00

0800f298 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800f29c:	f7fe ff32 	bl	800e104 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800f2a0:	2102      	movs	r1, #2
 800f2a2:	4802      	ldr	r0, [pc, #8]	@ (800f2ac <HW_IPCC_SYS_EvtHandler+0x14>)
 800f2a4:	f7ff fe7a 	bl	800ef9c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800f2a8:	bf00      	nop
}
 800f2aa:	bd80      	pop	{r7, pc}
 800f2ac:	58000c00 	.word	0x58000c00

0800f2b0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b086      	sub	sp, #24
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800f2b8:	2108      	movs	r1, #8
 800f2ba:	4812      	ldr	r0, [pc, #72]	@ (800f304 <HW_IPCC_MM_SendFreeBuf+0x54>)
 800f2bc:	f7ff fe8b 	bl	800efd6 <LL_C1_IPCC_IsActiveFlag_CHx>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d013      	beq.n	800f2ee <HW_IPCC_MM_SendFreeBuf+0x3e>
  {
    FreeBufCb = cb;
 800f2c6:	4a10      	ldr	r2, [pc, #64]	@ (800f308 <HW_IPCC_MM_SendFreeBuf+0x58>)
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f2cc:	f3ef 8310 	mrs	r3, PRIMASK
 800f2d0:	60fb      	str	r3, [r7, #12]
  return(result);
 800f2d2:	68fb      	ldr	r3, [r7, #12]
    UTILS_ENTER_CRITICAL_SECTION();
 800f2d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f2d6:	b672      	cpsid	i
}
 800f2d8:	bf00      	nop
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800f2da:	2108      	movs	r1, #8
 800f2dc:	4809      	ldr	r0, [pc, #36]	@ (800f304 <HW_IPCC_MM_SendFreeBuf+0x54>)
 800f2de:	f7ff fe26 	bl	800ef2e <LL_C1_IPCC_EnableTransmitChannel>
 800f2e2:	697b      	ldr	r3, [r7, #20]
 800f2e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f2e6:	693b      	ldr	r3, [r7, #16]
 800f2e8:	f383 8810 	msr	PRIMASK, r3
}
 800f2ec:	e005      	b.n	800f2fa <HW_IPCC_MM_SendFreeBuf+0x4a>
    UTILS_EXIT_CRITICAL_SECTION();
  }
  else
  {
    cb();
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	4798      	blx	r3

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800f2f2:	2108      	movs	r1, #8
 800f2f4:	4803      	ldr	r0, [pc, #12]	@ (800f304 <HW_IPCC_MM_SendFreeBuf+0x54>)
 800f2f6:	f7ff fe5f 	bl	800efb8 <LL_C1_IPCC_SetFlag_CHx>
  }

  return;
 800f2fa:	bf00      	nop
}
 800f2fc:	3718      	adds	r7, #24
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}
 800f302:	bf00      	nop
 800f304:	58000c00 	.word	0x58000c00
 800f308:	20006ab4 	.word	0x20006ab4

0800f30c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b084      	sub	sp, #16
 800f310:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f312:	f3ef 8310 	mrs	r3, PRIMASK
 800f316:	607b      	str	r3, [r7, #4]
  return(result);
 800f318:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800f31a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f31c:	b672      	cpsid	i
}
 800f31e:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800f320:	2108      	movs	r1, #8
 800f322:	480a      	ldr	r0, [pc, #40]	@ (800f34c <HW_IPCC_MM_FreeBufHandler+0x40>)
 800f324:	f7ff fe16 	bl	800ef54 <LL_C1_IPCC_DisableTransmitChannel>
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	f383 8810 	msr	PRIMASK, r3
}
 800f332:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  FreeBufCb();
 800f334:	4b06      	ldr	r3, [pc, #24]	@ (800f350 <HW_IPCC_MM_FreeBufHandler+0x44>)
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800f33a:	2108      	movs	r1, #8
 800f33c:	4803      	ldr	r0, [pc, #12]	@ (800f34c <HW_IPCC_MM_FreeBufHandler+0x40>)
 800f33e:	f7ff fe3b 	bl	800efb8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800f342:	bf00      	nop
}
 800f344:	3710      	adds	r7, #16
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}
 800f34a:	bf00      	nop
 800f34c:	58000c00 	.word	0x58000c00
 800f350:	20006ab4 	.word	0x20006ab4

0800f354 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b084      	sub	sp, #16
 800f358:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f35a:	f3ef 8310 	mrs	r3, PRIMASK
 800f35e:	607b      	str	r3, [r7, #4]
  return(result);
 800f360:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800f362:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f364:	b672      	cpsid	i
}
 800f366:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800f368:	2108      	movs	r1, #8
 800f36a:	4806      	ldr	r0, [pc, #24]	@ (800f384 <HW_IPCC_TRACES_Init+0x30>)
 800f36c:	f7ff fe04 	bl	800ef78 <LL_C1_IPCC_EnableReceiveChannel>
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	f383 8810 	msr	PRIMASK, r3
}
 800f37a:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800f37c:	bf00      	nop
}
 800f37e:	3710      	adds	r7, #16
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}
 800f384:	58000c00 	.word	0x58000c00

0800f388 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800f38c:	f7fe ff62 	bl	800e254 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800f390:	2108      	movs	r1, #8
 800f392:	4802      	ldr	r0, [pc, #8]	@ (800f39c <HW_IPCC_TRACES_EvtHandler+0x14>)
 800f394:	f7ff fe02 	bl	800ef9c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800f398:	bf00      	nop
}
 800f39a:	bd80      	pop	{r7, pc}
 800f39c:	58000c00 	.word	0x58000c00

0800f3a0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800f3a4:	4b05      	ldr	r3, [pc, #20]	@ (800f3bc <UTIL_LPM_Init+0x1c>)
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800f3aa:	4b05      	ldr	r3, [pc, #20]	@ (800f3c0 <UTIL_LPM_Init+0x20>)
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800f3b0:	bf00      	nop
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b8:	4770      	bx	lr
 800f3ba:	bf00      	nop
 800f3bc:	20006ab8 	.word	0x20006ab8
 800f3c0:	20006abc 	.word	0x20006abc

0800f3c4 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b087      	sub	sp, #28
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
 800f3cc:	460b      	mov	r3, r1
 800f3ce:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f3d0:	f3ef 8310 	mrs	r3, PRIMASK
 800f3d4:	613b      	str	r3, [r7, #16]
  return(result);
 800f3d6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800f3d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f3da:	b672      	cpsid	i
}
 800f3dc:	bf00      	nop
  
  switch(state)
 800f3de:	78fb      	ldrb	r3, [r7, #3]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d008      	beq.n	800f3f6 <UTIL_LPM_SetOffMode+0x32>
 800f3e4:	2b01      	cmp	r3, #1
 800f3e6:	d10e      	bne.n	800f406 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800f3e8:	4b0d      	ldr	r3, [pc, #52]	@ (800f420 <UTIL_LPM_SetOffMode+0x5c>)
 800f3ea:	681a      	ldr	r2, [r3, #0]
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	4313      	orrs	r3, r2
 800f3f0:	4a0b      	ldr	r2, [pc, #44]	@ (800f420 <UTIL_LPM_SetOffMode+0x5c>)
 800f3f2:	6013      	str	r3, [r2, #0]
      break;
 800f3f4:	e008      	b.n	800f408 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	43da      	mvns	r2, r3
 800f3fa:	4b09      	ldr	r3, [pc, #36]	@ (800f420 <UTIL_LPM_SetOffMode+0x5c>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	4013      	ands	r3, r2
 800f400:	4a07      	ldr	r2, [pc, #28]	@ (800f420 <UTIL_LPM_SetOffMode+0x5c>)
 800f402:	6013      	str	r3, [r2, #0]
      break;
 800f404:	e000      	b.n	800f408 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800f406:	bf00      	nop
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	f383 8810 	msr	PRIMASK, r3
}
 800f412:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800f414:	bf00      	nop
 800f416:	371c      	adds	r7, #28
 800f418:	46bd      	mov	sp, r7
 800f41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41e:	4770      	bx	lr
 800f420:	20006abc 	.word	0x20006abc

0800f424 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b090      	sub	sp, #64	@ 0x40
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800f42c:	4b73      	ldr	r3, [pc, #460]	@ (800f5fc <UTIL_SEQ_Run+0x1d8>)
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800f432:	4b72      	ldr	r3, [pc, #456]	@ (800f5fc <UTIL_SEQ_Run+0x1d8>)
 800f434:	681a      	ldr	r2, [r3, #0]
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	4013      	ands	r3, r2
 800f43a:	4a70      	ldr	r2, [pc, #448]	@ (800f5fc <UTIL_SEQ_Run+0x1d8>)
 800f43c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800f43e:	4b70      	ldr	r3, [pc, #448]	@ (800f600 <UTIL_SEQ_Run+0x1dc>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800f444:	4b6f      	ldr	r3, [pc, #444]	@ (800f604 <UTIL_SEQ_Run+0x1e0>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800f44a:	4b6f      	ldr	r3, [pc, #444]	@ (800f608 <UTIL_SEQ_Run+0x1e4>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800f450:	4b6e      	ldr	r3, [pc, #440]	@ (800f60c <UTIL_SEQ_Run+0x1e8>)
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800f456:	e08d      	b.n	800f574 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800f458:	2300      	movs	r3, #0
 800f45a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800f45c:	e002      	b.n	800f464 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800f45e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f460:	3301      	adds	r3, #1
 800f462:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800f464:	4a6a      	ldr	r2, [pc, #424]	@ (800f610 <UTIL_SEQ_Run+0x1ec>)
 800f466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f468:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800f46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f46e:	401a      	ands	r2, r3
 800f470:	4b62      	ldr	r3, [pc, #392]	@ (800f5fc <UTIL_SEQ_Run+0x1d8>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	4013      	ands	r3, r2
 800f476:	2b00      	cmp	r3, #0
 800f478:	d0f1      	beq.n	800f45e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800f47a:	4a65      	ldr	r2, [pc, #404]	@ (800f610 <UTIL_SEQ_Run+0x1ec>)
 800f47c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f47e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800f482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f484:	401a      	ands	r2, r3
 800f486:	4b5d      	ldr	r3, [pc, #372]	@ (800f5fc <UTIL_SEQ_Run+0x1d8>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	4013      	ands	r3, r2
 800f48c:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800f48e:	4a60      	ldr	r2, [pc, #384]	@ (800f610 <UTIL_SEQ_Run+0x1ec>)
 800f490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f492:	00db      	lsls	r3, r3, #3
 800f494:	4413      	add	r3, r2
 800f496:	685a      	ldr	r2, [r3, #4]
 800f498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f49a:	4013      	ands	r3, r2
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d106      	bne.n	800f4ae <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800f4a0:	4a5b      	ldr	r2, [pc, #364]	@ (800f610 <UTIL_SEQ_Run+0x1ec>)
 800f4a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4a4:	00db      	lsls	r3, r3, #3
 800f4a6:	4413      	add	r3, r2
 800f4a8:	f04f 32ff 	mov.w	r2, #4294967295
 800f4ac:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800f4ae:	4a58      	ldr	r2, [pc, #352]	@ (800f610 <UTIL_SEQ_Run+0x1ec>)
 800f4b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4b2:	00db      	lsls	r3, r3, #3
 800f4b4:	4413      	add	r3, r2
 800f4b6:	685a      	ldr	r2, [r3, #4]
 800f4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4ba:	4013      	ands	r3, r2
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f000 f9c1 	bl	800f844 <SEQ_BitPosition>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	461a      	mov	r2, r3
 800f4c6:	4b53      	ldr	r3, [pc, #332]	@ (800f614 <UTIL_SEQ_Run+0x1f0>)
 800f4c8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800f4ca:	4a51      	ldr	r2, [pc, #324]	@ (800f610 <UTIL_SEQ_Run+0x1ec>)
 800f4cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4ce:	00db      	lsls	r3, r3, #3
 800f4d0:	4413      	add	r3, r2
 800f4d2:	685a      	ldr	r2, [r3, #4]
 800f4d4:	4b4f      	ldr	r3, [pc, #316]	@ (800f614 <UTIL_SEQ_Run+0x1f0>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	2101      	movs	r1, #1
 800f4da:	fa01 f303 	lsl.w	r3, r1, r3
 800f4de:	43db      	mvns	r3, r3
 800f4e0:	401a      	ands	r2, r3
 800f4e2:	494b      	ldr	r1, [pc, #300]	@ (800f610 <UTIL_SEQ_Run+0x1ec>)
 800f4e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4e6:	00db      	lsls	r3, r3, #3
 800f4e8:	440b      	add	r3, r1
 800f4ea:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f4ec:	f3ef 8310 	mrs	r3, PRIMASK
 800f4f0:	61bb      	str	r3, [r7, #24]
  return(result);
 800f4f2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f4f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800f4f6:	b672      	cpsid	i
}
 800f4f8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800f4fa:	4b46      	ldr	r3, [pc, #280]	@ (800f614 <UTIL_SEQ_Run+0x1f0>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	2201      	movs	r2, #1
 800f500:	fa02 f303 	lsl.w	r3, r2, r3
 800f504:	43da      	mvns	r2, r3
 800f506:	4b3e      	ldr	r3, [pc, #248]	@ (800f600 <UTIL_SEQ_Run+0x1dc>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	4013      	ands	r3, r2
 800f50c:	4a3c      	ldr	r2, [pc, #240]	@ (800f600 <UTIL_SEQ_Run+0x1dc>)
 800f50e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800f510:	2301      	movs	r3, #1
 800f512:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f514:	e013      	b.n	800f53e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800f516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f518:	3b01      	subs	r3, #1
 800f51a:	4a3d      	ldr	r2, [pc, #244]	@ (800f610 <UTIL_SEQ_Run+0x1ec>)
 800f51c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800f520:	4b3c      	ldr	r3, [pc, #240]	@ (800f614 <UTIL_SEQ_Run+0x1f0>)
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	2201      	movs	r2, #1
 800f526:	fa02 f303 	lsl.w	r3, r2, r3
 800f52a:	43da      	mvns	r2, r3
 800f52c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f52e:	3b01      	subs	r3, #1
 800f530:	400a      	ands	r2, r1
 800f532:	4937      	ldr	r1, [pc, #220]	@ (800f610 <UTIL_SEQ_Run+0x1ec>)
 800f534:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800f538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f53a:	3b01      	subs	r3, #1
 800f53c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f53e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f540:	2b00      	cmp	r3, #0
 800f542:	d1e8      	bne.n	800f516 <UTIL_SEQ_Run+0xf2>
 800f544:	6a3b      	ldr	r3, [r7, #32]
 800f546:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	f383 8810 	msr	PRIMASK, r3
}
 800f54e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800f550:	4b30      	ldr	r3, [pc, #192]	@ (800f614 <UTIL_SEQ_Run+0x1f0>)
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	4a30      	ldr	r2, [pc, #192]	@ (800f618 <UTIL_SEQ_Run+0x1f4>)
 800f556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f55a:	4798      	blx	r3

    local_taskset = TaskSet;
 800f55c:	4b28      	ldr	r3, [pc, #160]	@ (800f600 <UTIL_SEQ_Run+0x1dc>)
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800f562:	4b28      	ldr	r3, [pc, #160]	@ (800f604 <UTIL_SEQ_Run+0x1e0>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800f568:	4b27      	ldr	r3, [pc, #156]	@ (800f608 <UTIL_SEQ_Run+0x1e4>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800f56e:	4b27      	ldr	r3, [pc, #156]	@ (800f60c <UTIL_SEQ_Run+0x1e8>)
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800f574:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f578:	401a      	ands	r2, r3
 800f57a:	4b20      	ldr	r3, [pc, #128]	@ (800f5fc <UTIL_SEQ_Run+0x1d8>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	4013      	ands	r3, r2
 800f580:	2b00      	cmp	r3, #0
 800f582:	d005      	beq.n	800f590 <UTIL_SEQ_Run+0x16c>
 800f584:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f588:	4013      	ands	r3, r2
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	f43f af64 	beq.w	800f458 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800f590:	4b20      	ldr	r3, [pc, #128]	@ (800f614 <UTIL_SEQ_Run+0x1f0>)
 800f592:	f04f 32ff 	mov.w	r2, #4294967295
 800f596:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800f598:	f000 f946 	bl	800f828 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f59c:	f3ef 8310 	mrs	r3, PRIMASK
 800f5a0:	613b      	str	r3, [r7, #16]
  return(result);
 800f5a2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800f5a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800f5a6:	b672      	cpsid	i
}
 800f5a8:	bf00      	nop
  local_taskset = TaskSet;
 800f5aa:	4b15      	ldr	r3, [pc, #84]	@ (800f600 <UTIL_SEQ_Run+0x1dc>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800f5b0:	4b14      	ldr	r3, [pc, #80]	@ (800f604 <UTIL_SEQ_Run+0x1e0>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800f5b6:	4b14      	ldr	r3, [pc, #80]	@ (800f608 <UTIL_SEQ_Run+0x1e4>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800f5bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5c0:	401a      	ands	r2, r3
 800f5c2:	4b0e      	ldr	r3, [pc, #56]	@ (800f5fc <UTIL_SEQ_Run+0x1d8>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	4013      	ands	r3, r2
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d107      	bne.n	800f5dc <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800f5cc:	4b0f      	ldr	r3, [pc, #60]	@ (800f60c <UTIL_SEQ_Run+0x1e8>)
 800f5ce:	681a      	ldr	r2, [r3, #0]
 800f5d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5d2:	4013      	ands	r3, r2
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d101      	bne.n	800f5dc <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800f5d8:	f7f1 fd4a 	bl	8001070 <UTIL_SEQ_Idle>
 800f5dc:	69fb      	ldr	r3, [r7, #28]
 800f5de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	f383 8810 	msr	PRIMASK, r3
}
 800f5e6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800f5e8:	f000 f925 	bl	800f836 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800f5ec:	4a03      	ldr	r2, [pc, #12]	@ (800f5fc <UTIL_SEQ_Run+0x1d8>)
 800f5ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5f0:	6013      	str	r3, [r2, #0]

  return;
 800f5f2:	bf00      	nop
}
 800f5f4:	3740      	adds	r7, #64	@ 0x40
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}
 800f5fa:	bf00      	nop
 800f5fc:	20000224 	.word	0x20000224
 800f600:	20006ac0 	.word	0x20006ac0
 800f604:	20006ac4 	.word	0x20006ac4
 800f608:	20000220 	.word	0x20000220
 800f60c:	20006ac8 	.word	0x20006ac8
 800f610:	20006b50 	.word	0x20006b50
 800f614:	20006acc 	.word	0x20006acc
 800f618:	20006ad0 	.word	0x20006ad0

0800f61c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b088      	sub	sp, #32
 800f620:	af00      	add	r7, sp, #0
 800f622:	60f8      	str	r0, [r7, #12]
 800f624:	60b9      	str	r1, [r7, #8]
 800f626:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f628:	f3ef 8310 	mrs	r3, PRIMASK
 800f62c:	617b      	str	r3, [r7, #20]
  return(result);
 800f62e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800f630:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800f632:	b672      	cpsid	i
}
 800f634:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800f636:	68f8      	ldr	r0, [r7, #12]
 800f638:	f000 f904 	bl	800f844 <SEQ_BitPosition>
 800f63c:	4603      	mov	r3, r0
 800f63e:	4619      	mov	r1, r3
 800f640:	4a06      	ldr	r2, [pc, #24]	@ (800f65c <UTIL_SEQ_RegTask+0x40>)
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f648:	69fb      	ldr	r3, [r7, #28]
 800f64a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f64c:	69bb      	ldr	r3, [r7, #24]
 800f64e:	f383 8810 	msr	PRIMASK, r3
}
 800f652:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800f654:	bf00      	nop
}
 800f656:	3720      	adds	r7, #32
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}
 800f65c:	20006ad0 	.word	0x20006ad0

0800f660 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800f660:	b480      	push	{r7}
 800f662:	b087      	sub	sp, #28
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
 800f668:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f66a:	f3ef 8310 	mrs	r3, PRIMASK
 800f66e:	60fb      	str	r3, [r7, #12]
  return(result);
 800f670:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f672:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f674:	b672      	cpsid	i
}
 800f676:	bf00      	nop

  TaskSet |= TaskId_bm;
 800f678:	4b0d      	ldr	r3, [pc, #52]	@ (800f6b0 <UTIL_SEQ_SetTask+0x50>)
 800f67a:	681a      	ldr	r2, [r3, #0]
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	4313      	orrs	r3, r2
 800f680:	4a0b      	ldr	r2, [pc, #44]	@ (800f6b0 <UTIL_SEQ_SetTask+0x50>)
 800f682:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800f684:	4a0b      	ldr	r2, [pc, #44]	@ (800f6b4 <UTIL_SEQ_SetTask+0x54>)
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	431a      	orrs	r2, r3
 800f690:	4908      	ldr	r1, [pc, #32]	@ (800f6b4 <UTIL_SEQ_SetTask+0x54>)
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f69c:	693b      	ldr	r3, [r7, #16]
 800f69e:	f383 8810 	msr	PRIMASK, r3
}
 800f6a2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800f6a4:	bf00      	nop
}
 800f6a6:	371c      	adds	r7, #28
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ae:	4770      	bx	lr
 800f6b0:	20006ac0 	.word	0x20006ac0
 800f6b4:	20006b50 	.word	0x20006b50

0800f6b8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800f6b8:	b480      	push	{r7}
 800f6ba:	b087      	sub	sp, #28
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f6c0:	f3ef 8310 	mrs	r3, PRIMASK
 800f6c4:	60fb      	str	r3, [r7, #12]
  return(result);
 800f6c6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f6c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f6ca:	b672      	cpsid	i
}
 800f6cc:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	43da      	mvns	r2, r3
 800f6d2:	4b08      	ldr	r3, [pc, #32]	@ (800f6f4 <UTIL_SEQ_PauseTask+0x3c>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	4013      	ands	r3, r2
 800f6d8:	4a06      	ldr	r2, [pc, #24]	@ (800f6f4 <UTIL_SEQ_PauseTask+0x3c>)
 800f6da:	6013      	str	r3, [r2, #0]
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	f383 8810 	msr	PRIMASK, r3
}
 800f6e6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800f6e8:	bf00      	nop
}
 800f6ea:	371c      	adds	r7, #28
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f2:	4770      	bx	lr
 800f6f4:	20000220 	.word	0x20000220

0800f6f8 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b087      	sub	sp, #28
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f700:	f3ef 8310 	mrs	r3, PRIMASK
 800f704:	60fb      	str	r3, [r7, #12]
  return(result);
 800f706:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f708:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f70a:	b672      	cpsid	i
}
 800f70c:	bf00      	nop

  TaskMask |= TaskId_bm;
 800f70e:	4b09      	ldr	r3, [pc, #36]	@ (800f734 <UTIL_SEQ_ResumeTask+0x3c>)
 800f710:	681a      	ldr	r2, [r3, #0]
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	4313      	orrs	r3, r2
 800f716:	4a07      	ldr	r2, [pc, #28]	@ (800f734 <UTIL_SEQ_ResumeTask+0x3c>)
 800f718:	6013      	str	r3, [r2, #0]
 800f71a:	697b      	ldr	r3, [r7, #20]
 800f71c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f71e:	693b      	ldr	r3, [r7, #16]
 800f720:	f383 8810 	msr	PRIMASK, r3
}
 800f724:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800f726:	bf00      	nop
}
 800f728:	371c      	adds	r7, #28
 800f72a:	46bd      	mov	sp, r7
 800f72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f730:	4770      	bx	lr
 800f732:	bf00      	nop
 800f734:	20000220 	.word	0x20000220

0800f738 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800f738:	b480      	push	{r7}
 800f73a:	b087      	sub	sp, #28
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f740:	f3ef 8310 	mrs	r3, PRIMASK
 800f744:	60fb      	str	r3, [r7, #12]
  return(result);
 800f746:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f748:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f74a:	b672      	cpsid	i
}
 800f74c:	bf00      	nop

  EvtSet |= EvtId_bm;
 800f74e:	4b09      	ldr	r3, [pc, #36]	@ (800f774 <UTIL_SEQ_SetEvt+0x3c>)
 800f750:	681a      	ldr	r2, [r3, #0]
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	4313      	orrs	r3, r2
 800f756:	4a07      	ldr	r2, [pc, #28]	@ (800f774 <UTIL_SEQ_SetEvt+0x3c>)
 800f758:	6013      	str	r3, [r2, #0]
 800f75a:	697b      	ldr	r3, [r7, #20]
 800f75c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f75e:	693b      	ldr	r3, [r7, #16]
 800f760:	f383 8810 	msr	PRIMASK, r3
}
 800f764:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800f766:	bf00      	nop
}
 800f768:	371c      	adds	r7, #28
 800f76a:	46bd      	mov	sp, r7
 800f76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f770:	4770      	bx	lr
 800f772:	bf00      	nop
 800f774:	20006ac4 	.word	0x20006ac4

0800f778 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b088      	sub	sp, #32
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800f780:	4b1f      	ldr	r3, [pc, #124]	@ (800f800 <UTIL_SEQ_WaitEvt+0x88>)
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800f786:	4b1e      	ldr	r3, [pc, #120]	@ (800f800 <UTIL_SEQ_WaitEvt+0x88>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f78e:	d102      	bne.n	800f796 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800f790:	2300      	movs	r3, #0
 800f792:	61fb      	str	r3, [r7, #28]
 800f794:	e005      	b.n	800f7a2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800f796:	4b1a      	ldr	r3, [pc, #104]	@ (800f800 <UTIL_SEQ_WaitEvt+0x88>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	2201      	movs	r2, #1
 800f79c:	fa02 f303 	lsl.w	r3, r2, r3
 800f7a0:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800f7a2:	4b18      	ldr	r3, [pc, #96]	@ (800f804 <UTIL_SEQ_WaitEvt+0x8c>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800f7a8:	4a16      	ldr	r2, [pc, #88]	@ (800f804 <UTIL_SEQ_WaitEvt+0x8c>)
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800f7ae:	e003      	b.n	800f7b8 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800f7b0:	6879      	ldr	r1, [r7, #4]
 800f7b2:	69f8      	ldr	r0, [r7, #28]
 800f7b4:	f000 f82a 	bl	800f80c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800f7b8:	4b13      	ldr	r3, [pc, #76]	@ (800f808 <UTIL_SEQ_WaitEvt+0x90>)
 800f7ba:	681a      	ldr	r2, [r3, #0]
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	4013      	ands	r3, r2
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d0f5      	beq.n	800f7b0 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800f7c4:	4a0e      	ldr	r2, [pc, #56]	@ (800f800 <UTIL_SEQ_WaitEvt+0x88>)
 800f7c6:	69bb      	ldr	r3, [r7, #24]
 800f7c8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f7ca:	f3ef 8310 	mrs	r3, PRIMASK
 800f7ce:	60bb      	str	r3, [r7, #8]
  return(result);
 800f7d0:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f7d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800f7d4:	b672      	cpsid	i
}
 800f7d6:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	43da      	mvns	r2, r3
 800f7dc:	4b0a      	ldr	r3, [pc, #40]	@ (800f808 <UTIL_SEQ_WaitEvt+0x90>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	4013      	ands	r3, r2
 800f7e2:	4a09      	ldr	r2, [pc, #36]	@ (800f808 <UTIL_SEQ_WaitEvt+0x90>)
 800f7e4:	6013      	str	r3, [r2, #0]
 800f7e6:	693b      	ldr	r3, [r7, #16]
 800f7e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	f383 8810 	msr	PRIMASK, r3
}
 800f7f0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800f7f2:	4a04      	ldr	r2, [pc, #16]	@ (800f804 <UTIL_SEQ_WaitEvt+0x8c>)
 800f7f4:	697b      	ldr	r3, [r7, #20]
 800f7f6:	6013      	str	r3, [r2, #0]
  return;
 800f7f8:	bf00      	nop
}
 800f7fa:	3720      	adds	r7, #32
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}
 800f800:	20006acc 	.word	0x20006acc
 800f804:	20006ac8 	.word	0x20006ac8
 800f808:	20006ac4 	.word	0x20006ac4

0800f80c <UTIL_SEQ_EvtIdle>:
  UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
  return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b082      	sub	sp, #8
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
 800f814:	6039      	str	r1, [r7, #0]
  (void)EvtWaited_bm;
  UTIL_SEQ_Run(~TaskId_bm);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	43db      	mvns	r3, r3
 800f81a:	4618      	mov	r0, r3
 800f81c:	f7ff fe02 	bl	800f424 <UTIL_SEQ_Run>
  return;
 800f820:	bf00      	nop
}
 800f822:	3708      	adds	r7, #8
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}

0800f828 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800f828:	b480      	push	{r7}
 800f82a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800f82c:	bf00      	nop
}
 800f82e:	46bd      	mov	sp, r7
 800f830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f834:	4770      	bx	lr

0800f836 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800f836:	b480      	push	{r7}
 800f838:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800f83a:	bf00      	nop
}
 800f83c:	46bd      	mov	sp, r7
 800f83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f842:	4770      	bx	lr

0800f844 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800f844:	b480      	push	{r7}
 800f846:	b085      	sub	sp, #20
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d101      	bne.n	800f85a <SEQ_BitPosition+0x16>
    return 32U;
 800f856:	2320      	movs	r3, #32
 800f858:	e003      	b.n	800f862 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	fab3 f383 	clz	r3, r3
 800f860:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 800f862:	f1c3 031f 	rsb	r3, r3, #31
 800f866:	b2db      	uxtb	r3, r3
}
 800f868:	4618      	mov	r0, r3
 800f86a:	3714      	adds	r7, #20
 800f86c:	46bd      	mov	sp, r7
 800f86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f872:	4770      	bx	lr

0800f874 <__cvt>:
 800f874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f878:	ec57 6b10 	vmov	r6, r7, d0
 800f87c:	2f00      	cmp	r7, #0
 800f87e:	460c      	mov	r4, r1
 800f880:	4619      	mov	r1, r3
 800f882:	463b      	mov	r3, r7
 800f884:	bfbb      	ittet	lt
 800f886:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f88a:	461f      	movlt	r7, r3
 800f88c:	2300      	movge	r3, #0
 800f88e:	232d      	movlt	r3, #45	@ 0x2d
 800f890:	700b      	strb	r3, [r1, #0]
 800f892:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f894:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f898:	4691      	mov	r9, r2
 800f89a:	f023 0820 	bic.w	r8, r3, #32
 800f89e:	bfbc      	itt	lt
 800f8a0:	4632      	movlt	r2, r6
 800f8a2:	4616      	movlt	r6, r2
 800f8a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f8a8:	d005      	beq.n	800f8b6 <__cvt+0x42>
 800f8aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f8ae:	d100      	bne.n	800f8b2 <__cvt+0x3e>
 800f8b0:	3401      	adds	r4, #1
 800f8b2:	2102      	movs	r1, #2
 800f8b4:	e000      	b.n	800f8b8 <__cvt+0x44>
 800f8b6:	2103      	movs	r1, #3
 800f8b8:	ab03      	add	r3, sp, #12
 800f8ba:	9301      	str	r3, [sp, #4]
 800f8bc:	ab02      	add	r3, sp, #8
 800f8be:	9300      	str	r3, [sp, #0]
 800f8c0:	ec47 6b10 	vmov	d0, r6, r7
 800f8c4:	4653      	mov	r3, sl
 800f8c6:	4622      	mov	r2, r4
 800f8c8:	f000 fe7e 	bl	80105c8 <_dtoa_r>
 800f8cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f8d0:	4605      	mov	r5, r0
 800f8d2:	d119      	bne.n	800f908 <__cvt+0x94>
 800f8d4:	f019 0f01 	tst.w	r9, #1
 800f8d8:	d00e      	beq.n	800f8f8 <__cvt+0x84>
 800f8da:	eb00 0904 	add.w	r9, r0, r4
 800f8de:	2200      	movs	r2, #0
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	4630      	mov	r0, r6
 800f8e4:	4639      	mov	r1, r7
 800f8e6:	f7f1 f8c7 	bl	8000a78 <__aeabi_dcmpeq>
 800f8ea:	b108      	cbz	r0, 800f8f0 <__cvt+0x7c>
 800f8ec:	f8cd 900c 	str.w	r9, [sp, #12]
 800f8f0:	2230      	movs	r2, #48	@ 0x30
 800f8f2:	9b03      	ldr	r3, [sp, #12]
 800f8f4:	454b      	cmp	r3, r9
 800f8f6:	d31e      	bcc.n	800f936 <__cvt+0xc2>
 800f8f8:	9b03      	ldr	r3, [sp, #12]
 800f8fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f8fc:	1b5b      	subs	r3, r3, r5
 800f8fe:	4628      	mov	r0, r5
 800f900:	6013      	str	r3, [r2, #0]
 800f902:	b004      	add	sp, #16
 800f904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f908:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f90c:	eb00 0904 	add.w	r9, r0, r4
 800f910:	d1e5      	bne.n	800f8de <__cvt+0x6a>
 800f912:	7803      	ldrb	r3, [r0, #0]
 800f914:	2b30      	cmp	r3, #48	@ 0x30
 800f916:	d10a      	bne.n	800f92e <__cvt+0xba>
 800f918:	2200      	movs	r2, #0
 800f91a:	2300      	movs	r3, #0
 800f91c:	4630      	mov	r0, r6
 800f91e:	4639      	mov	r1, r7
 800f920:	f7f1 f8aa 	bl	8000a78 <__aeabi_dcmpeq>
 800f924:	b918      	cbnz	r0, 800f92e <__cvt+0xba>
 800f926:	f1c4 0401 	rsb	r4, r4, #1
 800f92a:	f8ca 4000 	str.w	r4, [sl]
 800f92e:	f8da 3000 	ldr.w	r3, [sl]
 800f932:	4499      	add	r9, r3
 800f934:	e7d3      	b.n	800f8de <__cvt+0x6a>
 800f936:	1c59      	adds	r1, r3, #1
 800f938:	9103      	str	r1, [sp, #12]
 800f93a:	701a      	strb	r2, [r3, #0]
 800f93c:	e7d9      	b.n	800f8f2 <__cvt+0x7e>

0800f93e <__exponent>:
 800f93e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f940:	2900      	cmp	r1, #0
 800f942:	bfba      	itte	lt
 800f944:	4249      	neglt	r1, r1
 800f946:	232d      	movlt	r3, #45	@ 0x2d
 800f948:	232b      	movge	r3, #43	@ 0x2b
 800f94a:	2909      	cmp	r1, #9
 800f94c:	7002      	strb	r2, [r0, #0]
 800f94e:	7043      	strb	r3, [r0, #1]
 800f950:	dd29      	ble.n	800f9a6 <__exponent+0x68>
 800f952:	f10d 0307 	add.w	r3, sp, #7
 800f956:	461d      	mov	r5, r3
 800f958:	270a      	movs	r7, #10
 800f95a:	461a      	mov	r2, r3
 800f95c:	fbb1 f6f7 	udiv	r6, r1, r7
 800f960:	fb07 1416 	mls	r4, r7, r6, r1
 800f964:	3430      	adds	r4, #48	@ 0x30
 800f966:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f96a:	460c      	mov	r4, r1
 800f96c:	2c63      	cmp	r4, #99	@ 0x63
 800f96e:	f103 33ff 	add.w	r3, r3, #4294967295
 800f972:	4631      	mov	r1, r6
 800f974:	dcf1      	bgt.n	800f95a <__exponent+0x1c>
 800f976:	3130      	adds	r1, #48	@ 0x30
 800f978:	1e94      	subs	r4, r2, #2
 800f97a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f97e:	1c41      	adds	r1, r0, #1
 800f980:	4623      	mov	r3, r4
 800f982:	42ab      	cmp	r3, r5
 800f984:	d30a      	bcc.n	800f99c <__exponent+0x5e>
 800f986:	f10d 0309 	add.w	r3, sp, #9
 800f98a:	1a9b      	subs	r3, r3, r2
 800f98c:	42ac      	cmp	r4, r5
 800f98e:	bf88      	it	hi
 800f990:	2300      	movhi	r3, #0
 800f992:	3302      	adds	r3, #2
 800f994:	4403      	add	r3, r0
 800f996:	1a18      	subs	r0, r3, r0
 800f998:	b003      	add	sp, #12
 800f99a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f99c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f9a0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f9a4:	e7ed      	b.n	800f982 <__exponent+0x44>
 800f9a6:	2330      	movs	r3, #48	@ 0x30
 800f9a8:	3130      	adds	r1, #48	@ 0x30
 800f9aa:	7083      	strb	r3, [r0, #2]
 800f9ac:	70c1      	strb	r1, [r0, #3]
 800f9ae:	1d03      	adds	r3, r0, #4
 800f9b0:	e7f1      	b.n	800f996 <__exponent+0x58>
	...

0800f9b4 <_printf_float>:
 800f9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9b8:	b08d      	sub	sp, #52	@ 0x34
 800f9ba:	460c      	mov	r4, r1
 800f9bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f9c0:	4616      	mov	r6, r2
 800f9c2:	461f      	mov	r7, r3
 800f9c4:	4605      	mov	r5, r0
 800f9c6:	f000 fcef 	bl	80103a8 <_localeconv_r>
 800f9ca:	6803      	ldr	r3, [r0, #0]
 800f9cc:	9304      	str	r3, [sp, #16]
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f7f0 fc26 	bl	8000220 <strlen>
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f9d8:	f8d8 3000 	ldr.w	r3, [r8]
 800f9dc:	9005      	str	r0, [sp, #20]
 800f9de:	3307      	adds	r3, #7
 800f9e0:	f023 0307 	bic.w	r3, r3, #7
 800f9e4:	f103 0208 	add.w	r2, r3, #8
 800f9e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f9ec:	f8d4 b000 	ldr.w	fp, [r4]
 800f9f0:	f8c8 2000 	str.w	r2, [r8]
 800f9f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f9f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f9fc:	9307      	str	r3, [sp, #28]
 800f9fe:	f8cd 8018 	str.w	r8, [sp, #24]
 800fa02:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800fa06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fa0a:	4b9c      	ldr	r3, [pc, #624]	@ (800fc7c <_printf_float+0x2c8>)
 800fa0c:	f04f 32ff 	mov.w	r2, #4294967295
 800fa10:	f7f1 f864 	bl	8000adc <__aeabi_dcmpun>
 800fa14:	bb70      	cbnz	r0, 800fa74 <_printf_float+0xc0>
 800fa16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fa1a:	4b98      	ldr	r3, [pc, #608]	@ (800fc7c <_printf_float+0x2c8>)
 800fa1c:	f04f 32ff 	mov.w	r2, #4294967295
 800fa20:	f7f1 f83e 	bl	8000aa0 <__aeabi_dcmple>
 800fa24:	bb30      	cbnz	r0, 800fa74 <_printf_float+0xc0>
 800fa26:	2200      	movs	r2, #0
 800fa28:	2300      	movs	r3, #0
 800fa2a:	4640      	mov	r0, r8
 800fa2c:	4649      	mov	r1, r9
 800fa2e:	f7f1 f82d 	bl	8000a8c <__aeabi_dcmplt>
 800fa32:	b110      	cbz	r0, 800fa3a <_printf_float+0x86>
 800fa34:	232d      	movs	r3, #45	@ 0x2d
 800fa36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa3a:	4a91      	ldr	r2, [pc, #580]	@ (800fc80 <_printf_float+0x2cc>)
 800fa3c:	4b91      	ldr	r3, [pc, #580]	@ (800fc84 <_printf_float+0x2d0>)
 800fa3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fa42:	bf8c      	ite	hi
 800fa44:	4690      	movhi	r8, r2
 800fa46:	4698      	movls	r8, r3
 800fa48:	2303      	movs	r3, #3
 800fa4a:	6123      	str	r3, [r4, #16]
 800fa4c:	f02b 0304 	bic.w	r3, fp, #4
 800fa50:	6023      	str	r3, [r4, #0]
 800fa52:	f04f 0900 	mov.w	r9, #0
 800fa56:	9700      	str	r7, [sp, #0]
 800fa58:	4633      	mov	r3, r6
 800fa5a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fa5c:	4621      	mov	r1, r4
 800fa5e:	4628      	mov	r0, r5
 800fa60:	f000 f9d2 	bl	800fe08 <_printf_common>
 800fa64:	3001      	adds	r0, #1
 800fa66:	f040 808d 	bne.w	800fb84 <_printf_float+0x1d0>
 800fa6a:	f04f 30ff 	mov.w	r0, #4294967295
 800fa6e:	b00d      	add	sp, #52	@ 0x34
 800fa70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa74:	4642      	mov	r2, r8
 800fa76:	464b      	mov	r3, r9
 800fa78:	4640      	mov	r0, r8
 800fa7a:	4649      	mov	r1, r9
 800fa7c:	f7f1 f82e 	bl	8000adc <__aeabi_dcmpun>
 800fa80:	b140      	cbz	r0, 800fa94 <_printf_float+0xe0>
 800fa82:	464b      	mov	r3, r9
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	bfbc      	itt	lt
 800fa88:	232d      	movlt	r3, #45	@ 0x2d
 800fa8a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fa8e:	4a7e      	ldr	r2, [pc, #504]	@ (800fc88 <_printf_float+0x2d4>)
 800fa90:	4b7e      	ldr	r3, [pc, #504]	@ (800fc8c <_printf_float+0x2d8>)
 800fa92:	e7d4      	b.n	800fa3e <_printf_float+0x8a>
 800fa94:	6863      	ldr	r3, [r4, #4]
 800fa96:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800fa9a:	9206      	str	r2, [sp, #24]
 800fa9c:	1c5a      	adds	r2, r3, #1
 800fa9e:	d13b      	bne.n	800fb18 <_printf_float+0x164>
 800faa0:	2306      	movs	r3, #6
 800faa2:	6063      	str	r3, [r4, #4]
 800faa4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800faa8:	2300      	movs	r3, #0
 800faaa:	6022      	str	r2, [r4, #0]
 800faac:	9303      	str	r3, [sp, #12]
 800faae:	ab0a      	add	r3, sp, #40	@ 0x28
 800fab0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800fab4:	ab09      	add	r3, sp, #36	@ 0x24
 800fab6:	9300      	str	r3, [sp, #0]
 800fab8:	6861      	ldr	r1, [r4, #4]
 800faba:	ec49 8b10 	vmov	d0, r8, r9
 800fabe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fac2:	4628      	mov	r0, r5
 800fac4:	f7ff fed6 	bl	800f874 <__cvt>
 800fac8:	9b06      	ldr	r3, [sp, #24]
 800faca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800facc:	2b47      	cmp	r3, #71	@ 0x47
 800face:	4680      	mov	r8, r0
 800fad0:	d129      	bne.n	800fb26 <_printf_float+0x172>
 800fad2:	1cc8      	adds	r0, r1, #3
 800fad4:	db02      	blt.n	800fadc <_printf_float+0x128>
 800fad6:	6863      	ldr	r3, [r4, #4]
 800fad8:	4299      	cmp	r1, r3
 800fada:	dd41      	ble.n	800fb60 <_printf_float+0x1ac>
 800fadc:	f1aa 0a02 	sub.w	sl, sl, #2
 800fae0:	fa5f fa8a 	uxtb.w	sl, sl
 800fae4:	3901      	subs	r1, #1
 800fae6:	4652      	mov	r2, sl
 800fae8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800faec:	9109      	str	r1, [sp, #36]	@ 0x24
 800faee:	f7ff ff26 	bl	800f93e <__exponent>
 800faf2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800faf4:	1813      	adds	r3, r2, r0
 800faf6:	2a01      	cmp	r2, #1
 800faf8:	4681      	mov	r9, r0
 800fafa:	6123      	str	r3, [r4, #16]
 800fafc:	dc02      	bgt.n	800fb04 <_printf_float+0x150>
 800fafe:	6822      	ldr	r2, [r4, #0]
 800fb00:	07d2      	lsls	r2, r2, #31
 800fb02:	d501      	bpl.n	800fb08 <_printf_float+0x154>
 800fb04:	3301      	adds	r3, #1
 800fb06:	6123      	str	r3, [r4, #16]
 800fb08:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d0a2      	beq.n	800fa56 <_printf_float+0xa2>
 800fb10:	232d      	movs	r3, #45	@ 0x2d
 800fb12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb16:	e79e      	b.n	800fa56 <_printf_float+0xa2>
 800fb18:	9a06      	ldr	r2, [sp, #24]
 800fb1a:	2a47      	cmp	r2, #71	@ 0x47
 800fb1c:	d1c2      	bne.n	800faa4 <_printf_float+0xf0>
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d1c0      	bne.n	800faa4 <_printf_float+0xf0>
 800fb22:	2301      	movs	r3, #1
 800fb24:	e7bd      	b.n	800faa2 <_printf_float+0xee>
 800fb26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fb2a:	d9db      	bls.n	800fae4 <_printf_float+0x130>
 800fb2c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fb30:	d118      	bne.n	800fb64 <_printf_float+0x1b0>
 800fb32:	2900      	cmp	r1, #0
 800fb34:	6863      	ldr	r3, [r4, #4]
 800fb36:	dd0b      	ble.n	800fb50 <_printf_float+0x19c>
 800fb38:	6121      	str	r1, [r4, #16]
 800fb3a:	b913      	cbnz	r3, 800fb42 <_printf_float+0x18e>
 800fb3c:	6822      	ldr	r2, [r4, #0]
 800fb3e:	07d0      	lsls	r0, r2, #31
 800fb40:	d502      	bpl.n	800fb48 <_printf_float+0x194>
 800fb42:	3301      	adds	r3, #1
 800fb44:	440b      	add	r3, r1
 800fb46:	6123      	str	r3, [r4, #16]
 800fb48:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fb4a:	f04f 0900 	mov.w	r9, #0
 800fb4e:	e7db      	b.n	800fb08 <_printf_float+0x154>
 800fb50:	b913      	cbnz	r3, 800fb58 <_printf_float+0x1a4>
 800fb52:	6822      	ldr	r2, [r4, #0]
 800fb54:	07d2      	lsls	r2, r2, #31
 800fb56:	d501      	bpl.n	800fb5c <_printf_float+0x1a8>
 800fb58:	3302      	adds	r3, #2
 800fb5a:	e7f4      	b.n	800fb46 <_printf_float+0x192>
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	e7f2      	b.n	800fb46 <_printf_float+0x192>
 800fb60:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800fb64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb66:	4299      	cmp	r1, r3
 800fb68:	db05      	blt.n	800fb76 <_printf_float+0x1c2>
 800fb6a:	6823      	ldr	r3, [r4, #0]
 800fb6c:	6121      	str	r1, [r4, #16]
 800fb6e:	07d8      	lsls	r0, r3, #31
 800fb70:	d5ea      	bpl.n	800fb48 <_printf_float+0x194>
 800fb72:	1c4b      	adds	r3, r1, #1
 800fb74:	e7e7      	b.n	800fb46 <_printf_float+0x192>
 800fb76:	2900      	cmp	r1, #0
 800fb78:	bfd4      	ite	le
 800fb7a:	f1c1 0202 	rsble	r2, r1, #2
 800fb7e:	2201      	movgt	r2, #1
 800fb80:	4413      	add	r3, r2
 800fb82:	e7e0      	b.n	800fb46 <_printf_float+0x192>
 800fb84:	6823      	ldr	r3, [r4, #0]
 800fb86:	055a      	lsls	r2, r3, #21
 800fb88:	d407      	bmi.n	800fb9a <_printf_float+0x1e6>
 800fb8a:	6923      	ldr	r3, [r4, #16]
 800fb8c:	4642      	mov	r2, r8
 800fb8e:	4631      	mov	r1, r6
 800fb90:	4628      	mov	r0, r5
 800fb92:	47b8      	blx	r7
 800fb94:	3001      	adds	r0, #1
 800fb96:	d12b      	bne.n	800fbf0 <_printf_float+0x23c>
 800fb98:	e767      	b.n	800fa6a <_printf_float+0xb6>
 800fb9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fb9e:	f240 80dd 	bls.w	800fd5c <_printf_float+0x3a8>
 800fba2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fba6:	2200      	movs	r2, #0
 800fba8:	2300      	movs	r3, #0
 800fbaa:	f7f0 ff65 	bl	8000a78 <__aeabi_dcmpeq>
 800fbae:	2800      	cmp	r0, #0
 800fbb0:	d033      	beq.n	800fc1a <_printf_float+0x266>
 800fbb2:	4a37      	ldr	r2, [pc, #220]	@ (800fc90 <_printf_float+0x2dc>)
 800fbb4:	2301      	movs	r3, #1
 800fbb6:	4631      	mov	r1, r6
 800fbb8:	4628      	mov	r0, r5
 800fbba:	47b8      	blx	r7
 800fbbc:	3001      	adds	r0, #1
 800fbbe:	f43f af54 	beq.w	800fa6a <_printf_float+0xb6>
 800fbc2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fbc6:	4543      	cmp	r3, r8
 800fbc8:	db02      	blt.n	800fbd0 <_printf_float+0x21c>
 800fbca:	6823      	ldr	r3, [r4, #0]
 800fbcc:	07d8      	lsls	r0, r3, #31
 800fbce:	d50f      	bpl.n	800fbf0 <_printf_float+0x23c>
 800fbd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fbd4:	4631      	mov	r1, r6
 800fbd6:	4628      	mov	r0, r5
 800fbd8:	47b8      	blx	r7
 800fbda:	3001      	adds	r0, #1
 800fbdc:	f43f af45 	beq.w	800fa6a <_printf_float+0xb6>
 800fbe0:	f04f 0900 	mov.w	r9, #0
 800fbe4:	f108 38ff 	add.w	r8, r8, #4294967295
 800fbe8:	f104 0a1a 	add.w	sl, r4, #26
 800fbec:	45c8      	cmp	r8, r9
 800fbee:	dc09      	bgt.n	800fc04 <_printf_float+0x250>
 800fbf0:	6823      	ldr	r3, [r4, #0]
 800fbf2:	079b      	lsls	r3, r3, #30
 800fbf4:	f100 8103 	bmi.w	800fdfe <_printf_float+0x44a>
 800fbf8:	68e0      	ldr	r0, [r4, #12]
 800fbfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fbfc:	4298      	cmp	r0, r3
 800fbfe:	bfb8      	it	lt
 800fc00:	4618      	movlt	r0, r3
 800fc02:	e734      	b.n	800fa6e <_printf_float+0xba>
 800fc04:	2301      	movs	r3, #1
 800fc06:	4652      	mov	r2, sl
 800fc08:	4631      	mov	r1, r6
 800fc0a:	4628      	mov	r0, r5
 800fc0c:	47b8      	blx	r7
 800fc0e:	3001      	adds	r0, #1
 800fc10:	f43f af2b 	beq.w	800fa6a <_printf_float+0xb6>
 800fc14:	f109 0901 	add.w	r9, r9, #1
 800fc18:	e7e8      	b.n	800fbec <_printf_float+0x238>
 800fc1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	dc39      	bgt.n	800fc94 <_printf_float+0x2e0>
 800fc20:	4a1b      	ldr	r2, [pc, #108]	@ (800fc90 <_printf_float+0x2dc>)
 800fc22:	2301      	movs	r3, #1
 800fc24:	4631      	mov	r1, r6
 800fc26:	4628      	mov	r0, r5
 800fc28:	47b8      	blx	r7
 800fc2a:	3001      	adds	r0, #1
 800fc2c:	f43f af1d 	beq.w	800fa6a <_printf_float+0xb6>
 800fc30:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fc34:	ea59 0303 	orrs.w	r3, r9, r3
 800fc38:	d102      	bne.n	800fc40 <_printf_float+0x28c>
 800fc3a:	6823      	ldr	r3, [r4, #0]
 800fc3c:	07d9      	lsls	r1, r3, #31
 800fc3e:	d5d7      	bpl.n	800fbf0 <_printf_float+0x23c>
 800fc40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc44:	4631      	mov	r1, r6
 800fc46:	4628      	mov	r0, r5
 800fc48:	47b8      	blx	r7
 800fc4a:	3001      	adds	r0, #1
 800fc4c:	f43f af0d 	beq.w	800fa6a <_printf_float+0xb6>
 800fc50:	f04f 0a00 	mov.w	sl, #0
 800fc54:	f104 0b1a 	add.w	fp, r4, #26
 800fc58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc5a:	425b      	negs	r3, r3
 800fc5c:	4553      	cmp	r3, sl
 800fc5e:	dc01      	bgt.n	800fc64 <_printf_float+0x2b0>
 800fc60:	464b      	mov	r3, r9
 800fc62:	e793      	b.n	800fb8c <_printf_float+0x1d8>
 800fc64:	2301      	movs	r3, #1
 800fc66:	465a      	mov	r2, fp
 800fc68:	4631      	mov	r1, r6
 800fc6a:	4628      	mov	r0, r5
 800fc6c:	47b8      	blx	r7
 800fc6e:	3001      	adds	r0, #1
 800fc70:	f43f aefb 	beq.w	800fa6a <_printf_float+0xb6>
 800fc74:	f10a 0a01 	add.w	sl, sl, #1
 800fc78:	e7ee      	b.n	800fc58 <_printf_float+0x2a4>
 800fc7a:	bf00      	nop
 800fc7c:	7fefffff 	.word	0x7fefffff
 800fc80:	08029234 	.word	0x08029234
 800fc84:	08029230 	.word	0x08029230
 800fc88:	0802923c 	.word	0x0802923c
 800fc8c:	08029238 	.word	0x08029238
 800fc90:	08029240 	.word	0x08029240
 800fc94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fc96:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fc9a:	4553      	cmp	r3, sl
 800fc9c:	bfa8      	it	ge
 800fc9e:	4653      	movge	r3, sl
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	4699      	mov	r9, r3
 800fca4:	dc36      	bgt.n	800fd14 <_printf_float+0x360>
 800fca6:	f04f 0b00 	mov.w	fp, #0
 800fcaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fcae:	f104 021a 	add.w	r2, r4, #26
 800fcb2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fcb4:	9306      	str	r3, [sp, #24]
 800fcb6:	eba3 0309 	sub.w	r3, r3, r9
 800fcba:	455b      	cmp	r3, fp
 800fcbc:	dc31      	bgt.n	800fd22 <_printf_float+0x36e>
 800fcbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcc0:	459a      	cmp	sl, r3
 800fcc2:	dc3a      	bgt.n	800fd3a <_printf_float+0x386>
 800fcc4:	6823      	ldr	r3, [r4, #0]
 800fcc6:	07da      	lsls	r2, r3, #31
 800fcc8:	d437      	bmi.n	800fd3a <_printf_float+0x386>
 800fcca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fccc:	ebaa 0903 	sub.w	r9, sl, r3
 800fcd0:	9b06      	ldr	r3, [sp, #24]
 800fcd2:	ebaa 0303 	sub.w	r3, sl, r3
 800fcd6:	4599      	cmp	r9, r3
 800fcd8:	bfa8      	it	ge
 800fcda:	4699      	movge	r9, r3
 800fcdc:	f1b9 0f00 	cmp.w	r9, #0
 800fce0:	dc33      	bgt.n	800fd4a <_printf_float+0x396>
 800fce2:	f04f 0800 	mov.w	r8, #0
 800fce6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fcea:	f104 0b1a 	add.w	fp, r4, #26
 800fcee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcf0:	ebaa 0303 	sub.w	r3, sl, r3
 800fcf4:	eba3 0309 	sub.w	r3, r3, r9
 800fcf8:	4543      	cmp	r3, r8
 800fcfa:	f77f af79 	ble.w	800fbf0 <_printf_float+0x23c>
 800fcfe:	2301      	movs	r3, #1
 800fd00:	465a      	mov	r2, fp
 800fd02:	4631      	mov	r1, r6
 800fd04:	4628      	mov	r0, r5
 800fd06:	47b8      	blx	r7
 800fd08:	3001      	adds	r0, #1
 800fd0a:	f43f aeae 	beq.w	800fa6a <_printf_float+0xb6>
 800fd0e:	f108 0801 	add.w	r8, r8, #1
 800fd12:	e7ec      	b.n	800fcee <_printf_float+0x33a>
 800fd14:	4642      	mov	r2, r8
 800fd16:	4631      	mov	r1, r6
 800fd18:	4628      	mov	r0, r5
 800fd1a:	47b8      	blx	r7
 800fd1c:	3001      	adds	r0, #1
 800fd1e:	d1c2      	bne.n	800fca6 <_printf_float+0x2f2>
 800fd20:	e6a3      	b.n	800fa6a <_printf_float+0xb6>
 800fd22:	2301      	movs	r3, #1
 800fd24:	4631      	mov	r1, r6
 800fd26:	4628      	mov	r0, r5
 800fd28:	9206      	str	r2, [sp, #24]
 800fd2a:	47b8      	blx	r7
 800fd2c:	3001      	adds	r0, #1
 800fd2e:	f43f ae9c 	beq.w	800fa6a <_printf_float+0xb6>
 800fd32:	9a06      	ldr	r2, [sp, #24]
 800fd34:	f10b 0b01 	add.w	fp, fp, #1
 800fd38:	e7bb      	b.n	800fcb2 <_printf_float+0x2fe>
 800fd3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd3e:	4631      	mov	r1, r6
 800fd40:	4628      	mov	r0, r5
 800fd42:	47b8      	blx	r7
 800fd44:	3001      	adds	r0, #1
 800fd46:	d1c0      	bne.n	800fcca <_printf_float+0x316>
 800fd48:	e68f      	b.n	800fa6a <_printf_float+0xb6>
 800fd4a:	9a06      	ldr	r2, [sp, #24]
 800fd4c:	464b      	mov	r3, r9
 800fd4e:	4442      	add	r2, r8
 800fd50:	4631      	mov	r1, r6
 800fd52:	4628      	mov	r0, r5
 800fd54:	47b8      	blx	r7
 800fd56:	3001      	adds	r0, #1
 800fd58:	d1c3      	bne.n	800fce2 <_printf_float+0x32e>
 800fd5a:	e686      	b.n	800fa6a <_printf_float+0xb6>
 800fd5c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fd60:	f1ba 0f01 	cmp.w	sl, #1
 800fd64:	dc01      	bgt.n	800fd6a <_printf_float+0x3b6>
 800fd66:	07db      	lsls	r3, r3, #31
 800fd68:	d536      	bpl.n	800fdd8 <_printf_float+0x424>
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	4642      	mov	r2, r8
 800fd6e:	4631      	mov	r1, r6
 800fd70:	4628      	mov	r0, r5
 800fd72:	47b8      	blx	r7
 800fd74:	3001      	adds	r0, #1
 800fd76:	f43f ae78 	beq.w	800fa6a <_printf_float+0xb6>
 800fd7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd7e:	4631      	mov	r1, r6
 800fd80:	4628      	mov	r0, r5
 800fd82:	47b8      	blx	r7
 800fd84:	3001      	adds	r0, #1
 800fd86:	f43f ae70 	beq.w	800fa6a <_printf_float+0xb6>
 800fd8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fd8e:	2200      	movs	r2, #0
 800fd90:	2300      	movs	r3, #0
 800fd92:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fd96:	f7f0 fe6f 	bl	8000a78 <__aeabi_dcmpeq>
 800fd9a:	b9c0      	cbnz	r0, 800fdce <_printf_float+0x41a>
 800fd9c:	4653      	mov	r3, sl
 800fd9e:	f108 0201 	add.w	r2, r8, #1
 800fda2:	4631      	mov	r1, r6
 800fda4:	4628      	mov	r0, r5
 800fda6:	47b8      	blx	r7
 800fda8:	3001      	adds	r0, #1
 800fdaa:	d10c      	bne.n	800fdc6 <_printf_float+0x412>
 800fdac:	e65d      	b.n	800fa6a <_printf_float+0xb6>
 800fdae:	2301      	movs	r3, #1
 800fdb0:	465a      	mov	r2, fp
 800fdb2:	4631      	mov	r1, r6
 800fdb4:	4628      	mov	r0, r5
 800fdb6:	47b8      	blx	r7
 800fdb8:	3001      	adds	r0, #1
 800fdba:	f43f ae56 	beq.w	800fa6a <_printf_float+0xb6>
 800fdbe:	f108 0801 	add.w	r8, r8, #1
 800fdc2:	45d0      	cmp	r8, sl
 800fdc4:	dbf3      	blt.n	800fdae <_printf_float+0x3fa>
 800fdc6:	464b      	mov	r3, r9
 800fdc8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fdcc:	e6df      	b.n	800fb8e <_printf_float+0x1da>
 800fdce:	f04f 0800 	mov.w	r8, #0
 800fdd2:	f104 0b1a 	add.w	fp, r4, #26
 800fdd6:	e7f4      	b.n	800fdc2 <_printf_float+0x40e>
 800fdd8:	2301      	movs	r3, #1
 800fdda:	4642      	mov	r2, r8
 800fddc:	e7e1      	b.n	800fda2 <_printf_float+0x3ee>
 800fdde:	2301      	movs	r3, #1
 800fde0:	464a      	mov	r2, r9
 800fde2:	4631      	mov	r1, r6
 800fde4:	4628      	mov	r0, r5
 800fde6:	47b8      	blx	r7
 800fde8:	3001      	adds	r0, #1
 800fdea:	f43f ae3e 	beq.w	800fa6a <_printf_float+0xb6>
 800fdee:	f108 0801 	add.w	r8, r8, #1
 800fdf2:	68e3      	ldr	r3, [r4, #12]
 800fdf4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fdf6:	1a5b      	subs	r3, r3, r1
 800fdf8:	4543      	cmp	r3, r8
 800fdfa:	dcf0      	bgt.n	800fdde <_printf_float+0x42a>
 800fdfc:	e6fc      	b.n	800fbf8 <_printf_float+0x244>
 800fdfe:	f04f 0800 	mov.w	r8, #0
 800fe02:	f104 0919 	add.w	r9, r4, #25
 800fe06:	e7f4      	b.n	800fdf2 <_printf_float+0x43e>

0800fe08 <_printf_common>:
 800fe08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe0c:	4616      	mov	r6, r2
 800fe0e:	4698      	mov	r8, r3
 800fe10:	688a      	ldr	r2, [r1, #8]
 800fe12:	690b      	ldr	r3, [r1, #16]
 800fe14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fe18:	4293      	cmp	r3, r2
 800fe1a:	bfb8      	it	lt
 800fe1c:	4613      	movlt	r3, r2
 800fe1e:	6033      	str	r3, [r6, #0]
 800fe20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fe24:	4607      	mov	r7, r0
 800fe26:	460c      	mov	r4, r1
 800fe28:	b10a      	cbz	r2, 800fe2e <_printf_common+0x26>
 800fe2a:	3301      	adds	r3, #1
 800fe2c:	6033      	str	r3, [r6, #0]
 800fe2e:	6823      	ldr	r3, [r4, #0]
 800fe30:	0699      	lsls	r1, r3, #26
 800fe32:	bf42      	ittt	mi
 800fe34:	6833      	ldrmi	r3, [r6, #0]
 800fe36:	3302      	addmi	r3, #2
 800fe38:	6033      	strmi	r3, [r6, #0]
 800fe3a:	6825      	ldr	r5, [r4, #0]
 800fe3c:	f015 0506 	ands.w	r5, r5, #6
 800fe40:	d106      	bne.n	800fe50 <_printf_common+0x48>
 800fe42:	f104 0a19 	add.w	sl, r4, #25
 800fe46:	68e3      	ldr	r3, [r4, #12]
 800fe48:	6832      	ldr	r2, [r6, #0]
 800fe4a:	1a9b      	subs	r3, r3, r2
 800fe4c:	42ab      	cmp	r3, r5
 800fe4e:	dc26      	bgt.n	800fe9e <_printf_common+0x96>
 800fe50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fe54:	6822      	ldr	r2, [r4, #0]
 800fe56:	3b00      	subs	r3, #0
 800fe58:	bf18      	it	ne
 800fe5a:	2301      	movne	r3, #1
 800fe5c:	0692      	lsls	r2, r2, #26
 800fe5e:	d42b      	bmi.n	800feb8 <_printf_common+0xb0>
 800fe60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fe64:	4641      	mov	r1, r8
 800fe66:	4638      	mov	r0, r7
 800fe68:	47c8      	blx	r9
 800fe6a:	3001      	adds	r0, #1
 800fe6c:	d01e      	beq.n	800feac <_printf_common+0xa4>
 800fe6e:	6823      	ldr	r3, [r4, #0]
 800fe70:	6922      	ldr	r2, [r4, #16]
 800fe72:	f003 0306 	and.w	r3, r3, #6
 800fe76:	2b04      	cmp	r3, #4
 800fe78:	bf02      	ittt	eq
 800fe7a:	68e5      	ldreq	r5, [r4, #12]
 800fe7c:	6833      	ldreq	r3, [r6, #0]
 800fe7e:	1aed      	subeq	r5, r5, r3
 800fe80:	68a3      	ldr	r3, [r4, #8]
 800fe82:	bf0c      	ite	eq
 800fe84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fe88:	2500      	movne	r5, #0
 800fe8a:	4293      	cmp	r3, r2
 800fe8c:	bfc4      	itt	gt
 800fe8e:	1a9b      	subgt	r3, r3, r2
 800fe90:	18ed      	addgt	r5, r5, r3
 800fe92:	2600      	movs	r6, #0
 800fe94:	341a      	adds	r4, #26
 800fe96:	42b5      	cmp	r5, r6
 800fe98:	d11a      	bne.n	800fed0 <_printf_common+0xc8>
 800fe9a:	2000      	movs	r0, #0
 800fe9c:	e008      	b.n	800feb0 <_printf_common+0xa8>
 800fe9e:	2301      	movs	r3, #1
 800fea0:	4652      	mov	r2, sl
 800fea2:	4641      	mov	r1, r8
 800fea4:	4638      	mov	r0, r7
 800fea6:	47c8      	blx	r9
 800fea8:	3001      	adds	r0, #1
 800feaa:	d103      	bne.n	800feb4 <_printf_common+0xac>
 800feac:	f04f 30ff 	mov.w	r0, #4294967295
 800feb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800feb4:	3501      	adds	r5, #1
 800feb6:	e7c6      	b.n	800fe46 <_printf_common+0x3e>
 800feb8:	18e1      	adds	r1, r4, r3
 800feba:	1c5a      	adds	r2, r3, #1
 800febc:	2030      	movs	r0, #48	@ 0x30
 800febe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fec2:	4422      	add	r2, r4
 800fec4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fec8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fecc:	3302      	adds	r3, #2
 800fece:	e7c7      	b.n	800fe60 <_printf_common+0x58>
 800fed0:	2301      	movs	r3, #1
 800fed2:	4622      	mov	r2, r4
 800fed4:	4641      	mov	r1, r8
 800fed6:	4638      	mov	r0, r7
 800fed8:	47c8      	blx	r9
 800feda:	3001      	adds	r0, #1
 800fedc:	d0e6      	beq.n	800feac <_printf_common+0xa4>
 800fede:	3601      	adds	r6, #1
 800fee0:	e7d9      	b.n	800fe96 <_printf_common+0x8e>
	...

0800fee4 <_printf_i>:
 800fee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fee8:	7e0f      	ldrb	r7, [r1, #24]
 800feea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800feec:	2f78      	cmp	r7, #120	@ 0x78
 800feee:	4691      	mov	r9, r2
 800fef0:	4680      	mov	r8, r0
 800fef2:	460c      	mov	r4, r1
 800fef4:	469a      	mov	sl, r3
 800fef6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fefa:	d807      	bhi.n	800ff0c <_printf_i+0x28>
 800fefc:	2f62      	cmp	r7, #98	@ 0x62
 800fefe:	d80a      	bhi.n	800ff16 <_printf_i+0x32>
 800ff00:	2f00      	cmp	r7, #0
 800ff02:	f000 80d1 	beq.w	80100a8 <_printf_i+0x1c4>
 800ff06:	2f58      	cmp	r7, #88	@ 0x58
 800ff08:	f000 80b8 	beq.w	801007c <_printf_i+0x198>
 800ff0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ff10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ff14:	e03a      	b.n	800ff8c <_printf_i+0xa8>
 800ff16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ff1a:	2b15      	cmp	r3, #21
 800ff1c:	d8f6      	bhi.n	800ff0c <_printf_i+0x28>
 800ff1e:	a101      	add	r1, pc, #4	@ (adr r1, 800ff24 <_printf_i+0x40>)
 800ff20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ff24:	0800ff7d 	.word	0x0800ff7d
 800ff28:	0800ff91 	.word	0x0800ff91
 800ff2c:	0800ff0d 	.word	0x0800ff0d
 800ff30:	0800ff0d 	.word	0x0800ff0d
 800ff34:	0800ff0d 	.word	0x0800ff0d
 800ff38:	0800ff0d 	.word	0x0800ff0d
 800ff3c:	0800ff91 	.word	0x0800ff91
 800ff40:	0800ff0d 	.word	0x0800ff0d
 800ff44:	0800ff0d 	.word	0x0800ff0d
 800ff48:	0800ff0d 	.word	0x0800ff0d
 800ff4c:	0800ff0d 	.word	0x0800ff0d
 800ff50:	0801008f 	.word	0x0801008f
 800ff54:	0800ffbb 	.word	0x0800ffbb
 800ff58:	08010049 	.word	0x08010049
 800ff5c:	0800ff0d 	.word	0x0800ff0d
 800ff60:	0800ff0d 	.word	0x0800ff0d
 800ff64:	080100b1 	.word	0x080100b1
 800ff68:	0800ff0d 	.word	0x0800ff0d
 800ff6c:	0800ffbb 	.word	0x0800ffbb
 800ff70:	0800ff0d 	.word	0x0800ff0d
 800ff74:	0800ff0d 	.word	0x0800ff0d
 800ff78:	08010051 	.word	0x08010051
 800ff7c:	6833      	ldr	r3, [r6, #0]
 800ff7e:	1d1a      	adds	r2, r3, #4
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	6032      	str	r2, [r6, #0]
 800ff84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ff88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ff8c:	2301      	movs	r3, #1
 800ff8e:	e09c      	b.n	80100ca <_printf_i+0x1e6>
 800ff90:	6833      	ldr	r3, [r6, #0]
 800ff92:	6820      	ldr	r0, [r4, #0]
 800ff94:	1d19      	adds	r1, r3, #4
 800ff96:	6031      	str	r1, [r6, #0]
 800ff98:	0606      	lsls	r6, r0, #24
 800ff9a:	d501      	bpl.n	800ffa0 <_printf_i+0xbc>
 800ff9c:	681d      	ldr	r5, [r3, #0]
 800ff9e:	e003      	b.n	800ffa8 <_printf_i+0xc4>
 800ffa0:	0645      	lsls	r5, r0, #25
 800ffa2:	d5fb      	bpl.n	800ff9c <_printf_i+0xb8>
 800ffa4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ffa8:	2d00      	cmp	r5, #0
 800ffaa:	da03      	bge.n	800ffb4 <_printf_i+0xd0>
 800ffac:	232d      	movs	r3, #45	@ 0x2d
 800ffae:	426d      	negs	r5, r5
 800ffb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ffb4:	4858      	ldr	r0, [pc, #352]	@ (8010118 <_printf_i+0x234>)
 800ffb6:	230a      	movs	r3, #10
 800ffb8:	e011      	b.n	800ffde <_printf_i+0xfa>
 800ffba:	6821      	ldr	r1, [r4, #0]
 800ffbc:	6833      	ldr	r3, [r6, #0]
 800ffbe:	0608      	lsls	r0, r1, #24
 800ffc0:	f853 5b04 	ldr.w	r5, [r3], #4
 800ffc4:	d402      	bmi.n	800ffcc <_printf_i+0xe8>
 800ffc6:	0649      	lsls	r1, r1, #25
 800ffc8:	bf48      	it	mi
 800ffca:	b2ad      	uxthmi	r5, r5
 800ffcc:	2f6f      	cmp	r7, #111	@ 0x6f
 800ffce:	4852      	ldr	r0, [pc, #328]	@ (8010118 <_printf_i+0x234>)
 800ffd0:	6033      	str	r3, [r6, #0]
 800ffd2:	bf14      	ite	ne
 800ffd4:	230a      	movne	r3, #10
 800ffd6:	2308      	moveq	r3, #8
 800ffd8:	2100      	movs	r1, #0
 800ffda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ffde:	6866      	ldr	r6, [r4, #4]
 800ffe0:	60a6      	str	r6, [r4, #8]
 800ffe2:	2e00      	cmp	r6, #0
 800ffe4:	db05      	blt.n	800fff2 <_printf_i+0x10e>
 800ffe6:	6821      	ldr	r1, [r4, #0]
 800ffe8:	432e      	orrs	r6, r5
 800ffea:	f021 0104 	bic.w	r1, r1, #4
 800ffee:	6021      	str	r1, [r4, #0]
 800fff0:	d04b      	beq.n	801008a <_printf_i+0x1a6>
 800fff2:	4616      	mov	r6, r2
 800fff4:	fbb5 f1f3 	udiv	r1, r5, r3
 800fff8:	fb03 5711 	mls	r7, r3, r1, r5
 800fffc:	5dc7      	ldrb	r7, [r0, r7]
 800fffe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010002:	462f      	mov	r7, r5
 8010004:	42bb      	cmp	r3, r7
 8010006:	460d      	mov	r5, r1
 8010008:	d9f4      	bls.n	800fff4 <_printf_i+0x110>
 801000a:	2b08      	cmp	r3, #8
 801000c:	d10b      	bne.n	8010026 <_printf_i+0x142>
 801000e:	6823      	ldr	r3, [r4, #0]
 8010010:	07df      	lsls	r7, r3, #31
 8010012:	d508      	bpl.n	8010026 <_printf_i+0x142>
 8010014:	6923      	ldr	r3, [r4, #16]
 8010016:	6861      	ldr	r1, [r4, #4]
 8010018:	4299      	cmp	r1, r3
 801001a:	bfde      	ittt	le
 801001c:	2330      	movle	r3, #48	@ 0x30
 801001e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010022:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010026:	1b92      	subs	r2, r2, r6
 8010028:	6122      	str	r2, [r4, #16]
 801002a:	f8cd a000 	str.w	sl, [sp]
 801002e:	464b      	mov	r3, r9
 8010030:	aa03      	add	r2, sp, #12
 8010032:	4621      	mov	r1, r4
 8010034:	4640      	mov	r0, r8
 8010036:	f7ff fee7 	bl	800fe08 <_printf_common>
 801003a:	3001      	adds	r0, #1
 801003c:	d14a      	bne.n	80100d4 <_printf_i+0x1f0>
 801003e:	f04f 30ff 	mov.w	r0, #4294967295
 8010042:	b004      	add	sp, #16
 8010044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010048:	6823      	ldr	r3, [r4, #0]
 801004a:	f043 0320 	orr.w	r3, r3, #32
 801004e:	6023      	str	r3, [r4, #0]
 8010050:	4832      	ldr	r0, [pc, #200]	@ (801011c <_printf_i+0x238>)
 8010052:	2778      	movs	r7, #120	@ 0x78
 8010054:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010058:	6823      	ldr	r3, [r4, #0]
 801005a:	6831      	ldr	r1, [r6, #0]
 801005c:	061f      	lsls	r7, r3, #24
 801005e:	f851 5b04 	ldr.w	r5, [r1], #4
 8010062:	d402      	bmi.n	801006a <_printf_i+0x186>
 8010064:	065f      	lsls	r7, r3, #25
 8010066:	bf48      	it	mi
 8010068:	b2ad      	uxthmi	r5, r5
 801006a:	6031      	str	r1, [r6, #0]
 801006c:	07d9      	lsls	r1, r3, #31
 801006e:	bf44      	itt	mi
 8010070:	f043 0320 	orrmi.w	r3, r3, #32
 8010074:	6023      	strmi	r3, [r4, #0]
 8010076:	b11d      	cbz	r5, 8010080 <_printf_i+0x19c>
 8010078:	2310      	movs	r3, #16
 801007a:	e7ad      	b.n	800ffd8 <_printf_i+0xf4>
 801007c:	4826      	ldr	r0, [pc, #152]	@ (8010118 <_printf_i+0x234>)
 801007e:	e7e9      	b.n	8010054 <_printf_i+0x170>
 8010080:	6823      	ldr	r3, [r4, #0]
 8010082:	f023 0320 	bic.w	r3, r3, #32
 8010086:	6023      	str	r3, [r4, #0]
 8010088:	e7f6      	b.n	8010078 <_printf_i+0x194>
 801008a:	4616      	mov	r6, r2
 801008c:	e7bd      	b.n	801000a <_printf_i+0x126>
 801008e:	6833      	ldr	r3, [r6, #0]
 8010090:	6825      	ldr	r5, [r4, #0]
 8010092:	6961      	ldr	r1, [r4, #20]
 8010094:	1d18      	adds	r0, r3, #4
 8010096:	6030      	str	r0, [r6, #0]
 8010098:	062e      	lsls	r6, r5, #24
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	d501      	bpl.n	80100a2 <_printf_i+0x1be>
 801009e:	6019      	str	r1, [r3, #0]
 80100a0:	e002      	b.n	80100a8 <_printf_i+0x1c4>
 80100a2:	0668      	lsls	r0, r5, #25
 80100a4:	d5fb      	bpl.n	801009e <_printf_i+0x1ba>
 80100a6:	8019      	strh	r1, [r3, #0]
 80100a8:	2300      	movs	r3, #0
 80100aa:	6123      	str	r3, [r4, #16]
 80100ac:	4616      	mov	r6, r2
 80100ae:	e7bc      	b.n	801002a <_printf_i+0x146>
 80100b0:	6833      	ldr	r3, [r6, #0]
 80100b2:	1d1a      	adds	r2, r3, #4
 80100b4:	6032      	str	r2, [r6, #0]
 80100b6:	681e      	ldr	r6, [r3, #0]
 80100b8:	6862      	ldr	r2, [r4, #4]
 80100ba:	2100      	movs	r1, #0
 80100bc:	4630      	mov	r0, r6
 80100be:	f7f0 f85f 	bl	8000180 <memchr>
 80100c2:	b108      	cbz	r0, 80100c8 <_printf_i+0x1e4>
 80100c4:	1b80      	subs	r0, r0, r6
 80100c6:	6060      	str	r0, [r4, #4]
 80100c8:	6863      	ldr	r3, [r4, #4]
 80100ca:	6123      	str	r3, [r4, #16]
 80100cc:	2300      	movs	r3, #0
 80100ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80100d2:	e7aa      	b.n	801002a <_printf_i+0x146>
 80100d4:	6923      	ldr	r3, [r4, #16]
 80100d6:	4632      	mov	r2, r6
 80100d8:	4649      	mov	r1, r9
 80100da:	4640      	mov	r0, r8
 80100dc:	47d0      	blx	sl
 80100de:	3001      	adds	r0, #1
 80100e0:	d0ad      	beq.n	801003e <_printf_i+0x15a>
 80100e2:	6823      	ldr	r3, [r4, #0]
 80100e4:	079b      	lsls	r3, r3, #30
 80100e6:	d413      	bmi.n	8010110 <_printf_i+0x22c>
 80100e8:	68e0      	ldr	r0, [r4, #12]
 80100ea:	9b03      	ldr	r3, [sp, #12]
 80100ec:	4298      	cmp	r0, r3
 80100ee:	bfb8      	it	lt
 80100f0:	4618      	movlt	r0, r3
 80100f2:	e7a6      	b.n	8010042 <_printf_i+0x15e>
 80100f4:	2301      	movs	r3, #1
 80100f6:	4632      	mov	r2, r6
 80100f8:	4649      	mov	r1, r9
 80100fa:	4640      	mov	r0, r8
 80100fc:	47d0      	blx	sl
 80100fe:	3001      	adds	r0, #1
 8010100:	d09d      	beq.n	801003e <_printf_i+0x15a>
 8010102:	3501      	adds	r5, #1
 8010104:	68e3      	ldr	r3, [r4, #12]
 8010106:	9903      	ldr	r1, [sp, #12]
 8010108:	1a5b      	subs	r3, r3, r1
 801010a:	42ab      	cmp	r3, r5
 801010c:	dcf2      	bgt.n	80100f4 <_printf_i+0x210>
 801010e:	e7eb      	b.n	80100e8 <_printf_i+0x204>
 8010110:	2500      	movs	r5, #0
 8010112:	f104 0619 	add.w	r6, r4, #25
 8010116:	e7f5      	b.n	8010104 <_printf_i+0x220>
 8010118:	08029242 	.word	0x08029242
 801011c:	08029253 	.word	0x08029253

08010120 <std>:
 8010120:	2300      	movs	r3, #0
 8010122:	b510      	push	{r4, lr}
 8010124:	4604      	mov	r4, r0
 8010126:	e9c0 3300 	strd	r3, r3, [r0]
 801012a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801012e:	6083      	str	r3, [r0, #8]
 8010130:	8181      	strh	r1, [r0, #12]
 8010132:	6643      	str	r3, [r0, #100]	@ 0x64
 8010134:	81c2      	strh	r2, [r0, #14]
 8010136:	6183      	str	r3, [r0, #24]
 8010138:	4619      	mov	r1, r3
 801013a:	2208      	movs	r2, #8
 801013c:	305c      	adds	r0, #92	@ 0x5c
 801013e:	f000 f92a 	bl	8010396 <memset>
 8010142:	4b0d      	ldr	r3, [pc, #52]	@ (8010178 <std+0x58>)
 8010144:	6263      	str	r3, [r4, #36]	@ 0x24
 8010146:	4b0d      	ldr	r3, [pc, #52]	@ (801017c <std+0x5c>)
 8010148:	62a3      	str	r3, [r4, #40]	@ 0x28
 801014a:	4b0d      	ldr	r3, [pc, #52]	@ (8010180 <std+0x60>)
 801014c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801014e:	4b0d      	ldr	r3, [pc, #52]	@ (8010184 <std+0x64>)
 8010150:	6323      	str	r3, [r4, #48]	@ 0x30
 8010152:	4b0d      	ldr	r3, [pc, #52]	@ (8010188 <std+0x68>)
 8010154:	6224      	str	r4, [r4, #32]
 8010156:	429c      	cmp	r4, r3
 8010158:	d006      	beq.n	8010168 <std+0x48>
 801015a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801015e:	4294      	cmp	r4, r2
 8010160:	d002      	beq.n	8010168 <std+0x48>
 8010162:	33d0      	adds	r3, #208	@ 0xd0
 8010164:	429c      	cmp	r4, r3
 8010166:	d105      	bne.n	8010174 <std+0x54>
 8010168:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801016c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010170:	f000 b98e 	b.w	8010490 <__retarget_lock_init_recursive>
 8010174:	bd10      	pop	{r4, pc}
 8010176:	bf00      	nop
 8010178:	08010311 	.word	0x08010311
 801017c:	08010333 	.word	0x08010333
 8010180:	0801036b 	.word	0x0801036b
 8010184:	0801038f 	.word	0x0801038f
 8010188:	20006b58 	.word	0x20006b58

0801018c <stdio_exit_handler>:
 801018c:	4a02      	ldr	r2, [pc, #8]	@ (8010198 <stdio_exit_handler+0xc>)
 801018e:	4903      	ldr	r1, [pc, #12]	@ (801019c <stdio_exit_handler+0x10>)
 8010190:	4803      	ldr	r0, [pc, #12]	@ (80101a0 <stdio_exit_handler+0x14>)
 8010192:	f000 b869 	b.w	8010268 <_fwalk_sglue>
 8010196:	bf00      	nop
 8010198:	20000228 	.word	0x20000228
 801019c:	08012099 	.word	0x08012099
 80101a0:	20000238 	.word	0x20000238

080101a4 <cleanup_stdio>:
 80101a4:	6841      	ldr	r1, [r0, #4]
 80101a6:	4b0c      	ldr	r3, [pc, #48]	@ (80101d8 <cleanup_stdio+0x34>)
 80101a8:	4299      	cmp	r1, r3
 80101aa:	b510      	push	{r4, lr}
 80101ac:	4604      	mov	r4, r0
 80101ae:	d001      	beq.n	80101b4 <cleanup_stdio+0x10>
 80101b0:	f001 ff72 	bl	8012098 <_fflush_r>
 80101b4:	68a1      	ldr	r1, [r4, #8]
 80101b6:	4b09      	ldr	r3, [pc, #36]	@ (80101dc <cleanup_stdio+0x38>)
 80101b8:	4299      	cmp	r1, r3
 80101ba:	d002      	beq.n	80101c2 <cleanup_stdio+0x1e>
 80101bc:	4620      	mov	r0, r4
 80101be:	f001 ff6b 	bl	8012098 <_fflush_r>
 80101c2:	68e1      	ldr	r1, [r4, #12]
 80101c4:	4b06      	ldr	r3, [pc, #24]	@ (80101e0 <cleanup_stdio+0x3c>)
 80101c6:	4299      	cmp	r1, r3
 80101c8:	d004      	beq.n	80101d4 <cleanup_stdio+0x30>
 80101ca:	4620      	mov	r0, r4
 80101cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101d0:	f001 bf62 	b.w	8012098 <_fflush_r>
 80101d4:	bd10      	pop	{r4, pc}
 80101d6:	bf00      	nop
 80101d8:	20006b58 	.word	0x20006b58
 80101dc:	20006bc0 	.word	0x20006bc0
 80101e0:	20006c28 	.word	0x20006c28

080101e4 <global_stdio_init.part.0>:
 80101e4:	b510      	push	{r4, lr}
 80101e6:	4b0b      	ldr	r3, [pc, #44]	@ (8010214 <global_stdio_init.part.0+0x30>)
 80101e8:	4c0b      	ldr	r4, [pc, #44]	@ (8010218 <global_stdio_init.part.0+0x34>)
 80101ea:	4a0c      	ldr	r2, [pc, #48]	@ (801021c <global_stdio_init.part.0+0x38>)
 80101ec:	601a      	str	r2, [r3, #0]
 80101ee:	4620      	mov	r0, r4
 80101f0:	2200      	movs	r2, #0
 80101f2:	2104      	movs	r1, #4
 80101f4:	f7ff ff94 	bl	8010120 <std>
 80101f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80101fc:	2201      	movs	r2, #1
 80101fe:	2109      	movs	r1, #9
 8010200:	f7ff ff8e 	bl	8010120 <std>
 8010204:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010208:	2202      	movs	r2, #2
 801020a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801020e:	2112      	movs	r1, #18
 8010210:	f7ff bf86 	b.w	8010120 <std>
 8010214:	20006c90 	.word	0x20006c90
 8010218:	20006b58 	.word	0x20006b58
 801021c:	0801018d 	.word	0x0801018d

08010220 <__sfp_lock_acquire>:
 8010220:	4801      	ldr	r0, [pc, #4]	@ (8010228 <__sfp_lock_acquire+0x8>)
 8010222:	f000 b936 	b.w	8010492 <__retarget_lock_acquire_recursive>
 8010226:	bf00      	nop
 8010228:	20006c99 	.word	0x20006c99

0801022c <__sfp_lock_release>:
 801022c:	4801      	ldr	r0, [pc, #4]	@ (8010234 <__sfp_lock_release+0x8>)
 801022e:	f000 b931 	b.w	8010494 <__retarget_lock_release_recursive>
 8010232:	bf00      	nop
 8010234:	20006c99 	.word	0x20006c99

08010238 <__sinit>:
 8010238:	b510      	push	{r4, lr}
 801023a:	4604      	mov	r4, r0
 801023c:	f7ff fff0 	bl	8010220 <__sfp_lock_acquire>
 8010240:	6a23      	ldr	r3, [r4, #32]
 8010242:	b11b      	cbz	r3, 801024c <__sinit+0x14>
 8010244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010248:	f7ff bff0 	b.w	801022c <__sfp_lock_release>
 801024c:	4b04      	ldr	r3, [pc, #16]	@ (8010260 <__sinit+0x28>)
 801024e:	6223      	str	r3, [r4, #32]
 8010250:	4b04      	ldr	r3, [pc, #16]	@ (8010264 <__sinit+0x2c>)
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d1f5      	bne.n	8010244 <__sinit+0xc>
 8010258:	f7ff ffc4 	bl	80101e4 <global_stdio_init.part.0>
 801025c:	e7f2      	b.n	8010244 <__sinit+0xc>
 801025e:	bf00      	nop
 8010260:	080101a5 	.word	0x080101a5
 8010264:	20006c90 	.word	0x20006c90

08010268 <_fwalk_sglue>:
 8010268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801026c:	4607      	mov	r7, r0
 801026e:	4688      	mov	r8, r1
 8010270:	4614      	mov	r4, r2
 8010272:	2600      	movs	r6, #0
 8010274:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010278:	f1b9 0901 	subs.w	r9, r9, #1
 801027c:	d505      	bpl.n	801028a <_fwalk_sglue+0x22>
 801027e:	6824      	ldr	r4, [r4, #0]
 8010280:	2c00      	cmp	r4, #0
 8010282:	d1f7      	bne.n	8010274 <_fwalk_sglue+0xc>
 8010284:	4630      	mov	r0, r6
 8010286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801028a:	89ab      	ldrh	r3, [r5, #12]
 801028c:	2b01      	cmp	r3, #1
 801028e:	d907      	bls.n	80102a0 <_fwalk_sglue+0x38>
 8010290:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010294:	3301      	adds	r3, #1
 8010296:	d003      	beq.n	80102a0 <_fwalk_sglue+0x38>
 8010298:	4629      	mov	r1, r5
 801029a:	4638      	mov	r0, r7
 801029c:	47c0      	blx	r8
 801029e:	4306      	orrs	r6, r0
 80102a0:	3568      	adds	r5, #104	@ 0x68
 80102a2:	e7e9      	b.n	8010278 <_fwalk_sglue+0x10>

080102a4 <sniprintf>:
 80102a4:	b40c      	push	{r2, r3}
 80102a6:	b530      	push	{r4, r5, lr}
 80102a8:	4b18      	ldr	r3, [pc, #96]	@ (801030c <sniprintf+0x68>)
 80102aa:	1e0c      	subs	r4, r1, #0
 80102ac:	681d      	ldr	r5, [r3, #0]
 80102ae:	b09d      	sub	sp, #116	@ 0x74
 80102b0:	da08      	bge.n	80102c4 <sniprintf+0x20>
 80102b2:	238b      	movs	r3, #139	@ 0x8b
 80102b4:	602b      	str	r3, [r5, #0]
 80102b6:	f04f 30ff 	mov.w	r0, #4294967295
 80102ba:	b01d      	add	sp, #116	@ 0x74
 80102bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80102c0:	b002      	add	sp, #8
 80102c2:	4770      	bx	lr
 80102c4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80102c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80102cc:	f04f 0300 	mov.w	r3, #0
 80102d0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80102d2:	bf14      	ite	ne
 80102d4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80102d8:	4623      	moveq	r3, r4
 80102da:	9304      	str	r3, [sp, #16]
 80102dc:	9307      	str	r3, [sp, #28]
 80102de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80102e2:	9002      	str	r0, [sp, #8]
 80102e4:	9006      	str	r0, [sp, #24]
 80102e6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80102ea:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80102ec:	ab21      	add	r3, sp, #132	@ 0x84
 80102ee:	a902      	add	r1, sp, #8
 80102f0:	4628      	mov	r0, r5
 80102f2:	9301      	str	r3, [sp, #4]
 80102f4:	f001 fc0e 	bl	8011b14 <_svfiprintf_r>
 80102f8:	1c43      	adds	r3, r0, #1
 80102fa:	bfbc      	itt	lt
 80102fc:	238b      	movlt	r3, #139	@ 0x8b
 80102fe:	602b      	strlt	r3, [r5, #0]
 8010300:	2c00      	cmp	r4, #0
 8010302:	d0da      	beq.n	80102ba <sniprintf+0x16>
 8010304:	9b02      	ldr	r3, [sp, #8]
 8010306:	2200      	movs	r2, #0
 8010308:	701a      	strb	r2, [r3, #0]
 801030a:	e7d6      	b.n	80102ba <sniprintf+0x16>
 801030c:	20000234 	.word	0x20000234

08010310 <__sread>:
 8010310:	b510      	push	{r4, lr}
 8010312:	460c      	mov	r4, r1
 8010314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010318:	f000 f86c 	bl	80103f4 <_read_r>
 801031c:	2800      	cmp	r0, #0
 801031e:	bfab      	itete	ge
 8010320:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010322:	89a3      	ldrhlt	r3, [r4, #12]
 8010324:	181b      	addge	r3, r3, r0
 8010326:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801032a:	bfac      	ite	ge
 801032c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801032e:	81a3      	strhlt	r3, [r4, #12]
 8010330:	bd10      	pop	{r4, pc}

08010332 <__swrite>:
 8010332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010336:	461f      	mov	r7, r3
 8010338:	898b      	ldrh	r3, [r1, #12]
 801033a:	05db      	lsls	r3, r3, #23
 801033c:	4605      	mov	r5, r0
 801033e:	460c      	mov	r4, r1
 8010340:	4616      	mov	r6, r2
 8010342:	d505      	bpl.n	8010350 <__swrite+0x1e>
 8010344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010348:	2302      	movs	r3, #2
 801034a:	2200      	movs	r2, #0
 801034c:	f000 f840 	bl	80103d0 <_lseek_r>
 8010350:	89a3      	ldrh	r3, [r4, #12]
 8010352:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010356:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801035a:	81a3      	strh	r3, [r4, #12]
 801035c:	4632      	mov	r2, r6
 801035e:	463b      	mov	r3, r7
 8010360:	4628      	mov	r0, r5
 8010362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010366:	f000 b857 	b.w	8010418 <_write_r>

0801036a <__sseek>:
 801036a:	b510      	push	{r4, lr}
 801036c:	460c      	mov	r4, r1
 801036e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010372:	f000 f82d 	bl	80103d0 <_lseek_r>
 8010376:	1c43      	adds	r3, r0, #1
 8010378:	89a3      	ldrh	r3, [r4, #12]
 801037a:	bf15      	itete	ne
 801037c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801037e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010382:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010386:	81a3      	strheq	r3, [r4, #12]
 8010388:	bf18      	it	ne
 801038a:	81a3      	strhne	r3, [r4, #12]
 801038c:	bd10      	pop	{r4, pc}

0801038e <__sclose>:
 801038e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010392:	f000 b80d 	b.w	80103b0 <_close_r>

08010396 <memset>:
 8010396:	4402      	add	r2, r0
 8010398:	4603      	mov	r3, r0
 801039a:	4293      	cmp	r3, r2
 801039c:	d100      	bne.n	80103a0 <memset+0xa>
 801039e:	4770      	bx	lr
 80103a0:	f803 1b01 	strb.w	r1, [r3], #1
 80103a4:	e7f9      	b.n	801039a <memset+0x4>
	...

080103a8 <_localeconv_r>:
 80103a8:	4800      	ldr	r0, [pc, #0]	@ (80103ac <_localeconv_r+0x4>)
 80103aa:	4770      	bx	lr
 80103ac:	20000374 	.word	0x20000374

080103b0 <_close_r>:
 80103b0:	b538      	push	{r3, r4, r5, lr}
 80103b2:	4d06      	ldr	r5, [pc, #24]	@ (80103cc <_close_r+0x1c>)
 80103b4:	2300      	movs	r3, #0
 80103b6:	4604      	mov	r4, r0
 80103b8:	4608      	mov	r0, r1
 80103ba:	602b      	str	r3, [r5, #0]
 80103bc:	f7f3 f8b6 	bl	800352c <_close>
 80103c0:	1c43      	adds	r3, r0, #1
 80103c2:	d102      	bne.n	80103ca <_close_r+0x1a>
 80103c4:	682b      	ldr	r3, [r5, #0]
 80103c6:	b103      	cbz	r3, 80103ca <_close_r+0x1a>
 80103c8:	6023      	str	r3, [r4, #0]
 80103ca:	bd38      	pop	{r3, r4, r5, pc}
 80103cc:	20006c94 	.word	0x20006c94

080103d0 <_lseek_r>:
 80103d0:	b538      	push	{r3, r4, r5, lr}
 80103d2:	4d07      	ldr	r5, [pc, #28]	@ (80103f0 <_lseek_r+0x20>)
 80103d4:	4604      	mov	r4, r0
 80103d6:	4608      	mov	r0, r1
 80103d8:	4611      	mov	r1, r2
 80103da:	2200      	movs	r2, #0
 80103dc:	602a      	str	r2, [r5, #0]
 80103de:	461a      	mov	r2, r3
 80103e0:	f7f3 f8cb 	bl	800357a <_lseek>
 80103e4:	1c43      	adds	r3, r0, #1
 80103e6:	d102      	bne.n	80103ee <_lseek_r+0x1e>
 80103e8:	682b      	ldr	r3, [r5, #0]
 80103ea:	b103      	cbz	r3, 80103ee <_lseek_r+0x1e>
 80103ec:	6023      	str	r3, [r4, #0]
 80103ee:	bd38      	pop	{r3, r4, r5, pc}
 80103f0:	20006c94 	.word	0x20006c94

080103f4 <_read_r>:
 80103f4:	b538      	push	{r3, r4, r5, lr}
 80103f6:	4d07      	ldr	r5, [pc, #28]	@ (8010414 <_read_r+0x20>)
 80103f8:	4604      	mov	r4, r0
 80103fa:	4608      	mov	r0, r1
 80103fc:	4611      	mov	r1, r2
 80103fe:	2200      	movs	r2, #0
 8010400:	602a      	str	r2, [r5, #0]
 8010402:	461a      	mov	r2, r3
 8010404:	f7f3 f859 	bl	80034ba <_read>
 8010408:	1c43      	adds	r3, r0, #1
 801040a:	d102      	bne.n	8010412 <_read_r+0x1e>
 801040c:	682b      	ldr	r3, [r5, #0]
 801040e:	b103      	cbz	r3, 8010412 <_read_r+0x1e>
 8010410:	6023      	str	r3, [r4, #0]
 8010412:	bd38      	pop	{r3, r4, r5, pc}
 8010414:	20006c94 	.word	0x20006c94

08010418 <_write_r>:
 8010418:	b538      	push	{r3, r4, r5, lr}
 801041a:	4d07      	ldr	r5, [pc, #28]	@ (8010438 <_write_r+0x20>)
 801041c:	4604      	mov	r4, r0
 801041e:	4608      	mov	r0, r1
 8010420:	4611      	mov	r1, r2
 8010422:	2200      	movs	r2, #0
 8010424:	602a      	str	r2, [r5, #0]
 8010426:	461a      	mov	r2, r3
 8010428:	f7f3 f864 	bl	80034f4 <_write>
 801042c:	1c43      	adds	r3, r0, #1
 801042e:	d102      	bne.n	8010436 <_write_r+0x1e>
 8010430:	682b      	ldr	r3, [r5, #0]
 8010432:	b103      	cbz	r3, 8010436 <_write_r+0x1e>
 8010434:	6023      	str	r3, [r4, #0]
 8010436:	bd38      	pop	{r3, r4, r5, pc}
 8010438:	20006c94 	.word	0x20006c94

0801043c <__errno>:
 801043c:	4b01      	ldr	r3, [pc, #4]	@ (8010444 <__errno+0x8>)
 801043e:	6818      	ldr	r0, [r3, #0]
 8010440:	4770      	bx	lr
 8010442:	bf00      	nop
 8010444:	20000234 	.word	0x20000234

08010448 <__libc_init_array>:
 8010448:	b570      	push	{r4, r5, r6, lr}
 801044a:	4d0d      	ldr	r5, [pc, #52]	@ (8010480 <__libc_init_array+0x38>)
 801044c:	4c0d      	ldr	r4, [pc, #52]	@ (8010484 <__libc_init_array+0x3c>)
 801044e:	1b64      	subs	r4, r4, r5
 8010450:	10a4      	asrs	r4, r4, #2
 8010452:	2600      	movs	r6, #0
 8010454:	42a6      	cmp	r6, r4
 8010456:	d109      	bne.n	801046c <__libc_init_array+0x24>
 8010458:	4d0b      	ldr	r5, [pc, #44]	@ (8010488 <__libc_init_array+0x40>)
 801045a:	4c0c      	ldr	r4, [pc, #48]	@ (801048c <__libc_init_array+0x44>)
 801045c:	f002 fee2 	bl	8013224 <_init>
 8010460:	1b64      	subs	r4, r4, r5
 8010462:	10a4      	asrs	r4, r4, #2
 8010464:	2600      	movs	r6, #0
 8010466:	42a6      	cmp	r6, r4
 8010468:	d105      	bne.n	8010476 <__libc_init_array+0x2e>
 801046a:	bd70      	pop	{r4, r5, r6, pc}
 801046c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010470:	4798      	blx	r3
 8010472:	3601      	adds	r6, #1
 8010474:	e7ee      	b.n	8010454 <__libc_init_array+0xc>
 8010476:	f855 3b04 	ldr.w	r3, [r5], #4
 801047a:	4798      	blx	r3
 801047c:	3601      	adds	r6, #1
 801047e:	e7f2      	b.n	8010466 <__libc_init_array+0x1e>
 8010480:	0802997c 	.word	0x0802997c
 8010484:	0802997c 	.word	0x0802997c
 8010488:	0802997c 	.word	0x0802997c
 801048c:	08029980 	.word	0x08029980

08010490 <__retarget_lock_init_recursive>:
 8010490:	4770      	bx	lr

08010492 <__retarget_lock_acquire_recursive>:
 8010492:	4770      	bx	lr

08010494 <__retarget_lock_release_recursive>:
 8010494:	4770      	bx	lr

08010496 <memcpy>:
 8010496:	440a      	add	r2, r1
 8010498:	4291      	cmp	r1, r2
 801049a:	f100 33ff 	add.w	r3, r0, #4294967295
 801049e:	d100      	bne.n	80104a2 <memcpy+0xc>
 80104a0:	4770      	bx	lr
 80104a2:	b510      	push	{r4, lr}
 80104a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80104a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80104ac:	4291      	cmp	r1, r2
 80104ae:	d1f9      	bne.n	80104a4 <memcpy+0xe>
 80104b0:	bd10      	pop	{r4, pc}

080104b2 <quorem>:
 80104b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104b6:	6903      	ldr	r3, [r0, #16]
 80104b8:	690c      	ldr	r4, [r1, #16]
 80104ba:	42a3      	cmp	r3, r4
 80104bc:	4607      	mov	r7, r0
 80104be:	db7e      	blt.n	80105be <quorem+0x10c>
 80104c0:	3c01      	subs	r4, #1
 80104c2:	f101 0814 	add.w	r8, r1, #20
 80104c6:	00a3      	lsls	r3, r4, #2
 80104c8:	f100 0514 	add.w	r5, r0, #20
 80104cc:	9300      	str	r3, [sp, #0]
 80104ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80104d2:	9301      	str	r3, [sp, #4]
 80104d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80104d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80104dc:	3301      	adds	r3, #1
 80104de:	429a      	cmp	r2, r3
 80104e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80104e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80104e8:	d32e      	bcc.n	8010548 <quorem+0x96>
 80104ea:	f04f 0a00 	mov.w	sl, #0
 80104ee:	46c4      	mov	ip, r8
 80104f0:	46ae      	mov	lr, r5
 80104f2:	46d3      	mov	fp, sl
 80104f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80104f8:	b298      	uxth	r0, r3
 80104fa:	fb06 a000 	mla	r0, r6, r0, sl
 80104fe:	0c02      	lsrs	r2, r0, #16
 8010500:	0c1b      	lsrs	r3, r3, #16
 8010502:	fb06 2303 	mla	r3, r6, r3, r2
 8010506:	f8de 2000 	ldr.w	r2, [lr]
 801050a:	b280      	uxth	r0, r0
 801050c:	b292      	uxth	r2, r2
 801050e:	1a12      	subs	r2, r2, r0
 8010510:	445a      	add	r2, fp
 8010512:	f8de 0000 	ldr.w	r0, [lr]
 8010516:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801051a:	b29b      	uxth	r3, r3
 801051c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010520:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010524:	b292      	uxth	r2, r2
 8010526:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801052a:	45e1      	cmp	r9, ip
 801052c:	f84e 2b04 	str.w	r2, [lr], #4
 8010530:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010534:	d2de      	bcs.n	80104f4 <quorem+0x42>
 8010536:	9b00      	ldr	r3, [sp, #0]
 8010538:	58eb      	ldr	r3, [r5, r3]
 801053a:	b92b      	cbnz	r3, 8010548 <quorem+0x96>
 801053c:	9b01      	ldr	r3, [sp, #4]
 801053e:	3b04      	subs	r3, #4
 8010540:	429d      	cmp	r5, r3
 8010542:	461a      	mov	r2, r3
 8010544:	d32f      	bcc.n	80105a6 <quorem+0xf4>
 8010546:	613c      	str	r4, [r7, #16]
 8010548:	4638      	mov	r0, r7
 801054a:	f001 f97f 	bl	801184c <__mcmp>
 801054e:	2800      	cmp	r0, #0
 8010550:	db25      	blt.n	801059e <quorem+0xec>
 8010552:	4629      	mov	r1, r5
 8010554:	2000      	movs	r0, #0
 8010556:	f858 2b04 	ldr.w	r2, [r8], #4
 801055a:	f8d1 c000 	ldr.w	ip, [r1]
 801055e:	fa1f fe82 	uxth.w	lr, r2
 8010562:	fa1f f38c 	uxth.w	r3, ip
 8010566:	eba3 030e 	sub.w	r3, r3, lr
 801056a:	4403      	add	r3, r0
 801056c:	0c12      	lsrs	r2, r2, #16
 801056e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010572:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010576:	b29b      	uxth	r3, r3
 8010578:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801057c:	45c1      	cmp	r9, r8
 801057e:	f841 3b04 	str.w	r3, [r1], #4
 8010582:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010586:	d2e6      	bcs.n	8010556 <quorem+0xa4>
 8010588:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801058c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010590:	b922      	cbnz	r2, 801059c <quorem+0xea>
 8010592:	3b04      	subs	r3, #4
 8010594:	429d      	cmp	r5, r3
 8010596:	461a      	mov	r2, r3
 8010598:	d30b      	bcc.n	80105b2 <quorem+0x100>
 801059a:	613c      	str	r4, [r7, #16]
 801059c:	3601      	adds	r6, #1
 801059e:	4630      	mov	r0, r6
 80105a0:	b003      	add	sp, #12
 80105a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105a6:	6812      	ldr	r2, [r2, #0]
 80105a8:	3b04      	subs	r3, #4
 80105aa:	2a00      	cmp	r2, #0
 80105ac:	d1cb      	bne.n	8010546 <quorem+0x94>
 80105ae:	3c01      	subs	r4, #1
 80105b0:	e7c6      	b.n	8010540 <quorem+0x8e>
 80105b2:	6812      	ldr	r2, [r2, #0]
 80105b4:	3b04      	subs	r3, #4
 80105b6:	2a00      	cmp	r2, #0
 80105b8:	d1ef      	bne.n	801059a <quorem+0xe8>
 80105ba:	3c01      	subs	r4, #1
 80105bc:	e7ea      	b.n	8010594 <quorem+0xe2>
 80105be:	2000      	movs	r0, #0
 80105c0:	e7ee      	b.n	80105a0 <quorem+0xee>
 80105c2:	0000      	movs	r0, r0
 80105c4:	0000      	movs	r0, r0
	...

080105c8 <_dtoa_r>:
 80105c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105cc:	69c7      	ldr	r7, [r0, #28]
 80105ce:	b097      	sub	sp, #92	@ 0x5c
 80105d0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80105d4:	ec55 4b10 	vmov	r4, r5, d0
 80105d8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80105da:	9107      	str	r1, [sp, #28]
 80105dc:	4681      	mov	r9, r0
 80105de:	920c      	str	r2, [sp, #48]	@ 0x30
 80105e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80105e2:	b97f      	cbnz	r7, 8010604 <_dtoa_r+0x3c>
 80105e4:	2010      	movs	r0, #16
 80105e6:	f000 fe09 	bl	80111fc <malloc>
 80105ea:	4602      	mov	r2, r0
 80105ec:	f8c9 001c 	str.w	r0, [r9, #28]
 80105f0:	b920      	cbnz	r0, 80105fc <_dtoa_r+0x34>
 80105f2:	4ba9      	ldr	r3, [pc, #676]	@ (8010898 <_dtoa_r+0x2d0>)
 80105f4:	21ef      	movs	r1, #239	@ 0xef
 80105f6:	48a9      	ldr	r0, [pc, #676]	@ (801089c <_dtoa_r+0x2d4>)
 80105f8:	f001 fe34 	bl	8012264 <__assert_func>
 80105fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010600:	6007      	str	r7, [r0, #0]
 8010602:	60c7      	str	r7, [r0, #12]
 8010604:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010608:	6819      	ldr	r1, [r3, #0]
 801060a:	b159      	cbz	r1, 8010624 <_dtoa_r+0x5c>
 801060c:	685a      	ldr	r2, [r3, #4]
 801060e:	604a      	str	r2, [r1, #4]
 8010610:	2301      	movs	r3, #1
 8010612:	4093      	lsls	r3, r2
 8010614:	608b      	str	r3, [r1, #8]
 8010616:	4648      	mov	r0, r9
 8010618:	f000 fee6 	bl	80113e8 <_Bfree>
 801061c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010620:	2200      	movs	r2, #0
 8010622:	601a      	str	r2, [r3, #0]
 8010624:	1e2b      	subs	r3, r5, #0
 8010626:	bfb9      	ittee	lt
 8010628:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801062c:	9305      	strlt	r3, [sp, #20]
 801062e:	2300      	movge	r3, #0
 8010630:	6033      	strge	r3, [r6, #0]
 8010632:	9f05      	ldr	r7, [sp, #20]
 8010634:	4b9a      	ldr	r3, [pc, #616]	@ (80108a0 <_dtoa_r+0x2d8>)
 8010636:	bfbc      	itt	lt
 8010638:	2201      	movlt	r2, #1
 801063a:	6032      	strlt	r2, [r6, #0]
 801063c:	43bb      	bics	r3, r7
 801063e:	d112      	bne.n	8010666 <_dtoa_r+0x9e>
 8010640:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010642:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010646:	6013      	str	r3, [r2, #0]
 8010648:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801064c:	4323      	orrs	r3, r4
 801064e:	f000 855a 	beq.w	8011106 <_dtoa_r+0xb3e>
 8010652:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010654:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80108b4 <_dtoa_r+0x2ec>
 8010658:	2b00      	cmp	r3, #0
 801065a:	f000 855c 	beq.w	8011116 <_dtoa_r+0xb4e>
 801065e:	f10a 0303 	add.w	r3, sl, #3
 8010662:	f000 bd56 	b.w	8011112 <_dtoa_r+0xb4a>
 8010666:	ed9d 7b04 	vldr	d7, [sp, #16]
 801066a:	2200      	movs	r2, #0
 801066c:	ec51 0b17 	vmov	r0, r1, d7
 8010670:	2300      	movs	r3, #0
 8010672:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8010676:	f7f0 f9ff 	bl	8000a78 <__aeabi_dcmpeq>
 801067a:	4680      	mov	r8, r0
 801067c:	b158      	cbz	r0, 8010696 <_dtoa_r+0xce>
 801067e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010680:	2301      	movs	r3, #1
 8010682:	6013      	str	r3, [r2, #0]
 8010684:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010686:	b113      	cbz	r3, 801068e <_dtoa_r+0xc6>
 8010688:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801068a:	4b86      	ldr	r3, [pc, #536]	@ (80108a4 <_dtoa_r+0x2dc>)
 801068c:	6013      	str	r3, [r2, #0]
 801068e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80108b8 <_dtoa_r+0x2f0>
 8010692:	f000 bd40 	b.w	8011116 <_dtoa_r+0xb4e>
 8010696:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801069a:	aa14      	add	r2, sp, #80	@ 0x50
 801069c:	a915      	add	r1, sp, #84	@ 0x54
 801069e:	4648      	mov	r0, r9
 80106a0:	f001 f984 	bl	80119ac <__d2b>
 80106a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80106a8:	9002      	str	r0, [sp, #8]
 80106aa:	2e00      	cmp	r6, #0
 80106ac:	d078      	beq.n	80107a0 <_dtoa_r+0x1d8>
 80106ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80106b0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80106b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80106b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80106bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80106c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80106c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80106c8:	4619      	mov	r1, r3
 80106ca:	2200      	movs	r2, #0
 80106cc:	4b76      	ldr	r3, [pc, #472]	@ (80108a8 <_dtoa_r+0x2e0>)
 80106ce:	f7ef fdb3 	bl	8000238 <__aeabi_dsub>
 80106d2:	a36b      	add	r3, pc, #428	@ (adr r3, 8010880 <_dtoa_r+0x2b8>)
 80106d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d8:	f7ef ff66 	bl	80005a8 <__aeabi_dmul>
 80106dc:	a36a      	add	r3, pc, #424	@ (adr r3, 8010888 <_dtoa_r+0x2c0>)
 80106de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e2:	f7ef fdab 	bl	800023c <__adddf3>
 80106e6:	4604      	mov	r4, r0
 80106e8:	4630      	mov	r0, r6
 80106ea:	460d      	mov	r5, r1
 80106ec:	f7ef fef2 	bl	80004d4 <__aeabi_i2d>
 80106f0:	a367      	add	r3, pc, #412	@ (adr r3, 8010890 <_dtoa_r+0x2c8>)
 80106f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f6:	f7ef ff57 	bl	80005a8 <__aeabi_dmul>
 80106fa:	4602      	mov	r2, r0
 80106fc:	460b      	mov	r3, r1
 80106fe:	4620      	mov	r0, r4
 8010700:	4629      	mov	r1, r5
 8010702:	f7ef fd9b 	bl	800023c <__adddf3>
 8010706:	4604      	mov	r4, r0
 8010708:	460d      	mov	r5, r1
 801070a:	f7f0 f9fd 	bl	8000b08 <__aeabi_d2iz>
 801070e:	2200      	movs	r2, #0
 8010710:	4607      	mov	r7, r0
 8010712:	2300      	movs	r3, #0
 8010714:	4620      	mov	r0, r4
 8010716:	4629      	mov	r1, r5
 8010718:	f7f0 f9b8 	bl	8000a8c <__aeabi_dcmplt>
 801071c:	b140      	cbz	r0, 8010730 <_dtoa_r+0x168>
 801071e:	4638      	mov	r0, r7
 8010720:	f7ef fed8 	bl	80004d4 <__aeabi_i2d>
 8010724:	4622      	mov	r2, r4
 8010726:	462b      	mov	r3, r5
 8010728:	f7f0 f9a6 	bl	8000a78 <__aeabi_dcmpeq>
 801072c:	b900      	cbnz	r0, 8010730 <_dtoa_r+0x168>
 801072e:	3f01      	subs	r7, #1
 8010730:	2f16      	cmp	r7, #22
 8010732:	d852      	bhi.n	80107da <_dtoa_r+0x212>
 8010734:	4b5d      	ldr	r3, [pc, #372]	@ (80108ac <_dtoa_r+0x2e4>)
 8010736:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801073a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801073e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010742:	f7f0 f9a3 	bl	8000a8c <__aeabi_dcmplt>
 8010746:	2800      	cmp	r0, #0
 8010748:	d049      	beq.n	80107de <_dtoa_r+0x216>
 801074a:	3f01      	subs	r7, #1
 801074c:	2300      	movs	r3, #0
 801074e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010750:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010752:	1b9b      	subs	r3, r3, r6
 8010754:	1e5a      	subs	r2, r3, #1
 8010756:	bf45      	ittet	mi
 8010758:	f1c3 0301 	rsbmi	r3, r3, #1
 801075c:	9300      	strmi	r3, [sp, #0]
 801075e:	2300      	movpl	r3, #0
 8010760:	2300      	movmi	r3, #0
 8010762:	9206      	str	r2, [sp, #24]
 8010764:	bf54      	ite	pl
 8010766:	9300      	strpl	r3, [sp, #0]
 8010768:	9306      	strmi	r3, [sp, #24]
 801076a:	2f00      	cmp	r7, #0
 801076c:	db39      	blt.n	80107e2 <_dtoa_r+0x21a>
 801076e:	9b06      	ldr	r3, [sp, #24]
 8010770:	970d      	str	r7, [sp, #52]	@ 0x34
 8010772:	443b      	add	r3, r7
 8010774:	9306      	str	r3, [sp, #24]
 8010776:	2300      	movs	r3, #0
 8010778:	9308      	str	r3, [sp, #32]
 801077a:	9b07      	ldr	r3, [sp, #28]
 801077c:	2b09      	cmp	r3, #9
 801077e:	d863      	bhi.n	8010848 <_dtoa_r+0x280>
 8010780:	2b05      	cmp	r3, #5
 8010782:	bfc4      	itt	gt
 8010784:	3b04      	subgt	r3, #4
 8010786:	9307      	strgt	r3, [sp, #28]
 8010788:	9b07      	ldr	r3, [sp, #28]
 801078a:	f1a3 0302 	sub.w	r3, r3, #2
 801078e:	bfcc      	ite	gt
 8010790:	2400      	movgt	r4, #0
 8010792:	2401      	movle	r4, #1
 8010794:	2b03      	cmp	r3, #3
 8010796:	d863      	bhi.n	8010860 <_dtoa_r+0x298>
 8010798:	e8df f003 	tbb	[pc, r3]
 801079c:	2b375452 	.word	0x2b375452
 80107a0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80107a4:	441e      	add	r6, r3
 80107a6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80107aa:	2b20      	cmp	r3, #32
 80107ac:	bfc1      	itttt	gt
 80107ae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80107b2:	409f      	lslgt	r7, r3
 80107b4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80107b8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80107bc:	bfd6      	itet	le
 80107be:	f1c3 0320 	rsble	r3, r3, #32
 80107c2:	ea47 0003 	orrgt.w	r0, r7, r3
 80107c6:	fa04 f003 	lslle.w	r0, r4, r3
 80107ca:	f7ef fe73 	bl	80004b4 <__aeabi_ui2d>
 80107ce:	2201      	movs	r2, #1
 80107d0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80107d4:	3e01      	subs	r6, #1
 80107d6:	9212      	str	r2, [sp, #72]	@ 0x48
 80107d8:	e776      	b.n	80106c8 <_dtoa_r+0x100>
 80107da:	2301      	movs	r3, #1
 80107dc:	e7b7      	b.n	801074e <_dtoa_r+0x186>
 80107de:	9010      	str	r0, [sp, #64]	@ 0x40
 80107e0:	e7b6      	b.n	8010750 <_dtoa_r+0x188>
 80107e2:	9b00      	ldr	r3, [sp, #0]
 80107e4:	1bdb      	subs	r3, r3, r7
 80107e6:	9300      	str	r3, [sp, #0]
 80107e8:	427b      	negs	r3, r7
 80107ea:	9308      	str	r3, [sp, #32]
 80107ec:	2300      	movs	r3, #0
 80107ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80107f0:	e7c3      	b.n	801077a <_dtoa_r+0x1b2>
 80107f2:	2301      	movs	r3, #1
 80107f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80107f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80107f8:	eb07 0b03 	add.w	fp, r7, r3
 80107fc:	f10b 0301 	add.w	r3, fp, #1
 8010800:	2b01      	cmp	r3, #1
 8010802:	9303      	str	r3, [sp, #12]
 8010804:	bfb8      	it	lt
 8010806:	2301      	movlt	r3, #1
 8010808:	e006      	b.n	8010818 <_dtoa_r+0x250>
 801080a:	2301      	movs	r3, #1
 801080c:	9309      	str	r3, [sp, #36]	@ 0x24
 801080e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010810:	2b00      	cmp	r3, #0
 8010812:	dd28      	ble.n	8010866 <_dtoa_r+0x29e>
 8010814:	469b      	mov	fp, r3
 8010816:	9303      	str	r3, [sp, #12]
 8010818:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801081c:	2100      	movs	r1, #0
 801081e:	2204      	movs	r2, #4
 8010820:	f102 0514 	add.w	r5, r2, #20
 8010824:	429d      	cmp	r5, r3
 8010826:	d926      	bls.n	8010876 <_dtoa_r+0x2ae>
 8010828:	6041      	str	r1, [r0, #4]
 801082a:	4648      	mov	r0, r9
 801082c:	f000 fd9c 	bl	8011368 <_Balloc>
 8010830:	4682      	mov	sl, r0
 8010832:	2800      	cmp	r0, #0
 8010834:	d142      	bne.n	80108bc <_dtoa_r+0x2f4>
 8010836:	4b1e      	ldr	r3, [pc, #120]	@ (80108b0 <_dtoa_r+0x2e8>)
 8010838:	4602      	mov	r2, r0
 801083a:	f240 11af 	movw	r1, #431	@ 0x1af
 801083e:	e6da      	b.n	80105f6 <_dtoa_r+0x2e>
 8010840:	2300      	movs	r3, #0
 8010842:	e7e3      	b.n	801080c <_dtoa_r+0x244>
 8010844:	2300      	movs	r3, #0
 8010846:	e7d5      	b.n	80107f4 <_dtoa_r+0x22c>
 8010848:	2401      	movs	r4, #1
 801084a:	2300      	movs	r3, #0
 801084c:	9307      	str	r3, [sp, #28]
 801084e:	9409      	str	r4, [sp, #36]	@ 0x24
 8010850:	f04f 3bff 	mov.w	fp, #4294967295
 8010854:	2200      	movs	r2, #0
 8010856:	f8cd b00c 	str.w	fp, [sp, #12]
 801085a:	2312      	movs	r3, #18
 801085c:	920c      	str	r2, [sp, #48]	@ 0x30
 801085e:	e7db      	b.n	8010818 <_dtoa_r+0x250>
 8010860:	2301      	movs	r3, #1
 8010862:	9309      	str	r3, [sp, #36]	@ 0x24
 8010864:	e7f4      	b.n	8010850 <_dtoa_r+0x288>
 8010866:	f04f 0b01 	mov.w	fp, #1
 801086a:	f8cd b00c 	str.w	fp, [sp, #12]
 801086e:	465b      	mov	r3, fp
 8010870:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8010874:	e7d0      	b.n	8010818 <_dtoa_r+0x250>
 8010876:	3101      	adds	r1, #1
 8010878:	0052      	lsls	r2, r2, #1
 801087a:	e7d1      	b.n	8010820 <_dtoa_r+0x258>
 801087c:	f3af 8000 	nop.w
 8010880:	636f4361 	.word	0x636f4361
 8010884:	3fd287a7 	.word	0x3fd287a7
 8010888:	8b60c8b3 	.word	0x8b60c8b3
 801088c:	3fc68a28 	.word	0x3fc68a28
 8010890:	509f79fb 	.word	0x509f79fb
 8010894:	3fd34413 	.word	0x3fd34413
 8010898:	08029271 	.word	0x08029271
 801089c:	08029288 	.word	0x08029288
 80108a0:	7ff00000 	.word	0x7ff00000
 80108a4:	08029241 	.word	0x08029241
 80108a8:	3ff80000 	.word	0x3ff80000
 80108ac:	080293d8 	.word	0x080293d8
 80108b0:	080292e0 	.word	0x080292e0
 80108b4:	0802926d 	.word	0x0802926d
 80108b8:	08029240 	.word	0x08029240
 80108bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80108c0:	6018      	str	r0, [r3, #0]
 80108c2:	9b03      	ldr	r3, [sp, #12]
 80108c4:	2b0e      	cmp	r3, #14
 80108c6:	f200 80a1 	bhi.w	8010a0c <_dtoa_r+0x444>
 80108ca:	2c00      	cmp	r4, #0
 80108cc:	f000 809e 	beq.w	8010a0c <_dtoa_r+0x444>
 80108d0:	2f00      	cmp	r7, #0
 80108d2:	dd33      	ble.n	801093c <_dtoa_r+0x374>
 80108d4:	4b9c      	ldr	r3, [pc, #624]	@ (8010b48 <_dtoa_r+0x580>)
 80108d6:	f007 020f 	and.w	r2, r7, #15
 80108da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80108de:	ed93 7b00 	vldr	d7, [r3]
 80108e2:	05f8      	lsls	r0, r7, #23
 80108e4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80108e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80108ec:	d516      	bpl.n	801091c <_dtoa_r+0x354>
 80108ee:	4b97      	ldr	r3, [pc, #604]	@ (8010b4c <_dtoa_r+0x584>)
 80108f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80108f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80108f8:	f7ef ff80 	bl	80007fc <__aeabi_ddiv>
 80108fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010900:	f004 040f 	and.w	r4, r4, #15
 8010904:	2603      	movs	r6, #3
 8010906:	4d91      	ldr	r5, [pc, #580]	@ (8010b4c <_dtoa_r+0x584>)
 8010908:	b954      	cbnz	r4, 8010920 <_dtoa_r+0x358>
 801090a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801090e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010912:	f7ef ff73 	bl	80007fc <__aeabi_ddiv>
 8010916:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801091a:	e028      	b.n	801096e <_dtoa_r+0x3a6>
 801091c:	2602      	movs	r6, #2
 801091e:	e7f2      	b.n	8010906 <_dtoa_r+0x33e>
 8010920:	07e1      	lsls	r1, r4, #31
 8010922:	d508      	bpl.n	8010936 <_dtoa_r+0x36e>
 8010924:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010928:	e9d5 2300 	ldrd	r2, r3, [r5]
 801092c:	f7ef fe3c 	bl	80005a8 <__aeabi_dmul>
 8010930:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010934:	3601      	adds	r6, #1
 8010936:	1064      	asrs	r4, r4, #1
 8010938:	3508      	adds	r5, #8
 801093a:	e7e5      	b.n	8010908 <_dtoa_r+0x340>
 801093c:	f000 80af 	beq.w	8010a9e <_dtoa_r+0x4d6>
 8010940:	427c      	negs	r4, r7
 8010942:	4b81      	ldr	r3, [pc, #516]	@ (8010b48 <_dtoa_r+0x580>)
 8010944:	4d81      	ldr	r5, [pc, #516]	@ (8010b4c <_dtoa_r+0x584>)
 8010946:	f004 020f 	and.w	r2, r4, #15
 801094a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801094e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010952:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010956:	f7ef fe27 	bl	80005a8 <__aeabi_dmul>
 801095a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801095e:	1124      	asrs	r4, r4, #4
 8010960:	2300      	movs	r3, #0
 8010962:	2602      	movs	r6, #2
 8010964:	2c00      	cmp	r4, #0
 8010966:	f040 808f 	bne.w	8010a88 <_dtoa_r+0x4c0>
 801096a:	2b00      	cmp	r3, #0
 801096c:	d1d3      	bne.n	8010916 <_dtoa_r+0x34e>
 801096e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010970:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010974:	2b00      	cmp	r3, #0
 8010976:	f000 8094 	beq.w	8010aa2 <_dtoa_r+0x4da>
 801097a:	4b75      	ldr	r3, [pc, #468]	@ (8010b50 <_dtoa_r+0x588>)
 801097c:	2200      	movs	r2, #0
 801097e:	4620      	mov	r0, r4
 8010980:	4629      	mov	r1, r5
 8010982:	f7f0 f883 	bl	8000a8c <__aeabi_dcmplt>
 8010986:	2800      	cmp	r0, #0
 8010988:	f000 808b 	beq.w	8010aa2 <_dtoa_r+0x4da>
 801098c:	9b03      	ldr	r3, [sp, #12]
 801098e:	2b00      	cmp	r3, #0
 8010990:	f000 8087 	beq.w	8010aa2 <_dtoa_r+0x4da>
 8010994:	f1bb 0f00 	cmp.w	fp, #0
 8010998:	dd34      	ble.n	8010a04 <_dtoa_r+0x43c>
 801099a:	4620      	mov	r0, r4
 801099c:	4b6d      	ldr	r3, [pc, #436]	@ (8010b54 <_dtoa_r+0x58c>)
 801099e:	2200      	movs	r2, #0
 80109a0:	4629      	mov	r1, r5
 80109a2:	f7ef fe01 	bl	80005a8 <__aeabi_dmul>
 80109a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80109aa:	f107 38ff 	add.w	r8, r7, #4294967295
 80109ae:	3601      	adds	r6, #1
 80109b0:	465c      	mov	r4, fp
 80109b2:	4630      	mov	r0, r6
 80109b4:	f7ef fd8e 	bl	80004d4 <__aeabi_i2d>
 80109b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80109bc:	f7ef fdf4 	bl	80005a8 <__aeabi_dmul>
 80109c0:	4b65      	ldr	r3, [pc, #404]	@ (8010b58 <_dtoa_r+0x590>)
 80109c2:	2200      	movs	r2, #0
 80109c4:	f7ef fc3a 	bl	800023c <__adddf3>
 80109c8:	4605      	mov	r5, r0
 80109ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80109ce:	2c00      	cmp	r4, #0
 80109d0:	d16a      	bne.n	8010aa8 <_dtoa_r+0x4e0>
 80109d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80109d6:	4b61      	ldr	r3, [pc, #388]	@ (8010b5c <_dtoa_r+0x594>)
 80109d8:	2200      	movs	r2, #0
 80109da:	f7ef fc2d 	bl	8000238 <__aeabi_dsub>
 80109de:	4602      	mov	r2, r0
 80109e0:	460b      	mov	r3, r1
 80109e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80109e6:	462a      	mov	r2, r5
 80109e8:	4633      	mov	r3, r6
 80109ea:	f7f0 f86d 	bl	8000ac8 <__aeabi_dcmpgt>
 80109ee:	2800      	cmp	r0, #0
 80109f0:	f040 8298 	bne.w	8010f24 <_dtoa_r+0x95c>
 80109f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80109f8:	462a      	mov	r2, r5
 80109fa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80109fe:	f7f0 f845 	bl	8000a8c <__aeabi_dcmplt>
 8010a02:	bb38      	cbnz	r0, 8010a54 <_dtoa_r+0x48c>
 8010a04:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8010a08:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010a0c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	f2c0 8157 	blt.w	8010cc2 <_dtoa_r+0x6fa>
 8010a14:	2f0e      	cmp	r7, #14
 8010a16:	f300 8154 	bgt.w	8010cc2 <_dtoa_r+0x6fa>
 8010a1a:	4b4b      	ldr	r3, [pc, #300]	@ (8010b48 <_dtoa_r+0x580>)
 8010a1c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010a20:	ed93 7b00 	vldr	d7, [r3]
 8010a24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	ed8d 7b00 	vstr	d7, [sp]
 8010a2c:	f280 80e5 	bge.w	8010bfa <_dtoa_r+0x632>
 8010a30:	9b03      	ldr	r3, [sp, #12]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	f300 80e1 	bgt.w	8010bfa <_dtoa_r+0x632>
 8010a38:	d10c      	bne.n	8010a54 <_dtoa_r+0x48c>
 8010a3a:	4b48      	ldr	r3, [pc, #288]	@ (8010b5c <_dtoa_r+0x594>)
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	ec51 0b17 	vmov	r0, r1, d7
 8010a42:	f7ef fdb1 	bl	80005a8 <__aeabi_dmul>
 8010a46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a4a:	f7f0 f833 	bl	8000ab4 <__aeabi_dcmpge>
 8010a4e:	2800      	cmp	r0, #0
 8010a50:	f000 8266 	beq.w	8010f20 <_dtoa_r+0x958>
 8010a54:	2400      	movs	r4, #0
 8010a56:	4625      	mov	r5, r4
 8010a58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a5a:	4656      	mov	r6, sl
 8010a5c:	ea6f 0803 	mvn.w	r8, r3
 8010a60:	2700      	movs	r7, #0
 8010a62:	4621      	mov	r1, r4
 8010a64:	4648      	mov	r0, r9
 8010a66:	f000 fcbf 	bl	80113e8 <_Bfree>
 8010a6a:	2d00      	cmp	r5, #0
 8010a6c:	f000 80bd 	beq.w	8010bea <_dtoa_r+0x622>
 8010a70:	b12f      	cbz	r7, 8010a7e <_dtoa_r+0x4b6>
 8010a72:	42af      	cmp	r7, r5
 8010a74:	d003      	beq.n	8010a7e <_dtoa_r+0x4b6>
 8010a76:	4639      	mov	r1, r7
 8010a78:	4648      	mov	r0, r9
 8010a7a:	f000 fcb5 	bl	80113e8 <_Bfree>
 8010a7e:	4629      	mov	r1, r5
 8010a80:	4648      	mov	r0, r9
 8010a82:	f000 fcb1 	bl	80113e8 <_Bfree>
 8010a86:	e0b0      	b.n	8010bea <_dtoa_r+0x622>
 8010a88:	07e2      	lsls	r2, r4, #31
 8010a8a:	d505      	bpl.n	8010a98 <_dtoa_r+0x4d0>
 8010a8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010a90:	f7ef fd8a 	bl	80005a8 <__aeabi_dmul>
 8010a94:	3601      	adds	r6, #1
 8010a96:	2301      	movs	r3, #1
 8010a98:	1064      	asrs	r4, r4, #1
 8010a9a:	3508      	adds	r5, #8
 8010a9c:	e762      	b.n	8010964 <_dtoa_r+0x39c>
 8010a9e:	2602      	movs	r6, #2
 8010aa0:	e765      	b.n	801096e <_dtoa_r+0x3a6>
 8010aa2:	9c03      	ldr	r4, [sp, #12]
 8010aa4:	46b8      	mov	r8, r7
 8010aa6:	e784      	b.n	80109b2 <_dtoa_r+0x3ea>
 8010aa8:	4b27      	ldr	r3, [pc, #156]	@ (8010b48 <_dtoa_r+0x580>)
 8010aaa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010aac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010ab0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010ab4:	4454      	add	r4, sl
 8010ab6:	2900      	cmp	r1, #0
 8010ab8:	d054      	beq.n	8010b64 <_dtoa_r+0x59c>
 8010aba:	4929      	ldr	r1, [pc, #164]	@ (8010b60 <_dtoa_r+0x598>)
 8010abc:	2000      	movs	r0, #0
 8010abe:	f7ef fe9d 	bl	80007fc <__aeabi_ddiv>
 8010ac2:	4633      	mov	r3, r6
 8010ac4:	462a      	mov	r2, r5
 8010ac6:	f7ef fbb7 	bl	8000238 <__aeabi_dsub>
 8010aca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010ace:	4656      	mov	r6, sl
 8010ad0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010ad4:	f7f0 f818 	bl	8000b08 <__aeabi_d2iz>
 8010ad8:	4605      	mov	r5, r0
 8010ada:	f7ef fcfb 	bl	80004d4 <__aeabi_i2d>
 8010ade:	4602      	mov	r2, r0
 8010ae0:	460b      	mov	r3, r1
 8010ae2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010ae6:	f7ef fba7 	bl	8000238 <__aeabi_dsub>
 8010aea:	3530      	adds	r5, #48	@ 0x30
 8010aec:	4602      	mov	r2, r0
 8010aee:	460b      	mov	r3, r1
 8010af0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010af4:	f806 5b01 	strb.w	r5, [r6], #1
 8010af8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010afc:	f7ef ffc6 	bl	8000a8c <__aeabi_dcmplt>
 8010b00:	2800      	cmp	r0, #0
 8010b02:	d172      	bne.n	8010bea <_dtoa_r+0x622>
 8010b04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b08:	4911      	ldr	r1, [pc, #68]	@ (8010b50 <_dtoa_r+0x588>)
 8010b0a:	2000      	movs	r0, #0
 8010b0c:	f7ef fb94 	bl	8000238 <__aeabi_dsub>
 8010b10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010b14:	f7ef ffba 	bl	8000a8c <__aeabi_dcmplt>
 8010b18:	2800      	cmp	r0, #0
 8010b1a:	f040 80b4 	bne.w	8010c86 <_dtoa_r+0x6be>
 8010b1e:	42a6      	cmp	r6, r4
 8010b20:	f43f af70 	beq.w	8010a04 <_dtoa_r+0x43c>
 8010b24:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010b28:	4b0a      	ldr	r3, [pc, #40]	@ (8010b54 <_dtoa_r+0x58c>)
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	f7ef fd3c 	bl	80005a8 <__aeabi_dmul>
 8010b30:	4b08      	ldr	r3, [pc, #32]	@ (8010b54 <_dtoa_r+0x58c>)
 8010b32:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010b36:	2200      	movs	r2, #0
 8010b38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b3c:	f7ef fd34 	bl	80005a8 <__aeabi_dmul>
 8010b40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010b44:	e7c4      	b.n	8010ad0 <_dtoa_r+0x508>
 8010b46:	bf00      	nop
 8010b48:	080293d8 	.word	0x080293d8
 8010b4c:	080293b0 	.word	0x080293b0
 8010b50:	3ff00000 	.word	0x3ff00000
 8010b54:	40240000 	.word	0x40240000
 8010b58:	401c0000 	.word	0x401c0000
 8010b5c:	40140000 	.word	0x40140000
 8010b60:	3fe00000 	.word	0x3fe00000
 8010b64:	4631      	mov	r1, r6
 8010b66:	4628      	mov	r0, r5
 8010b68:	f7ef fd1e 	bl	80005a8 <__aeabi_dmul>
 8010b6c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010b70:	9413      	str	r4, [sp, #76]	@ 0x4c
 8010b72:	4656      	mov	r6, sl
 8010b74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b78:	f7ef ffc6 	bl	8000b08 <__aeabi_d2iz>
 8010b7c:	4605      	mov	r5, r0
 8010b7e:	f7ef fca9 	bl	80004d4 <__aeabi_i2d>
 8010b82:	4602      	mov	r2, r0
 8010b84:	460b      	mov	r3, r1
 8010b86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b8a:	f7ef fb55 	bl	8000238 <__aeabi_dsub>
 8010b8e:	3530      	adds	r5, #48	@ 0x30
 8010b90:	f806 5b01 	strb.w	r5, [r6], #1
 8010b94:	4602      	mov	r2, r0
 8010b96:	460b      	mov	r3, r1
 8010b98:	42a6      	cmp	r6, r4
 8010b9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010b9e:	f04f 0200 	mov.w	r2, #0
 8010ba2:	d124      	bne.n	8010bee <_dtoa_r+0x626>
 8010ba4:	4baf      	ldr	r3, [pc, #700]	@ (8010e64 <_dtoa_r+0x89c>)
 8010ba6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010baa:	f7ef fb47 	bl	800023c <__adddf3>
 8010bae:	4602      	mov	r2, r0
 8010bb0:	460b      	mov	r3, r1
 8010bb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010bb6:	f7ef ff87 	bl	8000ac8 <__aeabi_dcmpgt>
 8010bba:	2800      	cmp	r0, #0
 8010bbc:	d163      	bne.n	8010c86 <_dtoa_r+0x6be>
 8010bbe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010bc2:	49a8      	ldr	r1, [pc, #672]	@ (8010e64 <_dtoa_r+0x89c>)
 8010bc4:	2000      	movs	r0, #0
 8010bc6:	f7ef fb37 	bl	8000238 <__aeabi_dsub>
 8010bca:	4602      	mov	r2, r0
 8010bcc:	460b      	mov	r3, r1
 8010bce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010bd2:	f7ef ff5b 	bl	8000a8c <__aeabi_dcmplt>
 8010bd6:	2800      	cmp	r0, #0
 8010bd8:	f43f af14 	beq.w	8010a04 <_dtoa_r+0x43c>
 8010bdc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8010bde:	1e73      	subs	r3, r6, #1
 8010be0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010be2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010be6:	2b30      	cmp	r3, #48	@ 0x30
 8010be8:	d0f8      	beq.n	8010bdc <_dtoa_r+0x614>
 8010bea:	4647      	mov	r7, r8
 8010bec:	e03b      	b.n	8010c66 <_dtoa_r+0x69e>
 8010bee:	4b9e      	ldr	r3, [pc, #632]	@ (8010e68 <_dtoa_r+0x8a0>)
 8010bf0:	f7ef fcda 	bl	80005a8 <__aeabi_dmul>
 8010bf4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010bf8:	e7bc      	b.n	8010b74 <_dtoa_r+0x5ac>
 8010bfa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010bfe:	4656      	mov	r6, sl
 8010c00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c04:	4620      	mov	r0, r4
 8010c06:	4629      	mov	r1, r5
 8010c08:	f7ef fdf8 	bl	80007fc <__aeabi_ddiv>
 8010c0c:	f7ef ff7c 	bl	8000b08 <__aeabi_d2iz>
 8010c10:	4680      	mov	r8, r0
 8010c12:	f7ef fc5f 	bl	80004d4 <__aeabi_i2d>
 8010c16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c1a:	f7ef fcc5 	bl	80005a8 <__aeabi_dmul>
 8010c1e:	4602      	mov	r2, r0
 8010c20:	460b      	mov	r3, r1
 8010c22:	4620      	mov	r0, r4
 8010c24:	4629      	mov	r1, r5
 8010c26:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010c2a:	f7ef fb05 	bl	8000238 <__aeabi_dsub>
 8010c2e:	f806 4b01 	strb.w	r4, [r6], #1
 8010c32:	9d03      	ldr	r5, [sp, #12]
 8010c34:	eba6 040a 	sub.w	r4, r6, sl
 8010c38:	42a5      	cmp	r5, r4
 8010c3a:	4602      	mov	r2, r0
 8010c3c:	460b      	mov	r3, r1
 8010c3e:	d133      	bne.n	8010ca8 <_dtoa_r+0x6e0>
 8010c40:	f7ef fafc 	bl	800023c <__adddf3>
 8010c44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c48:	4604      	mov	r4, r0
 8010c4a:	460d      	mov	r5, r1
 8010c4c:	f7ef ff3c 	bl	8000ac8 <__aeabi_dcmpgt>
 8010c50:	b9c0      	cbnz	r0, 8010c84 <_dtoa_r+0x6bc>
 8010c52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c56:	4620      	mov	r0, r4
 8010c58:	4629      	mov	r1, r5
 8010c5a:	f7ef ff0d 	bl	8000a78 <__aeabi_dcmpeq>
 8010c5e:	b110      	cbz	r0, 8010c66 <_dtoa_r+0x69e>
 8010c60:	f018 0f01 	tst.w	r8, #1
 8010c64:	d10e      	bne.n	8010c84 <_dtoa_r+0x6bc>
 8010c66:	9902      	ldr	r1, [sp, #8]
 8010c68:	4648      	mov	r0, r9
 8010c6a:	f000 fbbd 	bl	80113e8 <_Bfree>
 8010c6e:	2300      	movs	r3, #0
 8010c70:	7033      	strb	r3, [r6, #0]
 8010c72:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010c74:	3701      	adds	r7, #1
 8010c76:	601f      	str	r7, [r3, #0]
 8010c78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	f000 824b 	beq.w	8011116 <_dtoa_r+0xb4e>
 8010c80:	601e      	str	r6, [r3, #0]
 8010c82:	e248      	b.n	8011116 <_dtoa_r+0xb4e>
 8010c84:	46b8      	mov	r8, r7
 8010c86:	4633      	mov	r3, r6
 8010c88:	461e      	mov	r6, r3
 8010c8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010c8e:	2a39      	cmp	r2, #57	@ 0x39
 8010c90:	d106      	bne.n	8010ca0 <_dtoa_r+0x6d8>
 8010c92:	459a      	cmp	sl, r3
 8010c94:	d1f8      	bne.n	8010c88 <_dtoa_r+0x6c0>
 8010c96:	2230      	movs	r2, #48	@ 0x30
 8010c98:	f108 0801 	add.w	r8, r8, #1
 8010c9c:	f88a 2000 	strb.w	r2, [sl]
 8010ca0:	781a      	ldrb	r2, [r3, #0]
 8010ca2:	3201      	adds	r2, #1
 8010ca4:	701a      	strb	r2, [r3, #0]
 8010ca6:	e7a0      	b.n	8010bea <_dtoa_r+0x622>
 8010ca8:	4b6f      	ldr	r3, [pc, #444]	@ (8010e68 <_dtoa_r+0x8a0>)
 8010caa:	2200      	movs	r2, #0
 8010cac:	f7ef fc7c 	bl	80005a8 <__aeabi_dmul>
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	4604      	mov	r4, r0
 8010cb6:	460d      	mov	r5, r1
 8010cb8:	f7ef fede 	bl	8000a78 <__aeabi_dcmpeq>
 8010cbc:	2800      	cmp	r0, #0
 8010cbe:	d09f      	beq.n	8010c00 <_dtoa_r+0x638>
 8010cc0:	e7d1      	b.n	8010c66 <_dtoa_r+0x69e>
 8010cc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010cc4:	2a00      	cmp	r2, #0
 8010cc6:	f000 80ea 	beq.w	8010e9e <_dtoa_r+0x8d6>
 8010cca:	9a07      	ldr	r2, [sp, #28]
 8010ccc:	2a01      	cmp	r2, #1
 8010cce:	f300 80cd 	bgt.w	8010e6c <_dtoa_r+0x8a4>
 8010cd2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010cd4:	2a00      	cmp	r2, #0
 8010cd6:	f000 80c1 	beq.w	8010e5c <_dtoa_r+0x894>
 8010cda:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010cde:	9c08      	ldr	r4, [sp, #32]
 8010ce0:	9e00      	ldr	r6, [sp, #0]
 8010ce2:	9a00      	ldr	r2, [sp, #0]
 8010ce4:	441a      	add	r2, r3
 8010ce6:	9200      	str	r2, [sp, #0]
 8010ce8:	9a06      	ldr	r2, [sp, #24]
 8010cea:	2101      	movs	r1, #1
 8010cec:	441a      	add	r2, r3
 8010cee:	4648      	mov	r0, r9
 8010cf0:	9206      	str	r2, [sp, #24]
 8010cf2:	f000 fc2d 	bl	8011550 <__i2b>
 8010cf6:	4605      	mov	r5, r0
 8010cf8:	b166      	cbz	r6, 8010d14 <_dtoa_r+0x74c>
 8010cfa:	9b06      	ldr	r3, [sp, #24]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	dd09      	ble.n	8010d14 <_dtoa_r+0x74c>
 8010d00:	42b3      	cmp	r3, r6
 8010d02:	9a00      	ldr	r2, [sp, #0]
 8010d04:	bfa8      	it	ge
 8010d06:	4633      	movge	r3, r6
 8010d08:	1ad2      	subs	r2, r2, r3
 8010d0a:	9200      	str	r2, [sp, #0]
 8010d0c:	9a06      	ldr	r2, [sp, #24]
 8010d0e:	1af6      	subs	r6, r6, r3
 8010d10:	1ad3      	subs	r3, r2, r3
 8010d12:	9306      	str	r3, [sp, #24]
 8010d14:	9b08      	ldr	r3, [sp, #32]
 8010d16:	b30b      	cbz	r3, 8010d5c <_dtoa_r+0x794>
 8010d18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	f000 80c6 	beq.w	8010eac <_dtoa_r+0x8e4>
 8010d20:	2c00      	cmp	r4, #0
 8010d22:	f000 80c0 	beq.w	8010ea6 <_dtoa_r+0x8de>
 8010d26:	4629      	mov	r1, r5
 8010d28:	4622      	mov	r2, r4
 8010d2a:	4648      	mov	r0, r9
 8010d2c:	f000 fcc8 	bl	80116c0 <__pow5mult>
 8010d30:	9a02      	ldr	r2, [sp, #8]
 8010d32:	4601      	mov	r1, r0
 8010d34:	4605      	mov	r5, r0
 8010d36:	4648      	mov	r0, r9
 8010d38:	f000 fc20 	bl	801157c <__multiply>
 8010d3c:	9902      	ldr	r1, [sp, #8]
 8010d3e:	4680      	mov	r8, r0
 8010d40:	4648      	mov	r0, r9
 8010d42:	f000 fb51 	bl	80113e8 <_Bfree>
 8010d46:	9b08      	ldr	r3, [sp, #32]
 8010d48:	1b1b      	subs	r3, r3, r4
 8010d4a:	9308      	str	r3, [sp, #32]
 8010d4c:	f000 80b1 	beq.w	8010eb2 <_dtoa_r+0x8ea>
 8010d50:	9a08      	ldr	r2, [sp, #32]
 8010d52:	4641      	mov	r1, r8
 8010d54:	4648      	mov	r0, r9
 8010d56:	f000 fcb3 	bl	80116c0 <__pow5mult>
 8010d5a:	9002      	str	r0, [sp, #8]
 8010d5c:	2101      	movs	r1, #1
 8010d5e:	4648      	mov	r0, r9
 8010d60:	f000 fbf6 	bl	8011550 <__i2b>
 8010d64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010d66:	4604      	mov	r4, r0
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	f000 81d8 	beq.w	801111e <_dtoa_r+0xb56>
 8010d6e:	461a      	mov	r2, r3
 8010d70:	4601      	mov	r1, r0
 8010d72:	4648      	mov	r0, r9
 8010d74:	f000 fca4 	bl	80116c0 <__pow5mult>
 8010d78:	9b07      	ldr	r3, [sp, #28]
 8010d7a:	2b01      	cmp	r3, #1
 8010d7c:	4604      	mov	r4, r0
 8010d7e:	f300 809f 	bgt.w	8010ec0 <_dtoa_r+0x8f8>
 8010d82:	9b04      	ldr	r3, [sp, #16]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	f040 8097 	bne.w	8010eb8 <_dtoa_r+0x8f0>
 8010d8a:	9b05      	ldr	r3, [sp, #20]
 8010d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	f040 8093 	bne.w	8010ebc <_dtoa_r+0x8f4>
 8010d96:	9b05      	ldr	r3, [sp, #20]
 8010d98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010d9c:	0d1b      	lsrs	r3, r3, #20
 8010d9e:	051b      	lsls	r3, r3, #20
 8010da0:	b133      	cbz	r3, 8010db0 <_dtoa_r+0x7e8>
 8010da2:	9b00      	ldr	r3, [sp, #0]
 8010da4:	3301      	adds	r3, #1
 8010da6:	9300      	str	r3, [sp, #0]
 8010da8:	9b06      	ldr	r3, [sp, #24]
 8010daa:	3301      	adds	r3, #1
 8010dac:	9306      	str	r3, [sp, #24]
 8010dae:	2301      	movs	r3, #1
 8010db0:	9308      	str	r3, [sp, #32]
 8010db2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	f000 81b8 	beq.w	801112a <_dtoa_r+0xb62>
 8010dba:	6923      	ldr	r3, [r4, #16]
 8010dbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010dc0:	6918      	ldr	r0, [r3, #16]
 8010dc2:	f000 fb79 	bl	80114b8 <__hi0bits>
 8010dc6:	f1c0 0020 	rsb	r0, r0, #32
 8010dca:	9b06      	ldr	r3, [sp, #24]
 8010dcc:	4418      	add	r0, r3
 8010dce:	f010 001f 	ands.w	r0, r0, #31
 8010dd2:	f000 8082 	beq.w	8010eda <_dtoa_r+0x912>
 8010dd6:	f1c0 0320 	rsb	r3, r0, #32
 8010dda:	2b04      	cmp	r3, #4
 8010ddc:	dd73      	ble.n	8010ec6 <_dtoa_r+0x8fe>
 8010dde:	9b00      	ldr	r3, [sp, #0]
 8010de0:	f1c0 001c 	rsb	r0, r0, #28
 8010de4:	4403      	add	r3, r0
 8010de6:	9300      	str	r3, [sp, #0]
 8010de8:	9b06      	ldr	r3, [sp, #24]
 8010dea:	4403      	add	r3, r0
 8010dec:	4406      	add	r6, r0
 8010dee:	9306      	str	r3, [sp, #24]
 8010df0:	9b00      	ldr	r3, [sp, #0]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	dd05      	ble.n	8010e02 <_dtoa_r+0x83a>
 8010df6:	9902      	ldr	r1, [sp, #8]
 8010df8:	461a      	mov	r2, r3
 8010dfa:	4648      	mov	r0, r9
 8010dfc:	f000 fcba 	bl	8011774 <__lshift>
 8010e00:	9002      	str	r0, [sp, #8]
 8010e02:	9b06      	ldr	r3, [sp, #24]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	dd05      	ble.n	8010e14 <_dtoa_r+0x84c>
 8010e08:	4621      	mov	r1, r4
 8010e0a:	461a      	mov	r2, r3
 8010e0c:	4648      	mov	r0, r9
 8010e0e:	f000 fcb1 	bl	8011774 <__lshift>
 8010e12:	4604      	mov	r4, r0
 8010e14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d061      	beq.n	8010ede <_dtoa_r+0x916>
 8010e1a:	9802      	ldr	r0, [sp, #8]
 8010e1c:	4621      	mov	r1, r4
 8010e1e:	f000 fd15 	bl	801184c <__mcmp>
 8010e22:	2800      	cmp	r0, #0
 8010e24:	da5b      	bge.n	8010ede <_dtoa_r+0x916>
 8010e26:	2300      	movs	r3, #0
 8010e28:	9902      	ldr	r1, [sp, #8]
 8010e2a:	220a      	movs	r2, #10
 8010e2c:	4648      	mov	r0, r9
 8010e2e:	f000 fafd 	bl	801142c <__multadd>
 8010e32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e34:	9002      	str	r0, [sp, #8]
 8010e36:	f107 38ff 	add.w	r8, r7, #4294967295
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	f000 8177 	beq.w	801112e <_dtoa_r+0xb66>
 8010e40:	4629      	mov	r1, r5
 8010e42:	2300      	movs	r3, #0
 8010e44:	220a      	movs	r2, #10
 8010e46:	4648      	mov	r0, r9
 8010e48:	f000 faf0 	bl	801142c <__multadd>
 8010e4c:	f1bb 0f00 	cmp.w	fp, #0
 8010e50:	4605      	mov	r5, r0
 8010e52:	dc6f      	bgt.n	8010f34 <_dtoa_r+0x96c>
 8010e54:	9b07      	ldr	r3, [sp, #28]
 8010e56:	2b02      	cmp	r3, #2
 8010e58:	dc49      	bgt.n	8010eee <_dtoa_r+0x926>
 8010e5a:	e06b      	b.n	8010f34 <_dtoa_r+0x96c>
 8010e5c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010e5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010e62:	e73c      	b.n	8010cde <_dtoa_r+0x716>
 8010e64:	3fe00000 	.word	0x3fe00000
 8010e68:	40240000 	.word	0x40240000
 8010e6c:	9b03      	ldr	r3, [sp, #12]
 8010e6e:	1e5c      	subs	r4, r3, #1
 8010e70:	9b08      	ldr	r3, [sp, #32]
 8010e72:	42a3      	cmp	r3, r4
 8010e74:	db09      	blt.n	8010e8a <_dtoa_r+0x8c2>
 8010e76:	1b1c      	subs	r4, r3, r4
 8010e78:	9b03      	ldr	r3, [sp, #12]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	f6bf af30 	bge.w	8010ce0 <_dtoa_r+0x718>
 8010e80:	9b00      	ldr	r3, [sp, #0]
 8010e82:	9a03      	ldr	r2, [sp, #12]
 8010e84:	1a9e      	subs	r6, r3, r2
 8010e86:	2300      	movs	r3, #0
 8010e88:	e72b      	b.n	8010ce2 <_dtoa_r+0x71a>
 8010e8a:	9b08      	ldr	r3, [sp, #32]
 8010e8c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010e8e:	9408      	str	r4, [sp, #32]
 8010e90:	1ae3      	subs	r3, r4, r3
 8010e92:	441a      	add	r2, r3
 8010e94:	9e00      	ldr	r6, [sp, #0]
 8010e96:	9b03      	ldr	r3, [sp, #12]
 8010e98:	920d      	str	r2, [sp, #52]	@ 0x34
 8010e9a:	2400      	movs	r4, #0
 8010e9c:	e721      	b.n	8010ce2 <_dtoa_r+0x71a>
 8010e9e:	9c08      	ldr	r4, [sp, #32]
 8010ea0:	9e00      	ldr	r6, [sp, #0]
 8010ea2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8010ea4:	e728      	b.n	8010cf8 <_dtoa_r+0x730>
 8010ea6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010eaa:	e751      	b.n	8010d50 <_dtoa_r+0x788>
 8010eac:	9a08      	ldr	r2, [sp, #32]
 8010eae:	9902      	ldr	r1, [sp, #8]
 8010eb0:	e750      	b.n	8010d54 <_dtoa_r+0x78c>
 8010eb2:	f8cd 8008 	str.w	r8, [sp, #8]
 8010eb6:	e751      	b.n	8010d5c <_dtoa_r+0x794>
 8010eb8:	2300      	movs	r3, #0
 8010eba:	e779      	b.n	8010db0 <_dtoa_r+0x7e8>
 8010ebc:	9b04      	ldr	r3, [sp, #16]
 8010ebe:	e777      	b.n	8010db0 <_dtoa_r+0x7e8>
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	9308      	str	r3, [sp, #32]
 8010ec4:	e779      	b.n	8010dba <_dtoa_r+0x7f2>
 8010ec6:	d093      	beq.n	8010df0 <_dtoa_r+0x828>
 8010ec8:	9a00      	ldr	r2, [sp, #0]
 8010eca:	331c      	adds	r3, #28
 8010ecc:	441a      	add	r2, r3
 8010ece:	9200      	str	r2, [sp, #0]
 8010ed0:	9a06      	ldr	r2, [sp, #24]
 8010ed2:	441a      	add	r2, r3
 8010ed4:	441e      	add	r6, r3
 8010ed6:	9206      	str	r2, [sp, #24]
 8010ed8:	e78a      	b.n	8010df0 <_dtoa_r+0x828>
 8010eda:	4603      	mov	r3, r0
 8010edc:	e7f4      	b.n	8010ec8 <_dtoa_r+0x900>
 8010ede:	9b03      	ldr	r3, [sp, #12]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	46b8      	mov	r8, r7
 8010ee4:	dc20      	bgt.n	8010f28 <_dtoa_r+0x960>
 8010ee6:	469b      	mov	fp, r3
 8010ee8:	9b07      	ldr	r3, [sp, #28]
 8010eea:	2b02      	cmp	r3, #2
 8010eec:	dd1e      	ble.n	8010f2c <_dtoa_r+0x964>
 8010eee:	f1bb 0f00 	cmp.w	fp, #0
 8010ef2:	f47f adb1 	bne.w	8010a58 <_dtoa_r+0x490>
 8010ef6:	4621      	mov	r1, r4
 8010ef8:	465b      	mov	r3, fp
 8010efa:	2205      	movs	r2, #5
 8010efc:	4648      	mov	r0, r9
 8010efe:	f000 fa95 	bl	801142c <__multadd>
 8010f02:	4601      	mov	r1, r0
 8010f04:	4604      	mov	r4, r0
 8010f06:	9802      	ldr	r0, [sp, #8]
 8010f08:	f000 fca0 	bl	801184c <__mcmp>
 8010f0c:	2800      	cmp	r0, #0
 8010f0e:	f77f ada3 	ble.w	8010a58 <_dtoa_r+0x490>
 8010f12:	4656      	mov	r6, sl
 8010f14:	2331      	movs	r3, #49	@ 0x31
 8010f16:	f806 3b01 	strb.w	r3, [r6], #1
 8010f1a:	f108 0801 	add.w	r8, r8, #1
 8010f1e:	e59f      	b.n	8010a60 <_dtoa_r+0x498>
 8010f20:	9c03      	ldr	r4, [sp, #12]
 8010f22:	46b8      	mov	r8, r7
 8010f24:	4625      	mov	r5, r4
 8010f26:	e7f4      	b.n	8010f12 <_dtoa_r+0x94a>
 8010f28:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8010f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	f000 8101 	beq.w	8011136 <_dtoa_r+0xb6e>
 8010f34:	2e00      	cmp	r6, #0
 8010f36:	dd05      	ble.n	8010f44 <_dtoa_r+0x97c>
 8010f38:	4629      	mov	r1, r5
 8010f3a:	4632      	mov	r2, r6
 8010f3c:	4648      	mov	r0, r9
 8010f3e:	f000 fc19 	bl	8011774 <__lshift>
 8010f42:	4605      	mov	r5, r0
 8010f44:	9b08      	ldr	r3, [sp, #32]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d05c      	beq.n	8011004 <_dtoa_r+0xa3c>
 8010f4a:	6869      	ldr	r1, [r5, #4]
 8010f4c:	4648      	mov	r0, r9
 8010f4e:	f000 fa0b 	bl	8011368 <_Balloc>
 8010f52:	4606      	mov	r6, r0
 8010f54:	b928      	cbnz	r0, 8010f62 <_dtoa_r+0x99a>
 8010f56:	4b82      	ldr	r3, [pc, #520]	@ (8011160 <_dtoa_r+0xb98>)
 8010f58:	4602      	mov	r2, r0
 8010f5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010f5e:	f7ff bb4a 	b.w	80105f6 <_dtoa_r+0x2e>
 8010f62:	692a      	ldr	r2, [r5, #16]
 8010f64:	3202      	adds	r2, #2
 8010f66:	0092      	lsls	r2, r2, #2
 8010f68:	f105 010c 	add.w	r1, r5, #12
 8010f6c:	300c      	adds	r0, #12
 8010f6e:	f7ff fa92 	bl	8010496 <memcpy>
 8010f72:	2201      	movs	r2, #1
 8010f74:	4631      	mov	r1, r6
 8010f76:	4648      	mov	r0, r9
 8010f78:	f000 fbfc 	bl	8011774 <__lshift>
 8010f7c:	f10a 0301 	add.w	r3, sl, #1
 8010f80:	9300      	str	r3, [sp, #0]
 8010f82:	eb0a 030b 	add.w	r3, sl, fp
 8010f86:	9308      	str	r3, [sp, #32]
 8010f88:	9b04      	ldr	r3, [sp, #16]
 8010f8a:	f003 0301 	and.w	r3, r3, #1
 8010f8e:	462f      	mov	r7, r5
 8010f90:	9306      	str	r3, [sp, #24]
 8010f92:	4605      	mov	r5, r0
 8010f94:	9b00      	ldr	r3, [sp, #0]
 8010f96:	9802      	ldr	r0, [sp, #8]
 8010f98:	4621      	mov	r1, r4
 8010f9a:	f103 3bff 	add.w	fp, r3, #4294967295
 8010f9e:	f7ff fa88 	bl	80104b2 <quorem>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	3330      	adds	r3, #48	@ 0x30
 8010fa6:	9003      	str	r0, [sp, #12]
 8010fa8:	4639      	mov	r1, r7
 8010faa:	9802      	ldr	r0, [sp, #8]
 8010fac:	9309      	str	r3, [sp, #36]	@ 0x24
 8010fae:	f000 fc4d 	bl	801184c <__mcmp>
 8010fb2:	462a      	mov	r2, r5
 8010fb4:	9004      	str	r0, [sp, #16]
 8010fb6:	4621      	mov	r1, r4
 8010fb8:	4648      	mov	r0, r9
 8010fba:	f000 fc63 	bl	8011884 <__mdiff>
 8010fbe:	68c2      	ldr	r2, [r0, #12]
 8010fc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fc2:	4606      	mov	r6, r0
 8010fc4:	bb02      	cbnz	r2, 8011008 <_dtoa_r+0xa40>
 8010fc6:	4601      	mov	r1, r0
 8010fc8:	9802      	ldr	r0, [sp, #8]
 8010fca:	f000 fc3f 	bl	801184c <__mcmp>
 8010fce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fd0:	4602      	mov	r2, r0
 8010fd2:	4631      	mov	r1, r6
 8010fd4:	4648      	mov	r0, r9
 8010fd6:	920c      	str	r2, [sp, #48]	@ 0x30
 8010fd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8010fda:	f000 fa05 	bl	80113e8 <_Bfree>
 8010fde:	9b07      	ldr	r3, [sp, #28]
 8010fe0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010fe2:	9e00      	ldr	r6, [sp, #0]
 8010fe4:	ea42 0103 	orr.w	r1, r2, r3
 8010fe8:	9b06      	ldr	r3, [sp, #24]
 8010fea:	4319      	orrs	r1, r3
 8010fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fee:	d10d      	bne.n	801100c <_dtoa_r+0xa44>
 8010ff0:	2b39      	cmp	r3, #57	@ 0x39
 8010ff2:	d027      	beq.n	8011044 <_dtoa_r+0xa7c>
 8010ff4:	9a04      	ldr	r2, [sp, #16]
 8010ff6:	2a00      	cmp	r2, #0
 8010ff8:	dd01      	ble.n	8010ffe <_dtoa_r+0xa36>
 8010ffa:	9b03      	ldr	r3, [sp, #12]
 8010ffc:	3331      	adds	r3, #49	@ 0x31
 8010ffe:	f88b 3000 	strb.w	r3, [fp]
 8011002:	e52e      	b.n	8010a62 <_dtoa_r+0x49a>
 8011004:	4628      	mov	r0, r5
 8011006:	e7b9      	b.n	8010f7c <_dtoa_r+0x9b4>
 8011008:	2201      	movs	r2, #1
 801100a:	e7e2      	b.n	8010fd2 <_dtoa_r+0xa0a>
 801100c:	9904      	ldr	r1, [sp, #16]
 801100e:	2900      	cmp	r1, #0
 8011010:	db04      	blt.n	801101c <_dtoa_r+0xa54>
 8011012:	9807      	ldr	r0, [sp, #28]
 8011014:	4301      	orrs	r1, r0
 8011016:	9806      	ldr	r0, [sp, #24]
 8011018:	4301      	orrs	r1, r0
 801101a:	d120      	bne.n	801105e <_dtoa_r+0xa96>
 801101c:	2a00      	cmp	r2, #0
 801101e:	ddee      	ble.n	8010ffe <_dtoa_r+0xa36>
 8011020:	9902      	ldr	r1, [sp, #8]
 8011022:	9300      	str	r3, [sp, #0]
 8011024:	2201      	movs	r2, #1
 8011026:	4648      	mov	r0, r9
 8011028:	f000 fba4 	bl	8011774 <__lshift>
 801102c:	4621      	mov	r1, r4
 801102e:	9002      	str	r0, [sp, #8]
 8011030:	f000 fc0c 	bl	801184c <__mcmp>
 8011034:	2800      	cmp	r0, #0
 8011036:	9b00      	ldr	r3, [sp, #0]
 8011038:	dc02      	bgt.n	8011040 <_dtoa_r+0xa78>
 801103a:	d1e0      	bne.n	8010ffe <_dtoa_r+0xa36>
 801103c:	07da      	lsls	r2, r3, #31
 801103e:	d5de      	bpl.n	8010ffe <_dtoa_r+0xa36>
 8011040:	2b39      	cmp	r3, #57	@ 0x39
 8011042:	d1da      	bne.n	8010ffa <_dtoa_r+0xa32>
 8011044:	2339      	movs	r3, #57	@ 0x39
 8011046:	f88b 3000 	strb.w	r3, [fp]
 801104a:	4633      	mov	r3, r6
 801104c:	461e      	mov	r6, r3
 801104e:	3b01      	subs	r3, #1
 8011050:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011054:	2a39      	cmp	r2, #57	@ 0x39
 8011056:	d04e      	beq.n	80110f6 <_dtoa_r+0xb2e>
 8011058:	3201      	adds	r2, #1
 801105a:	701a      	strb	r2, [r3, #0]
 801105c:	e501      	b.n	8010a62 <_dtoa_r+0x49a>
 801105e:	2a00      	cmp	r2, #0
 8011060:	dd03      	ble.n	801106a <_dtoa_r+0xaa2>
 8011062:	2b39      	cmp	r3, #57	@ 0x39
 8011064:	d0ee      	beq.n	8011044 <_dtoa_r+0xa7c>
 8011066:	3301      	adds	r3, #1
 8011068:	e7c9      	b.n	8010ffe <_dtoa_r+0xa36>
 801106a:	9a00      	ldr	r2, [sp, #0]
 801106c:	9908      	ldr	r1, [sp, #32]
 801106e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011072:	428a      	cmp	r2, r1
 8011074:	d028      	beq.n	80110c8 <_dtoa_r+0xb00>
 8011076:	9902      	ldr	r1, [sp, #8]
 8011078:	2300      	movs	r3, #0
 801107a:	220a      	movs	r2, #10
 801107c:	4648      	mov	r0, r9
 801107e:	f000 f9d5 	bl	801142c <__multadd>
 8011082:	42af      	cmp	r7, r5
 8011084:	9002      	str	r0, [sp, #8]
 8011086:	f04f 0300 	mov.w	r3, #0
 801108a:	f04f 020a 	mov.w	r2, #10
 801108e:	4639      	mov	r1, r7
 8011090:	4648      	mov	r0, r9
 8011092:	d107      	bne.n	80110a4 <_dtoa_r+0xadc>
 8011094:	f000 f9ca 	bl	801142c <__multadd>
 8011098:	4607      	mov	r7, r0
 801109a:	4605      	mov	r5, r0
 801109c:	9b00      	ldr	r3, [sp, #0]
 801109e:	3301      	adds	r3, #1
 80110a0:	9300      	str	r3, [sp, #0]
 80110a2:	e777      	b.n	8010f94 <_dtoa_r+0x9cc>
 80110a4:	f000 f9c2 	bl	801142c <__multadd>
 80110a8:	4629      	mov	r1, r5
 80110aa:	4607      	mov	r7, r0
 80110ac:	2300      	movs	r3, #0
 80110ae:	220a      	movs	r2, #10
 80110b0:	4648      	mov	r0, r9
 80110b2:	f000 f9bb 	bl	801142c <__multadd>
 80110b6:	4605      	mov	r5, r0
 80110b8:	e7f0      	b.n	801109c <_dtoa_r+0xad4>
 80110ba:	f1bb 0f00 	cmp.w	fp, #0
 80110be:	bfcc      	ite	gt
 80110c0:	465e      	movgt	r6, fp
 80110c2:	2601      	movle	r6, #1
 80110c4:	4456      	add	r6, sl
 80110c6:	2700      	movs	r7, #0
 80110c8:	9902      	ldr	r1, [sp, #8]
 80110ca:	9300      	str	r3, [sp, #0]
 80110cc:	2201      	movs	r2, #1
 80110ce:	4648      	mov	r0, r9
 80110d0:	f000 fb50 	bl	8011774 <__lshift>
 80110d4:	4621      	mov	r1, r4
 80110d6:	9002      	str	r0, [sp, #8]
 80110d8:	f000 fbb8 	bl	801184c <__mcmp>
 80110dc:	2800      	cmp	r0, #0
 80110de:	dcb4      	bgt.n	801104a <_dtoa_r+0xa82>
 80110e0:	d102      	bne.n	80110e8 <_dtoa_r+0xb20>
 80110e2:	9b00      	ldr	r3, [sp, #0]
 80110e4:	07db      	lsls	r3, r3, #31
 80110e6:	d4b0      	bmi.n	801104a <_dtoa_r+0xa82>
 80110e8:	4633      	mov	r3, r6
 80110ea:	461e      	mov	r6, r3
 80110ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80110f0:	2a30      	cmp	r2, #48	@ 0x30
 80110f2:	d0fa      	beq.n	80110ea <_dtoa_r+0xb22>
 80110f4:	e4b5      	b.n	8010a62 <_dtoa_r+0x49a>
 80110f6:	459a      	cmp	sl, r3
 80110f8:	d1a8      	bne.n	801104c <_dtoa_r+0xa84>
 80110fa:	2331      	movs	r3, #49	@ 0x31
 80110fc:	f108 0801 	add.w	r8, r8, #1
 8011100:	f88a 3000 	strb.w	r3, [sl]
 8011104:	e4ad      	b.n	8010a62 <_dtoa_r+0x49a>
 8011106:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011108:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8011164 <_dtoa_r+0xb9c>
 801110c:	b11b      	cbz	r3, 8011116 <_dtoa_r+0xb4e>
 801110e:	f10a 0308 	add.w	r3, sl, #8
 8011112:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011114:	6013      	str	r3, [r2, #0]
 8011116:	4650      	mov	r0, sl
 8011118:	b017      	add	sp, #92	@ 0x5c
 801111a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801111e:	9b07      	ldr	r3, [sp, #28]
 8011120:	2b01      	cmp	r3, #1
 8011122:	f77f ae2e 	ble.w	8010d82 <_dtoa_r+0x7ba>
 8011126:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011128:	9308      	str	r3, [sp, #32]
 801112a:	2001      	movs	r0, #1
 801112c:	e64d      	b.n	8010dca <_dtoa_r+0x802>
 801112e:	f1bb 0f00 	cmp.w	fp, #0
 8011132:	f77f aed9 	ble.w	8010ee8 <_dtoa_r+0x920>
 8011136:	4656      	mov	r6, sl
 8011138:	9802      	ldr	r0, [sp, #8]
 801113a:	4621      	mov	r1, r4
 801113c:	f7ff f9b9 	bl	80104b2 <quorem>
 8011140:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8011144:	f806 3b01 	strb.w	r3, [r6], #1
 8011148:	eba6 020a 	sub.w	r2, r6, sl
 801114c:	4593      	cmp	fp, r2
 801114e:	ddb4      	ble.n	80110ba <_dtoa_r+0xaf2>
 8011150:	9902      	ldr	r1, [sp, #8]
 8011152:	2300      	movs	r3, #0
 8011154:	220a      	movs	r2, #10
 8011156:	4648      	mov	r0, r9
 8011158:	f000 f968 	bl	801142c <__multadd>
 801115c:	9002      	str	r0, [sp, #8]
 801115e:	e7eb      	b.n	8011138 <_dtoa_r+0xb70>
 8011160:	080292e0 	.word	0x080292e0
 8011164:	08029264 	.word	0x08029264

08011168 <_free_r>:
 8011168:	b538      	push	{r3, r4, r5, lr}
 801116a:	4605      	mov	r5, r0
 801116c:	2900      	cmp	r1, #0
 801116e:	d041      	beq.n	80111f4 <_free_r+0x8c>
 8011170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011174:	1f0c      	subs	r4, r1, #4
 8011176:	2b00      	cmp	r3, #0
 8011178:	bfb8      	it	lt
 801117a:	18e4      	addlt	r4, r4, r3
 801117c:	f000 f8e8 	bl	8011350 <__malloc_lock>
 8011180:	4a1d      	ldr	r2, [pc, #116]	@ (80111f8 <_free_r+0x90>)
 8011182:	6813      	ldr	r3, [r2, #0]
 8011184:	b933      	cbnz	r3, 8011194 <_free_r+0x2c>
 8011186:	6063      	str	r3, [r4, #4]
 8011188:	6014      	str	r4, [r2, #0]
 801118a:	4628      	mov	r0, r5
 801118c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011190:	f000 b8e4 	b.w	801135c <__malloc_unlock>
 8011194:	42a3      	cmp	r3, r4
 8011196:	d908      	bls.n	80111aa <_free_r+0x42>
 8011198:	6820      	ldr	r0, [r4, #0]
 801119a:	1821      	adds	r1, r4, r0
 801119c:	428b      	cmp	r3, r1
 801119e:	bf01      	itttt	eq
 80111a0:	6819      	ldreq	r1, [r3, #0]
 80111a2:	685b      	ldreq	r3, [r3, #4]
 80111a4:	1809      	addeq	r1, r1, r0
 80111a6:	6021      	streq	r1, [r4, #0]
 80111a8:	e7ed      	b.n	8011186 <_free_r+0x1e>
 80111aa:	461a      	mov	r2, r3
 80111ac:	685b      	ldr	r3, [r3, #4]
 80111ae:	b10b      	cbz	r3, 80111b4 <_free_r+0x4c>
 80111b0:	42a3      	cmp	r3, r4
 80111b2:	d9fa      	bls.n	80111aa <_free_r+0x42>
 80111b4:	6811      	ldr	r1, [r2, #0]
 80111b6:	1850      	adds	r0, r2, r1
 80111b8:	42a0      	cmp	r0, r4
 80111ba:	d10b      	bne.n	80111d4 <_free_r+0x6c>
 80111bc:	6820      	ldr	r0, [r4, #0]
 80111be:	4401      	add	r1, r0
 80111c0:	1850      	adds	r0, r2, r1
 80111c2:	4283      	cmp	r3, r0
 80111c4:	6011      	str	r1, [r2, #0]
 80111c6:	d1e0      	bne.n	801118a <_free_r+0x22>
 80111c8:	6818      	ldr	r0, [r3, #0]
 80111ca:	685b      	ldr	r3, [r3, #4]
 80111cc:	6053      	str	r3, [r2, #4]
 80111ce:	4408      	add	r0, r1
 80111d0:	6010      	str	r0, [r2, #0]
 80111d2:	e7da      	b.n	801118a <_free_r+0x22>
 80111d4:	d902      	bls.n	80111dc <_free_r+0x74>
 80111d6:	230c      	movs	r3, #12
 80111d8:	602b      	str	r3, [r5, #0]
 80111da:	e7d6      	b.n	801118a <_free_r+0x22>
 80111dc:	6820      	ldr	r0, [r4, #0]
 80111de:	1821      	adds	r1, r4, r0
 80111e0:	428b      	cmp	r3, r1
 80111e2:	bf04      	itt	eq
 80111e4:	6819      	ldreq	r1, [r3, #0]
 80111e6:	685b      	ldreq	r3, [r3, #4]
 80111e8:	6063      	str	r3, [r4, #4]
 80111ea:	bf04      	itt	eq
 80111ec:	1809      	addeq	r1, r1, r0
 80111ee:	6021      	streq	r1, [r4, #0]
 80111f0:	6054      	str	r4, [r2, #4]
 80111f2:	e7ca      	b.n	801118a <_free_r+0x22>
 80111f4:	bd38      	pop	{r3, r4, r5, pc}
 80111f6:	bf00      	nop
 80111f8:	20006ca0 	.word	0x20006ca0

080111fc <malloc>:
 80111fc:	4b02      	ldr	r3, [pc, #8]	@ (8011208 <malloc+0xc>)
 80111fe:	4601      	mov	r1, r0
 8011200:	6818      	ldr	r0, [r3, #0]
 8011202:	f000 b825 	b.w	8011250 <_malloc_r>
 8011206:	bf00      	nop
 8011208:	20000234 	.word	0x20000234

0801120c <sbrk_aligned>:
 801120c:	b570      	push	{r4, r5, r6, lr}
 801120e:	4e0f      	ldr	r6, [pc, #60]	@ (801124c <sbrk_aligned+0x40>)
 8011210:	460c      	mov	r4, r1
 8011212:	6831      	ldr	r1, [r6, #0]
 8011214:	4605      	mov	r5, r0
 8011216:	b911      	cbnz	r1, 801121e <sbrk_aligned+0x12>
 8011218:	f001 f814 	bl	8012244 <_sbrk_r>
 801121c:	6030      	str	r0, [r6, #0]
 801121e:	4621      	mov	r1, r4
 8011220:	4628      	mov	r0, r5
 8011222:	f001 f80f 	bl	8012244 <_sbrk_r>
 8011226:	1c43      	adds	r3, r0, #1
 8011228:	d103      	bne.n	8011232 <sbrk_aligned+0x26>
 801122a:	f04f 34ff 	mov.w	r4, #4294967295
 801122e:	4620      	mov	r0, r4
 8011230:	bd70      	pop	{r4, r5, r6, pc}
 8011232:	1cc4      	adds	r4, r0, #3
 8011234:	f024 0403 	bic.w	r4, r4, #3
 8011238:	42a0      	cmp	r0, r4
 801123a:	d0f8      	beq.n	801122e <sbrk_aligned+0x22>
 801123c:	1a21      	subs	r1, r4, r0
 801123e:	4628      	mov	r0, r5
 8011240:	f001 f800 	bl	8012244 <_sbrk_r>
 8011244:	3001      	adds	r0, #1
 8011246:	d1f2      	bne.n	801122e <sbrk_aligned+0x22>
 8011248:	e7ef      	b.n	801122a <sbrk_aligned+0x1e>
 801124a:	bf00      	nop
 801124c:	20006c9c 	.word	0x20006c9c

08011250 <_malloc_r>:
 8011250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011254:	1ccd      	adds	r5, r1, #3
 8011256:	f025 0503 	bic.w	r5, r5, #3
 801125a:	3508      	adds	r5, #8
 801125c:	2d0c      	cmp	r5, #12
 801125e:	bf38      	it	cc
 8011260:	250c      	movcc	r5, #12
 8011262:	2d00      	cmp	r5, #0
 8011264:	4606      	mov	r6, r0
 8011266:	db01      	blt.n	801126c <_malloc_r+0x1c>
 8011268:	42a9      	cmp	r1, r5
 801126a:	d904      	bls.n	8011276 <_malloc_r+0x26>
 801126c:	230c      	movs	r3, #12
 801126e:	6033      	str	r3, [r6, #0]
 8011270:	2000      	movs	r0, #0
 8011272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011276:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801134c <_malloc_r+0xfc>
 801127a:	f000 f869 	bl	8011350 <__malloc_lock>
 801127e:	f8d8 3000 	ldr.w	r3, [r8]
 8011282:	461c      	mov	r4, r3
 8011284:	bb44      	cbnz	r4, 80112d8 <_malloc_r+0x88>
 8011286:	4629      	mov	r1, r5
 8011288:	4630      	mov	r0, r6
 801128a:	f7ff ffbf 	bl	801120c <sbrk_aligned>
 801128e:	1c43      	adds	r3, r0, #1
 8011290:	4604      	mov	r4, r0
 8011292:	d158      	bne.n	8011346 <_malloc_r+0xf6>
 8011294:	f8d8 4000 	ldr.w	r4, [r8]
 8011298:	4627      	mov	r7, r4
 801129a:	2f00      	cmp	r7, #0
 801129c:	d143      	bne.n	8011326 <_malloc_r+0xd6>
 801129e:	2c00      	cmp	r4, #0
 80112a0:	d04b      	beq.n	801133a <_malloc_r+0xea>
 80112a2:	6823      	ldr	r3, [r4, #0]
 80112a4:	4639      	mov	r1, r7
 80112a6:	4630      	mov	r0, r6
 80112a8:	eb04 0903 	add.w	r9, r4, r3
 80112ac:	f000 ffca 	bl	8012244 <_sbrk_r>
 80112b0:	4581      	cmp	r9, r0
 80112b2:	d142      	bne.n	801133a <_malloc_r+0xea>
 80112b4:	6821      	ldr	r1, [r4, #0]
 80112b6:	1a6d      	subs	r5, r5, r1
 80112b8:	4629      	mov	r1, r5
 80112ba:	4630      	mov	r0, r6
 80112bc:	f7ff ffa6 	bl	801120c <sbrk_aligned>
 80112c0:	3001      	adds	r0, #1
 80112c2:	d03a      	beq.n	801133a <_malloc_r+0xea>
 80112c4:	6823      	ldr	r3, [r4, #0]
 80112c6:	442b      	add	r3, r5
 80112c8:	6023      	str	r3, [r4, #0]
 80112ca:	f8d8 3000 	ldr.w	r3, [r8]
 80112ce:	685a      	ldr	r2, [r3, #4]
 80112d0:	bb62      	cbnz	r2, 801132c <_malloc_r+0xdc>
 80112d2:	f8c8 7000 	str.w	r7, [r8]
 80112d6:	e00f      	b.n	80112f8 <_malloc_r+0xa8>
 80112d8:	6822      	ldr	r2, [r4, #0]
 80112da:	1b52      	subs	r2, r2, r5
 80112dc:	d420      	bmi.n	8011320 <_malloc_r+0xd0>
 80112de:	2a0b      	cmp	r2, #11
 80112e0:	d917      	bls.n	8011312 <_malloc_r+0xc2>
 80112e2:	1961      	adds	r1, r4, r5
 80112e4:	42a3      	cmp	r3, r4
 80112e6:	6025      	str	r5, [r4, #0]
 80112e8:	bf18      	it	ne
 80112ea:	6059      	strne	r1, [r3, #4]
 80112ec:	6863      	ldr	r3, [r4, #4]
 80112ee:	bf08      	it	eq
 80112f0:	f8c8 1000 	streq.w	r1, [r8]
 80112f4:	5162      	str	r2, [r4, r5]
 80112f6:	604b      	str	r3, [r1, #4]
 80112f8:	4630      	mov	r0, r6
 80112fa:	f000 f82f 	bl	801135c <__malloc_unlock>
 80112fe:	f104 000b 	add.w	r0, r4, #11
 8011302:	1d23      	adds	r3, r4, #4
 8011304:	f020 0007 	bic.w	r0, r0, #7
 8011308:	1ac2      	subs	r2, r0, r3
 801130a:	bf1c      	itt	ne
 801130c:	1a1b      	subne	r3, r3, r0
 801130e:	50a3      	strne	r3, [r4, r2]
 8011310:	e7af      	b.n	8011272 <_malloc_r+0x22>
 8011312:	6862      	ldr	r2, [r4, #4]
 8011314:	42a3      	cmp	r3, r4
 8011316:	bf0c      	ite	eq
 8011318:	f8c8 2000 	streq.w	r2, [r8]
 801131c:	605a      	strne	r2, [r3, #4]
 801131e:	e7eb      	b.n	80112f8 <_malloc_r+0xa8>
 8011320:	4623      	mov	r3, r4
 8011322:	6864      	ldr	r4, [r4, #4]
 8011324:	e7ae      	b.n	8011284 <_malloc_r+0x34>
 8011326:	463c      	mov	r4, r7
 8011328:	687f      	ldr	r7, [r7, #4]
 801132a:	e7b6      	b.n	801129a <_malloc_r+0x4a>
 801132c:	461a      	mov	r2, r3
 801132e:	685b      	ldr	r3, [r3, #4]
 8011330:	42a3      	cmp	r3, r4
 8011332:	d1fb      	bne.n	801132c <_malloc_r+0xdc>
 8011334:	2300      	movs	r3, #0
 8011336:	6053      	str	r3, [r2, #4]
 8011338:	e7de      	b.n	80112f8 <_malloc_r+0xa8>
 801133a:	230c      	movs	r3, #12
 801133c:	6033      	str	r3, [r6, #0]
 801133e:	4630      	mov	r0, r6
 8011340:	f000 f80c 	bl	801135c <__malloc_unlock>
 8011344:	e794      	b.n	8011270 <_malloc_r+0x20>
 8011346:	6005      	str	r5, [r0, #0]
 8011348:	e7d6      	b.n	80112f8 <_malloc_r+0xa8>
 801134a:	bf00      	nop
 801134c:	20006ca0 	.word	0x20006ca0

08011350 <__malloc_lock>:
 8011350:	4801      	ldr	r0, [pc, #4]	@ (8011358 <__malloc_lock+0x8>)
 8011352:	f7ff b89e 	b.w	8010492 <__retarget_lock_acquire_recursive>
 8011356:	bf00      	nop
 8011358:	20006c98 	.word	0x20006c98

0801135c <__malloc_unlock>:
 801135c:	4801      	ldr	r0, [pc, #4]	@ (8011364 <__malloc_unlock+0x8>)
 801135e:	f7ff b899 	b.w	8010494 <__retarget_lock_release_recursive>
 8011362:	bf00      	nop
 8011364:	20006c98 	.word	0x20006c98

08011368 <_Balloc>:
 8011368:	b570      	push	{r4, r5, r6, lr}
 801136a:	69c6      	ldr	r6, [r0, #28]
 801136c:	4604      	mov	r4, r0
 801136e:	460d      	mov	r5, r1
 8011370:	b976      	cbnz	r6, 8011390 <_Balloc+0x28>
 8011372:	2010      	movs	r0, #16
 8011374:	f7ff ff42 	bl	80111fc <malloc>
 8011378:	4602      	mov	r2, r0
 801137a:	61e0      	str	r0, [r4, #28]
 801137c:	b920      	cbnz	r0, 8011388 <_Balloc+0x20>
 801137e:	4b18      	ldr	r3, [pc, #96]	@ (80113e0 <_Balloc+0x78>)
 8011380:	4818      	ldr	r0, [pc, #96]	@ (80113e4 <_Balloc+0x7c>)
 8011382:	216b      	movs	r1, #107	@ 0x6b
 8011384:	f000 ff6e 	bl	8012264 <__assert_func>
 8011388:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801138c:	6006      	str	r6, [r0, #0]
 801138e:	60c6      	str	r6, [r0, #12]
 8011390:	69e6      	ldr	r6, [r4, #28]
 8011392:	68f3      	ldr	r3, [r6, #12]
 8011394:	b183      	cbz	r3, 80113b8 <_Balloc+0x50>
 8011396:	69e3      	ldr	r3, [r4, #28]
 8011398:	68db      	ldr	r3, [r3, #12]
 801139a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801139e:	b9b8      	cbnz	r0, 80113d0 <_Balloc+0x68>
 80113a0:	2101      	movs	r1, #1
 80113a2:	fa01 f605 	lsl.w	r6, r1, r5
 80113a6:	1d72      	adds	r2, r6, #5
 80113a8:	0092      	lsls	r2, r2, #2
 80113aa:	4620      	mov	r0, r4
 80113ac:	f000 ff78 	bl	80122a0 <_calloc_r>
 80113b0:	b160      	cbz	r0, 80113cc <_Balloc+0x64>
 80113b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80113b6:	e00e      	b.n	80113d6 <_Balloc+0x6e>
 80113b8:	2221      	movs	r2, #33	@ 0x21
 80113ba:	2104      	movs	r1, #4
 80113bc:	4620      	mov	r0, r4
 80113be:	f000 ff6f 	bl	80122a0 <_calloc_r>
 80113c2:	69e3      	ldr	r3, [r4, #28]
 80113c4:	60f0      	str	r0, [r6, #12]
 80113c6:	68db      	ldr	r3, [r3, #12]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d1e4      	bne.n	8011396 <_Balloc+0x2e>
 80113cc:	2000      	movs	r0, #0
 80113ce:	bd70      	pop	{r4, r5, r6, pc}
 80113d0:	6802      	ldr	r2, [r0, #0]
 80113d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80113d6:	2300      	movs	r3, #0
 80113d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80113dc:	e7f7      	b.n	80113ce <_Balloc+0x66>
 80113de:	bf00      	nop
 80113e0:	08029271 	.word	0x08029271
 80113e4:	080292f1 	.word	0x080292f1

080113e8 <_Bfree>:
 80113e8:	b570      	push	{r4, r5, r6, lr}
 80113ea:	69c6      	ldr	r6, [r0, #28]
 80113ec:	4605      	mov	r5, r0
 80113ee:	460c      	mov	r4, r1
 80113f0:	b976      	cbnz	r6, 8011410 <_Bfree+0x28>
 80113f2:	2010      	movs	r0, #16
 80113f4:	f7ff ff02 	bl	80111fc <malloc>
 80113f8:	4602      	mov	r2, r0
 80113fa:	61e8      	str	r0, [r5, #28]
 80113fc:	b920      	cbnz	r0, 8011408 <_Bfree+0x20>
 80113fe:	4b09      	ldr	r3, [pc, #36]	@ (8011424 <_Bfree+0x3c>)
 8011400:	4809      	ldr	r0, [pc, #36]	@ (8011428 <_Bfree+0x40>)
 8011402:	218f      	movs	r1, #143	@ 0x8f
 8011404:	f000 ff2e 	bl	8012264 <__assert_func>
 8011408:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801140c:	6006      	str	r6, [r0, #0]
 801140e:	60c6      	str	r6, [r0, #12]
 8011410:	b13c      	cbz	r4, 8011422 <_Bfree+0x3a>
 8011412:	69eb      	ldr	r3, [r5, #28]
 8011414:	6862      	ldr	r2, [r4, #4]
 8011416:	68db      	ldr	r3, [r3, #12]
 8011418:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801141c:	6021      	str	r1, [r4, #0]
 801141e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011422:	bd70      	pop	{r4, r5, r6, pc}
 8011424:	08029271 	.word	0x08029271
 8011428:	080292f1 	.word	0x080292f1

0801142c <__multadd>:
 801142c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011430:	690d      	ldr	r5, [r1, #16]
 8011432:	4607      	mov	r7, r0
 8011434:	460c      	mov	r4, r1
 8011436:	461e      	mov	r6, r3
 8011438:	f101 0c14 	add.w	ip, r1, #20
 801143c:	2000      	movs	r0, #0
 801143e:	f8dc 3000 	ldr.w	r3, [ip]
 8011442:	b299      	uxth	r1, r3
 8011444:	fb02 6101 	mla	r1, r2, r1, r6
 8011448:	0c1e      	lsrs	r6, r3, #16
 801144a:	0c0b      	lsrs	r3, r1, #16
 801144c:	fb02 3306 	mla	r3, r2, r6, r3
 8011450:	b289      	uxth	r1, r1
 8011452:	3001      	adds	r0, #1
 8011454:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011458:	4285      	cmp	r5, r0
 801145a:	f84c 1b04 	str.w	r1, [ip], #4
 801145e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011462:	dcec      	bgt.n	801143e <__multadd+0x12>
 8011464:	b30e      	cbz	r6, 80114aa <__multadd+0x7e>
 8011466:	68a3      	ldr	r3, [r4, #8]
 8011468:	42ab      	cmp	r3, r5
 801146a:	dc19      	bgt.n	80114a0 <__multadd+0x74>
 801146c:	6861      	ldr	r1, [r4, #4]
 801146e:	4638      	mov	r0, r7
 8011470:	3101      	adds	r1, #1
 8011472:	f7ff ff79 	bl	8011368 <_Balloc>
 8011476:	4680      	mov	r8, r0
 8011478:	b928      	cbnz	r0, 8011486 <__multadd+0x5a>
 801147a:	4602      	mov	r2, r0
 801147c:	4b0c      	ldr	r3, [pc, #48]	@ (80114b0 <__multadd+0x84>)
 801147e:	480d      	ldr	r0, [pc, #52]	@ (80114b4 <__multadd+0x88>)
 8011480:	21ba      	movs	r1, #186	@ 0xba
 8011482:	f000 feef 	bl	8012264 <__assert_func>
 8011486:	6922      	ldr	r2, [r4, #16]
 8011488:	3202      	adds	r2, #2
 801148a:	f104 010c 	add.w	r1, r4, #12
 801148e:	0092      	lsls	r2, r2, #2
 8011490:	300c      	adds	r0, #12
 8011492:	f7ff f800 	bl	8010496 <memcpy>
 8011496:	4621      	mov	r1, r4
 8011498:	4638      	mov	r0, r7
 801149a:	f7ff ffa5 	bl	80113e8 <_Bfree>
 801149e:	4644      	mov	r4, r8
 80114a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80114a4:	3501      	adds	r5, #1
 80114a6:	615e      	str	r6, [r3, #20]
 80114a8:	6125      	str	r5, [r4, #16]
 80114aa:	4620      	mov	r0, r4
 80114ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114b0:	080292e0 	.word	0x080292e0
 80114b4:	080292f1 	.word	0x080292f1

080114b8 <__hi0bits>:
 80114b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80114bc:	4603      	mov	r3, r0
 80114be:	bf36      	itet	cc
 80114c0:	0403      	lslcc	r3, r0, #16
 80114c2:	2000      	movcs	r0, #0
 80114c4:	2010      	movcc	r0, #16
 80114c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80114ca:	bf3c      	itt	cc
 80114cc:	021b      	lslcc	r3, r3, #8
 80114ce:	3008      	addcc	r0, #8
 80114d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80114d4:	bf3c      	itt	cc
 80114d6:	011b      	lslcc	r3, r3, #4
 80114d8:	3004      	addcc	r0, #4
 80114da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80114de:	bf3c      	itt	cc
 80114e0:	009b      	lslcc	r3, r3, #2
 80114e2:	3002      	addcc	r0, #2
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	db05      	blt.n	80114f4 <__hi0bits+0x3c>
 80114e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80114ec:	f100 0001 	add.w	r0, r0, #1
 80114f0:	bf08      	it	eq
 80114f2:	2020      	moveq	r0, #32
 80114f4:	4770      	bx	lr

080114f6 <__lo0bits>:
 80114f6:	6803      	ldr	r3, [r0, #0]
 80114f8:	4602      	mov	r2, r0
 80114fa:	f013 0007 	ands.w	r0, r3, #7
 80114fe:	d00b      	beq.n	8011518 <__lo0bits+0x22>
 8011500:	07d9      	lsls	r1, r3, #31
 8011502:	d421      	bmi.n	8011548 <__lo0bits+0x52>
 8011504:	0798      	lsls	r0, r3, #30
 8011506:	bf49      	itett	mi
 8011508:	085b      	lsrmi	r3, r3, #1
 801150a:	089b      	lsrpl	r3, r3, #2
 801150c:	2001      	movmi	r0, #1
 801150e:	6013      	strmi	r3, [r2, #0]
 8011510:	bf5c      	itt	pl
 8011512:	6013      	strpl	r3, [r2, #0]
 8011514:	2002      	movpl	r0, #2
 8011516:	4770      	bx	lr
 8011518:	b299      	uxth	r1, r3
 801151a:	b909      	cbnz	r1, 8011520 <__lo0bits+0x2a>
 801151c:	0c1b      	lsrs	r3, r3, #16
 801151e:	2010      	movs	r0, #16
 8011520:	b2d9      	uxtb	r1, r3
 8011522:	b909      	cbnz	r1, 8011528 <__lo0bits+0x32>
 8011524:	3008      	adds	r0, #8
 8011526:	0a1b      	lsrs	r3, r3, #8
 8011528:	0719      	lsls	r1, r3, #28
 801152a:	bf04      	itt	eq
 801152c:	091b      	lsreq	r3, r3, #4
 801152e:	3004      	addeq	r0, #4
 8011530:	0799      	lsls	r1, r3, #30
 8011532:	bf04      	itt	eq
 8011534:	089b      	lsreq	r3, r3, #2
 8011536:	3002      	addeq	r0, #2
 8011538:	07d9      	lsls	r1, r3, #31
 801153a:	d403      	bmi.n	8011544 <__lo0bits+0x4e>
 801153c:	085b      	lsrs	r3, r3, #1
 801153e:	f100 0001 	add.w	r0, r0, #1
 8011542:	d003      	beq.n	801154c <__lo0bits+0x56>
 8011544:	6013      	str	r3, [r2, #0]
 8011546:	4770      	bx	lr
 8011548:	2000      	movs	r0, #0
 801154a:	4770      	bx	lr
 801154c:	2020      	movs	r0, #32
 801154e:	4770      	bx	lr

08011550 <__i2b>:
 8011550:	b510      	push	{r4, lr}
 8011552:	460c      	mov	r4, r1
 8011554:	2101      	movs	r1, #1
 8011556:	f7ff ff07 	bl	8011368 <_Balloc>
 801155a:	4602      	mov	r2, r0
 801155c:	b928      	cbnz	r0, 801156a <__i2b+0x1a>
 801155e:	4b05      	ldr	r3, [pc, #20]	@ (8011574 <__i2b+0x24>)
 8011560:	4805      	ldr	r0, [pc, #20]	@ (8011578 <__i2b+0x28>)
 8011562:	f240 1145 	movw	r1, #325	@ 0x145
 8011566:	f000 fe7d 	bl	8012264 <__assert_func>
 801156a:	2301      	movs	r3, #1
 801156c:	6144      	str	r4, [r0, #20]
 801156e:	6103      	str	r3, [r0, #16]
 8011570:	bd10      	pop	{r4, pc}
 8011572:	bf00      	nop
 8011574:	080292e0 	.word	0x080292e0
 8011578:	080292f1 	.word	0x080292f1

0801157c <__multiply>:
 801157c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011580:	4617      	mov	r7, r2
 8011582:	690a      	ldr	r2, [r1, #16]
 8011584:	693b      	ldr	r3, [r7, #16]
 8011586:	429a      	cmp	r2, r3
 8011588:	bfa8      	it	ge
 801158a:	463b      	movge	r3, r7
 801158c:	4689      	mov	r9, r1
 801158e:	bfa4      	itt	ge
 8011590:	460f      	movge	r7, r1
 8011592:	4699      	movge	r9, r3
 8011594:	693d      	ldr	r5, [r7, #16]
 8011596:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801159a:	68bb      	ldr	r3, [r7, #8]
 801159c:	6879      	ldr	r1, [r7, #4]
 801159e:	eb05 060a 	add.w	r6, r5, sl
 80115a2:	42b3      	cmp	r3, r6
 80115a4:	b085      	sub	sp, #20
 80115a6:	bfb8      	it	lt
 80115a8:	3101      	addlt	r1, #1
 80115aa:	f7ff fedd 	bl	8011368 <_Balloc>
 80115ae:	b930      	cbnz	r0, 80115be <__multiply+0x42>
 80115b0:	4602      	mov	r2, r0
 80115b2:	4b41      	ldr	r3, [pc, #260]	@ (80116b8 <__multiply+0x13c>)
 80115b4:	4841      	ldr	r0, [pc, #260]	@ (80116bc <__multiply+0x140>)
 80115b6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80115ba:	f000 fe53 	bl	8012264 <__assert_func>
 80115be:	f100 0414 	add.w	r4, r0, #20
 80115c2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80115c6:	4623      	mov	r3, r4
 80115c8:	2200      	movs	r2, #0
 80115ca:	4573      	cmp	r3, lr
 80115cc:	d320      	bcc.n	8011610 <__multiply+0x94>
 80115ce:	f107 0814 	add.w	r8, r7, #20
 80115d2:	f109 0114 	add.w	r1, r9, #20
 80115d6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80115da:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80115de:	9302      	str	r3, [sp, #8]
 80115e0:	1beb      	subs	r3, r5, r7
 80115e2:	3b15      	subs	r3, #21
 80115e4:	f023 0303 	bic.w	r3, r3, #3
 80115e8:	3304      	adds	r3, #4
 80115ea:	3715      	adds	r7, #21
 80115ec:	42bd      	cmp	r5, r7
 80115ee:	bf38      	it	cc
 80115f0:	2304      	movcc	r3, #4
 80115f2:	9301      	str	r3, [sp, #4]
 80115f4:	9b02      	ldr	r3, [sp, #8]
 80115f6:	9103      	str	r1, [sp, #12]
 80115f8:	428b      	cmp	r3, r1
 80115fa:	d80c      	bhi.n	8011616 <__multiply+0x9a>
 80115fc:	2e00      	cmp	r6, #0
 80115fe:	dd03      	ble.n	8011608 <__multiply+0x8c>
 8011600:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011604:	2b00      	cmp	r3, #0
 8011606:	d055      	beq.n	80116b4 <__multiply+0x138>
 8011608:	6106      	str	r6, [r0, #16]
 801160a:	b005      	add	sp, #20
 801160c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011610:	f843 2b04 	str.w	r2, [r3], #4
 8011614:	e7d9      	b.n	80115ca <__multiply+0x4e>
 8011616:	f8b1 a000 	ldrh.w	sl, [r1]
 801161a:	f1ba 0f00 	cmp.w	sl, #0
 801161e:	d01f      	beq.n	8011660 <__multiply+0xe4>
 8011620:	46c4      	mov	ip, r8
 8011622:	46a1      	mov	r9, r4
 8011624:	2700      	movs	r7, #0
 8011626:	f85c 2b04 	ldr.w	r2, [ip], #4
 801162a:	f8d9 3000 	ldr.w	r3, [r9]
 801162e:	fa1f fb82 	uxth.w	fp, r2
 8011632:	b29b      	uxth	r3, r3
 8011634:	fb0a 330b 	mla	r3, sl, fp, r3
 8011638:	443b      	add	r3, r7
 801163a:	f8d9 7000 	ldr.w	r7, [r9]
 801163e:	0c12      	lsrs	r2, r2, #16
 8011640:	0c3f      	lsrs	r7, r7, #16
 8011642:	fb0a 7202 	mla	r2, sl, r2, r7
 8011646:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801164a:	b29b      	uxth	r3, r3
 801164c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011650:	4565      	cmp	r5, ip
 8011652:	f849 3b04 	str.w	r3, [r9], #4
 8011656:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801165a:	d8e4      	bhi.n	8011626 <__multiply+0xaa>
 801165c:	9b01      	ldr	r3, [sp, #4]
 801165e:	50e7      	str	r7, [r4, r3]
 8011660:	9b03      	ldr	r3, [sp, #12]
 8011662:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011666:	3104      	adds	r1, #4
 8011668:	f1b9 0f00 	cmp.w	r9, #0
 801166c:	d020      	beq.n	80116b0 <__multiply+0x134>
 801166e:	6823      	ldr	r3, [r4, #0]
 8011670:	4647      	mov	r7, r8
 8011672:	46a4      	mov	ip, r4
 8011674:	f04f 0a00 	mov.w	sl, #0
 8011678:	f8b7 b000 	ldrh.w	fp, [r7]
 801167c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8011680:	fb09 220b 	mla	r2, r9, fp, r2
 8011684:	4452      	add	r2, sl
 8011686:	b29b      	uxth	r3, r3
 8011688:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801168c:	f84c 3b04 	str.w	r3, [ip], #4
 8011690:	f857 3b04 	ldr.w	r3, [r7], #4
 8011694:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011698:	f8bc 3000 	ldrh.w	r3, [ip]
 801169c:	fb09 330a 	mla	r3, r9, sl, r3
 80116a0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80116a4:	42bd      	cmp	r5, r7
 80116a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80116aa:	d8e5      	bhi.n	8011678 <__multiply+0xfc>
 80116ac:	9a01      	ldr	r2, [sp, #4]
 80116ae:	50a3      	str	r3, [r4, r2]
 80116b0:	3404      	adds	r4, #4
 80116b2:	e79f      	b.n	80115f4 <__multiply+0x78>
 80116b4:	3e01      	subs	r6, #1
 80116b6:	e7a1      	b.n	80115fc <__multiply+0x80>
 80116b8:	080292e0 	.word	0x080292e0
 80116bc:	080292f1 	.word	0x080292f1

080116c0 <__pow5mult>:
 80116c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116c4:	4615      	mov	r5, r2
 80116c6:	f012 0203 	ands.w	r2, r2, #3
 80116ca:	4607      	mov	r7, r0
 80116cc:	460e      	mov	r6, r1
 80116ce:	d007      	beq.n	80116e0 <__pow5mult+0x20>
 80116d0:	4c25      	ldr	r4, [pc, #148]	@ (8011768 <__pow5mult+0xa8>)
 80116d2:	3a01      	subs	r2, #1
 80116d4:	2300      	movs	r3, #0
 80116d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80116da:	f7ff fea7 	bl	801142c <__multadd>
 80116de:	4606      	mov	r6, r0
 80116e0:	10ad      	asrs	r5, r5, #2
 80116e2:	d03d      	beq.n	8011760 <__pow5mult+0xa0>
 80116e4:	69fc      	ldr	r4, [r7, #28]
 80116e6:	b97c      	cbnz	r4, 8011708 <__pow5mult+0x48>
 80116e8:	2010      	movs	r0, #16
 80116ea:	f7ff fd87 	bl	80111fc <malloc>
 80116ee:	4602      	mov	r2, r0
 80116f0:	61f8      	str	r0, [r7, #28]
 80116f2:	b928      	cbnz	r0, 8011700 <__pow5mult+0x40>
 80116f4:	4b1d      	ldr	r3, [pc, #116]	@ (801176c <__pow5mult+0xac>)
 80116f6:	481e      	ldr	r0, [pc, #120]	@ (8011770 <__pow5mult+0xb0>)
 80116f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80116fc:	f000 fdb2 	bl	8012264 <__assert_func>
 8011700:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011704:	6004      	str	r4, [r0, #0]
 8011706:	60c4      	str	r4, [r0, #12]
 8011708:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801170c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011710:	b94c      	cbnz	r4, 8011726 <__pow5mult+0x66>
 8011712:	f240 2171 	movw	r1, #625	@ 0x271
 8011716:	4638      	mov	r0, r7
 8011718:	f7ff ff1a 	bl	8011550 <__i2b>
 801171c:	2300      	movs	r3, #0
 801171e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011722:	4604      	mov	r4, r0
 8011724:	6003      	str	r3, [r0, #0]
 8011726:	f04f 0900 	mov.w	r9, #0
 801172a:	07eb      	lsls	r3, r5, #31
 801172c:	d50a      	bpl.n	8011744 <__pow5mult+0x84>
 801172e:	4631      	mov	r1, r6
 8011730:	4622      	mov	r2, r4
 8011732:	4638      	mov	r0, r7
 8011734:	f7ff ff22 	bl	801157c <__multiply>
 8011738:	4631      	mov	r1, r6
 801173a:	4680      	mov	r8, r0
 801173c:	4638      	mov	r0, r7
 801173e:	f7ff fe53 	bl	80113e8 <_Bfree>
 8011742:	4646      	mov	r6, r8
 8011744:	106d      	asrs	r5, r5, #1
 8011746:	d00b      	beq.n	8011760 <__pow5mult+0xa0>
 8011748:	6820      	ldr	r0, [r4, #0]
 801174a:	b938      	cbnz	r0, 801175c <__pow5mult+0x9c>
 801174c:	4622      	mov	r2, r4
 801174e:	4621      	mov	r1, r4
 8011750:	4638      	mov	r0, r7
 8011752:	f7ff ff13 	bl	801157c <__multiply>
 8011756:	6020      	str	r0, [r4, #0]
 8011758:	f8c0 9000 	str.w	r9, [r0]
 801175c:	4604      	mov	r4, r0
 801175e:	e7e4      	b.n	801172a <__pow5mult+0x6a>
 8011760:	4630      	mov	r0, r6
 8011762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011766:	bf00      	nop
 8011768:	080293a4 	.word	0x080293a4
 801176c:	08029271 	.word	0x08029271
 8011770:	080292f1 	.word	0x080292f1

08011774 <__lshift>:
 8011774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011778:	460c      	mov	r4, r1
 801177a:	6849      	ldr	r1, [r1, #4]
 801177c:	6923      	ldr	r3, [r4, #16]
 801177e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011782:	68a3      	ldr	r3, [r4, #8]
 8011784:	4607      	mov	r7, r0
 8011786:	4691      	mov	r9, r2
 8011788:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801178c:	f108 0601 	add.w	r6, r8, #1
 8011790:	42b3      	cmp	r3, r6
 8011792:	db0b      	blt.n	80117ac <__lshift+0x38>
 8011794:	4638      	mov	r0, r7
 8011796:	f7ff fde7 	bl	8011368 <_Balloc>
 801179a:	4605      	mov	r5, r0
 801179c:	b948      	cbnz	r0, 80117b2 <__lshift+0x3e>
 801179e:	4602      	mov	r2, r0
 80117a0:	4b28      	ldr	r3, [pc, #160]	@ (8011844 <__lshift+0xd0>)
 80117a2:	4829      	ldr	r0, [pc, #164]	@ (8011848 <__lshift+0xd4>)
 80117a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80117a8:	f000 fd5c 	bl	8012264 <__assert_func>
 80117ac:	3101      	adds	r1, #1
 80117ae:	005b      	lsls	r3, r3, #1
 80117b0:	e7ee      	b.n	8011790 <__lshift+0x1c>
 80117b2:	2300      	movs	r3, #0
 80117b4:	f100 0114 	add.w	r1, r0, #20
 80117b8:	f100 0210 	add.w	r2, r0, #16
 80117bc:	4618      	mov	r0, r3
 80117be:	4553      	cmp	r3, sl
 80117c0:	db33      	blt.n	801182a <__lshift+0xb6>
 80117c2:	6920      	ldr	r0, [r4, #16]
 80117c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80117c8:	f104 0314 	add.w	r3, r4, #20
 80117cc:	f019 091f 	ands.w	r9, r9, #31
 80117d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80117d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80117d8:	d02b      	beq.n	8011832 <__lshift+0xbe>
 80117da:	f1c9 0e20 	rsb	lr, r9, #32
 80117de:	468a      	mov	sl, r1
 80117e0:	2200      	movs	r2, #0
 80117e2:	6818      	ldr	r0, [r3, #0]
 80117e4:	fa00 f009 	lsl.w	r0, r0, r9
 80117e8:	4310      	orrs	r0, r2
 80117ea:	f84a 0b04 	str.w	r0, [sl], #4
 80117ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80117f2:	459c      	cmp	ip, r3
 80117f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80117f8:	d8f3      	bhi.n	80117e2 <__lshift+0x6e>
 80117fa:	ebac 0304 	sub.w	r3, ip, r4
 80117fe:	3b15      	subs	r3, #21
 8011800:	f023 0303 	bic.w	r3, r3, #3
 8011804:	3304      	adds	r3, #4
 8011806:	f104 0015 	add.w	r0, r4, #21
 801180a:	4560      	cmp	r0, ip
 801180c:	bf88      	it	hi
 801180e:	2304      	movhi	r3, #4
 8011810:	50ca      	str	r2, [r1, r3]
 8011812:	b10a      	cbz	r2, 8011818 <__lshift+0xa4>
 8011814:	f108 0602 	add.w	r6, r8, #2
 8011818:	3e01      	subs	r6, #1
 801181a:	4638      	mov	r0, r7
 801181c:	612e      	str	r6, [r5, #16]
 801181e:	4621      	mov	r1, r4
 8011820:	f7ff fde2 	bl	80113e8 <_Bfree>
 8011824:	4628      	mov	r0, r5
 8011826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801182a:	f842 0f04 	str.w	r0, [r2, #4]!
 801182e:	3301      	adds	r3, #1
 8011830:	e7c5      	b.n	80117be <__lshift+0x4a>
 8011832:	3904      	subs	r1, #4
 8011834:	f853 2b04 	ldr.w	r2, [r3], #4
 8011838:	f841 2f04 	str.w	r2, [r1, #4]!
 801183c:	459c      	cmp	ip, r3
 801183e:	d8f9      	bhi.n	8011834 <__lshift+0xc0>
 8011840:	e7ea      	b.n	8011818 <__lshift+0xa4>
 8011842:	bf00      	nop
 8011844:	080292e0 	.word	0x080292e0
 8011848:	080292f1 	.word	0x080292f1

0801184c <__mcmp>:
 801184c:	690a      	ldr	r2, [r1, #16]
 801184e:	4603      	mov	r3, r0
 8011850:	6900      	ldr	r0, [r0, #16]
 8011852:	1a80      	subs	r0, r0, r2
 8011854:	b530      	push	{r4, r5, lr}
 8011856:	d10e      	bne.n	8011876 <__mcmp+0x2a>
 8011858:	3314      	adds	r3, #20
 801185a:	3114      	adds	r1, #20
 801185c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011860:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011864:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011868:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801186c:	4295      	cmp	r5, r2
 801186e:	d003      	beq.n	8011878 <__mcmp+0x2c>
 8011870:	d205      	bcs.n	801187e <__mcmp+0x32>
 8011872:	f04f 30ff 	mov.w	r0, #4294967295
 8011876:	bd30      	pop	{r4, r5, pc}
 8011878:	42a3      	cmp	r3, r4
 801187a:	d3f3      	bcc.n	8011864 <__mcmp+0x18>
 801187c:	e7fb      	b.n	8011876 <__mcmp+0x2a>
 801187e:	2001      	movs	r0, #1
 8011880:	e7f9      	b.n	8011876 <__mcmp+0x2a>
	...

08011884 <__mdiff>:
 8011884:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011888:	4689      	mov	r9, r1
 801188a:	4606      	mov	r6, r0
 801188c:	4611      	mov	r1, r2
 801188e:	4648      	mov	r0, r9
 8011890:	4614      	mov	r4, r2
 8011892:	f7ff ffdb 	bl	801184c <__mcmp>
 8011896:	1e05      	subs	r5, r0, #0
 8011898:	d112      	bne.n	80118c0 <__mdiff+0x3c>
 801189a:	4629      	mov	r1, r5
 801189c:	4630      	mov	r0, r6
 801189e:	f7ff fd63 	bl	8011368 <_Balloc>
 80118a2:	4602      	mov	r2, r0
 80118a4:	b928      	cbnz	r0, 80118b2 <__mdiff+0x2e>
 80118a6:	4b3f      	ldr	r3, [pc, #252]	@ (80119a4 <__mdiff+0x120>)
 80118a8:	f240 2137 	movw	r1, #567	@ 0x237
 80118ac:	483e      	ldr	r0, [pc, #248]	@ (80119a8 <__mdiff+0x124>)
 80118ae:	f000 fcd9 	bl	8012264 <__assert_func>
 80118b2:	2301      	movs	r3, #1
 80118b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80118b8:	4610      	mov	r0, r2
 80118ba:	b003      	add	sp, #12
 80118bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118c0:	bfbc      	itt	lt
 80118c2:	464b      	movlt	r3, r9
 80118c4:	46a1      	movlt	r9, r4
 80118c6:	4630      	mov	r0, r6
 80118c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80118cc:	bfba      	itte	lt
 80118ce:	461c      	movlt	r4, r3
 80118d0:	2501      	movlt	r5, #1
 80118d2:	2500      	movge	r5, #0
 80118d4:	f7ff fd48 	bl	8011368 <_Balloc>
 80118d8:	4602      	mov	r2, r0
 80118da:	b918      	cbnz	r0, 80118e4 <__mdiff+0x60>
 80118dc:	4b31      	ldr	r3, [pc, #196]	@ (80119a4 <__mdiff+0x120>)
 80118de:	f240 2145 	movw	r1, #581	@ 0x245
 80118e2:	e7e3      	b.n	80118ac <__mdiff+0x28>
 80118e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80118e8:	6926      	ldr	r6, [r4, #16]
 80118ea:	60c5      	str	r5, [r0, #12]
 80118ec:	f109 0310 	add.w	r3, r9, #16
 80118f0:	f109 0514 	add.w	r5, r9, #20
 80118f4:	f104 0e14 	add.w	lr, r4, #20
 80118f8:	f100 0b14 	add.w	fp, r0, #20
 80118fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011900:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011904:	9301      	str	r3, [sp, #4]
 8011906:	46d9      	mov	r9, fp
 8011908:	f04f 0c00 	mov.w	ip, #0
 801190c:	9b01      	ldr	r3, [sp, #4]
 801190e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011912:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011916:	9301      	str	r3, [sp, #4]
 8011918:	fa1f f38a 	uxth.w	r3, sl
 801191c:	4619      	mov	r1, r3
 801191e:	b283      	uxth	r3, r0
 8011920:	1acb      	subs	r3, r1, r3
 8011922:	0c00      	lsrs	r0, r0, #16
 8011924:	4463      	add	r3, ip
 8011926:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801192a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801192e:	b29b      	uxth	r3, r3
 8011930:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011934:	4576      	cmp	r6, lr
 8011936:	f849 3b04 	str.w	r3, [r9], #4
 801193a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801193e:	d8e5      	bhi.n	801190c <__mdiff+0x88>
 8011940:	1b33      	subs	r3, r6, r4
 8011942:	3b15      	subs	r3, #21
 8011944:	f023 0303 	bic.w	r3, r3, #3
 8011948:	3415      	adds	r4, #21
 801194a:	3304      	adds	r3, #4
 801194c:	42a6      	cmp	r6, r4
 801194e:	bf38      	it	cc
 8011950:	2304      	movcc	r3, #4
 8011952:	441d      	add	r5, r3
 8011954:	445b      	add	r3, fp
 8011956:	461e      	mov	r6, r3
 8011958:	462c      	mov	r4, r5
 801195a:	4544      	cmp	r4, r8
 801195c:	d30e      	bcc.n	801197c <__mdiff+0xf8>
 801195e:	f108 0103 	add.w	r1, r8, #3
 8011962:	1b49      	subs	r1, r1, r5
 8011964:	f021 0103 	bic.w	r1, r1, #3
 8011968:	3d03      	subs	r5, #3
 801196a:	45a8      	cmp	r8, r5
 801196c:	bf38      	it	cc
 801196e:	2100      	movcc	r1, #0
 8011970:	440b      	add	r3, r1
 8011972:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011976:	b191      	cbz	r1, 801199e <__mdiff+0x11a>
 8011978:	6117      	str	r7, [r2, #16]
 801197a:	e79d      	b.n	80118b8 <__mdiff+0x34>
 801197c:	f854 1b04 	ldr.w	r1, [r4], #4
 8011980:	46e6      	mov	lr, ip
 8011982:	0c08      	lsrs	r0, r1, #16
 8011984:	fa1c fc81 	uxtah	ip, ip, r1
 8011988:	4471      	add	r1, lr
 801198a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801198e:	b289      	uxth	r1, r1
 8011990:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011994:	f846 1b04 	str.w	r1, [r6], #4
 8011998:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801199c:	e7dd      	b.n	801195a <__mdiff+0xd6>
 801199e:	3f01      	subs	r7, #1
 80119a0:	e7e7      	b.n	8011972 <__mdiff+0xee>
 80119a2:	bf00      	nop
 80119a4:	080292e0 	.word	0x080292e0
 80119a8:	080292f1 	.word	0x080292f1

080119ac <__d2b>:
 80119ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80119b0:	460f      	mov	r7, r1
 80119b2:	2101      	movs	r1, #1
 80119b4:	ec59 8b10 	vmov	r8, r9, d0
 80119b8:	4616      	mov	r6, r2
 80119ba:	f7ff fcd5 	bl	8011368 <_Balloc>
 80119be:	4604      	mov	r4, r0
 80119c0:	b930      	cbnz	r0, 80119d0 <__d2b+0x24>
 80119c2:	4602      	mov	r2, r0
 80119c4:	4b23      	ldr	r3, [pc, #140]	@ (8011a54 <__d2b+0xa8>)
 80119c6:	4824      	ldr	r0, [pc, #144]	@ (8011a58 <__d2b+0xac>)
 80119c8:	f240 310f 	movw	r1, #783	@ 0x30f
 80119cc:	f000 fc4a 	bl	8012264 <__assert_func>
 80119d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80119d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80119d8:	b10d      	cbz	r5, 80119de <__d2b+0x32>
 80119da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80119de:	9301      	str	r3, [sp, #4]
 80119e0:	f1b8 0300 	subs.w	r3, r8, #0
 80119e4:	d023      	beq.n	8011a2e <__d2b+0x82>
 80119e6:	4668      	mov	r0, sp
 80119e8:	9300      	str	r3, [sp, #0]
 80119ea:	f7ff fd84 	bl	80114f6 <__lo0bits>
 80119ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80119f2:	b1d0      	cbz	r0, 8011a2a <__d2b+0x7e>
 80119f4:	f1c0 0320 	rsb	r3, r0, #32
 80119f8:	fa02 f303 	lsl.w	r3, r2, r3
 80119fc:	430b      	orrs	r3, r1
 80119fe:	40c2      	lsrs	r2, r0
 8011a00:	6163      	str	r3, [r4, #20]
 8011a02:	9201      	str	r2, [sp, #4]
 8011a04:	9b01      	ldr	r3, [sp, #4]
 8011a06:	61a3      	str	r3, [r4, #24]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	bf0c      	ite	eq
 8011a0c:	2201      	moveq	r2, #1
 8011a0e:	2202      	movne	r2, #2
 8011a10:	6122      	str	r2, [r4, #16]
 8011a12:	b1a5      	cbz	r5, 8011a3e <__d2b+0x92>
 8011a14:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011a18:	4405      	add	r5, r0
 8011a1a:	603d      	str	r5, [r7, #0]
 8011a1c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011a20:	6030      	str	r0, [r6, #0]
 8011a22:	4620      	mov	r0, r4
 8011a24:	b003      	add	sp, #12
 8011a26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a2a:	6161      	str	r1, [r4, #20]
 8011a2c:	e7ea      	b.n	8011a04 <__d2b+0x58>
 8011a2e:	a801      	add	r0, sp, #4
 8011a30:	f7ff fd61 	bl	80114f6 <__lo0bits>
 8011a34:	9b01      	ldr	r3, [sp, #4]
 8011a36:	6163      	str	r3, [r4, #20]
 8011a38:	3020      	adds	r0, #32
 8011a3a:	2201      	movs	r2, #1
 8011a3c:	e7e8      	b.n	8011a10 <__d2b+0x64>
 8011a3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011a42:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011a46:	6038      	str	r0, [r7, #0]
 8011a48:	6918      	ldr	r0, [r3, #16]
 8011a4a:	f7ff fd35 	bl	80114b8 <__hi0bits>
 8011a4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011a52:	e7e5      	b.n	8011a20 <__d2b+0x74>
 8011a54:	080292e0 	.word	0x080292e0
 8011a58:	080292f1 	.word	0x080292f1

08011a5c <__ssputs_r>:
 8011a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a60:	688e      	ldr	r6, [r1, #8]
 8011a62:	461f      	mov	r7, r3
 8011a64:	42be      	cmp	r6, r7
 8011a66:	680b      	ldr	r3, [r1, #0]
 8011a68:	4682      	mov	sl, r0
 8011a6a:	460c      	mov	r4, r1
 8011a6c:	4690      	mov	r8, r2
 8011a6e:	d82d      	bhi.n	8011acc <__ssputs_r+0x70>
 8011a70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011a74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011a78:	d026      	beq.n	8011ac8 <__ssputs_r+0x6c>
 8011a7a:	6965      	ldr	r5, [r4, #20]
 8011a7c:	6909      	ldr	r1, [r1, #16]
 8011a7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011a82:	eba3 0901 	sub.w	r9, r3, r1
 8011a86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011a8a:	1c7b      	adds	r3, r7, #1
 8011a8c:	444b      	add	r3, r9
 8011a8e:	106d      	asrs	r5, r5, #1
 8011a90:	429d      	cmp	r5, r3
 8011a92:	bf38      	it	cc
 8011a94:	461d      	movcc	r5, r3
 8011a96:	0553      	lsls	r3, r2, #21
 8011a98:	d527      	bpl.n	8011aea <__ssputs_r+0x8e>
 8011a9a:	4629      	mov	r1, r5
 8011a9c:	f7ff fbd8 	bl	8011250 <_malloc_r>
 8011aa0:	4606      	mov	r6, r0
 8011aa2:	b360      	cbz	r0, 8011afe <__ssputs_r+0xa2>
 8011aa4:	6921      	ldr	r1, [r4, #16]
 8011aa6:	464a      	mov	r2, r9
 8011aa8:	f7fe fcf5 	bl	8010496 <memcpy>
 8011aac:	89a3      	ldrh	r3, [r4, #12]
 8011aae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011ab6:	81a3      	strh	r3, [r4, #12]
 8011ab8:	6126      	str	r6, [r4, #16]
 8011aba:	6165      	str	r5, [r4, #20]
 8011abc:	444e      	add	r6, r9
 8011abe:	eba5 0509 	sub.w	r5, r5, r9
 8011ac2:	6026      	str	r6, [r4, #0]
 8011ac4:	60a5      	str	r5, [r4, #8]
 8011ac6:	463e      	mov	r6, r7
 8011ac8:	42be      	cmp	r6, r7
 8011aca:	d900      	bls.n	8011ace <__ssputs_r+0x72>
 8011acc:	463e      	mov	r6, r7
 8011ace:	6820      	ldr	r0, [r4, #0]
 8011ad0:	4632      	mov	r2, r6
 8011ad2:	4641      	mov	r1, r8
 8011ad4:	f000 fb9c 	bl	8012210 <memmove>
 8011ad8:	68a3      	ldr	r3, [r4, #8]
 8011ada:	1b9b      	subs	r3, r3, r6
 8011adc:	60a3      	str	r3, [r4, #8]
 8011ade:	6823      	ldr	r3, [r4, #0]
 8011ae0:	4433      	add	r3, r6
 8011ae2:	6023      	str	r3, [r4, #0]
 8011ae4:	2000      	movs	r0, #0
 8011ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011aea:	462a      	mov	r2, r5
 8011aec:	f000 fbfe 	bl	80122ec <_realloc_r>
 8011af0:	4606      	mov	r6, r0
 8011af2:	2800      	cmp	r0, #0
 8011af4:	d1e0      	bne.n	8011ab8 <__ssputs_r+0x5c>
 8011af6:	6921      	ldr	r1, [r4, #16]
 8011af8:	4650      	mov	r0, sl
 8011afa:	f7ff fb35 	bl	8011168 <_free_r>
 8011afe:	230c      	movs	r3, #12
 8011b00:	f8ca 3000 	str.w	r3, [sl]
 8011b04:	89a3      	ldrh	r3, [r4, #12]
 8011b06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b0a:	81a3      	strh	r3, [r4, #12]
 8011b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b10:	e7e9      	b.n	8011ae6 <__ssputs_r+0x8a>
	...

08011b14 <_svfiprintf_r>:
 8011b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b18:	4698      	mov	r8, r3
 8011b1a:	898b      	ldrh	r3, [r1, #12]
 8011b1c:	061b      	lsls	r3, r3, #24
 8011b1e:	b09d      	sub	sp, #116	@ 0x74
 8011b20:	4607      	mov	r7, r0
 8011b22:	460d      	mov	r5, r1
 8011b24:	4614      	mov	r4, r2
 8011b26:	d510      	bpl.n	8011b4a <_svfiprintf_r+0x36>
 8011b28:	690b      	ldr	r3, [r1, #16]
 8011b2a:	b973      	cbnz	r3, 8011b4a <_svfiprintf_r+0x36>
 8011b2c:	2140      	movs	r1, #64	@ 0x40
 8011b2e:	f7ff fb8f 	bl	8011250 <_malloc_r>
 8011b32:	6028      	str	r0, [r5, #0]
 8011b34:	6128      	str	r0, [r5, #16]
 8011b36:	b930      	cbnz	r0, 8011b46 <_svfiprintf_r+0x32>
 8011b38:	230c      	movs	r3, #12
 8011b3a:	603b      	str	r3, [r7, #0]
 8011b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b40:	b01d      	add	sp, #116	@ 0x74
 8011b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b46:	2340      	movs	r3, #64	@ 0x40
 8011b48:	616b      	str	r3, [r5, #20]
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b4e:	2320      	movs	r3, #32
 8011b50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011b54:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b58:	2330      	movs	r3, #48	@ 0x30
 8011b5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011cf8 <_svfiprintf_r+0x1e4>
 8011b5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011b62:	f04f 0901 	mov.w	r9, #1
 8011b66:	4623      	mov	r3, r4
 8011b68:	469a      	mov	sl, r3
 8011b6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b6e:	b10a      	cbz	r2, 8011b74 <_svfiprintf_r+0x60>
 8011b70:	2a25      	cmp	r2, #37	@ 0x25
 8011b72:	d1f9      	bne.n	8011b68 <_svfiprintf_r+0x54>
 8011b74:	ebba 0b04 	subs.w	fp, sl, r4
 8011b78:	d00b      	beq.n	8011b92 <_svfiprintf_r+0x7e>
 8011b7a:	465b      	mov	r3, fp
 8011b7c:	4622      	mov	r2, r4
 8011b7e:	4629      	mov	r1, r5
 8011b80:	4638      	mov	r0, r7
 8011b82:	f7ff ff6b 	bl	8011a5c <__ssputs_r>
 8011b86:	3001      	adds	r0, #1
 8011b88:	f000 80a7 	beq.w	8011cda <_svfiprintf_r+0x1c6>
 8011b8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b8e:	445a      	add	r2, fp
 8011b90:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b92:	f89a 3000 	ldrb.w	r3, [sl]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	f000 809f 	beq.w	8011cda <_svfiprintf_r+0x1c6>
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8011ba2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ba6:	f10a 0a01 	add.w	sl, sl, #1
 8011baa:	9304      	str	r3, [sp, #16]
 8011bac:	9307      	str	r3, [sp, #28]
 8011bae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011bb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8011bb4:	4654      	mov	r4, sl
 8011bb6:	2205      	movs	r2, #5
 8011bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bbc:	484e      	ldr	r0, [pc, #312]	@ (8011cf8 <_svfiprintf_r+0x1e4>)
 8011bbe:	f7ee fadf 	bl	8000180 <memchr>
 8011bc2:	9a04      	ldr	r2, [sp, #16]
 8011bc4:	b9d8      	cbnz	r0, 8011bfe <_svfiprintf_r+0xea>
 8011bc6:	06d0      	lsls	r0, r2, #27
 8011bc8:	bf44      	itt	mi
 8011bca:	2320      	movmi	r3, #32
 8011bcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011bd0:	0711      	lsls	r1, r2, #28
 8011bd2:	bf44      	itt	mi
 8011bd4:	232b      	movmi	r3, #43	@ 0x2b
 8011bd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011bda:	f89a 3000 	ldrb.w	r3, [sl]
 8011bde:	2b2a      	cmp	r3, #42	@ 0x2a
 8011be0:	d015      	beq.n	8011c0e <_svfiprintf_r+0xfa>
 8011be2:	9a07      	ldr	r2, [sp, #28]
 8011be4:	4654      	mov	r4, sl
 8011be6:	2000      	movs	r0, #0
 8011be8:	f04f 0c0a 	mov.w	ip, #10
 8011bec:	4621      	mov	r1, r4
 8011bee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011bf2:	3b30      	subs	r3, #48	@ 0x30
 8011bf4:	2b09      	cmp	r3, #9
 8011bf6:	d94b      	bls.n	8011c90 <_svfiprintf_r+0x17c>
 8011bf8:	b1b0      	cbz	r0, 8011c28 <_svfiprintf_r+0x114>
 8011bfa:	9207      	str	r2, [sp, #28]
 8011bfc:	e014      	b.n	8011c28 <_svfiprintf_r+0x114>
 8011bfe:	eba0 0308 	sub.w	r3, r0, r8
 8011c02:	fa09 f303 	lsl.w	r3, r9, r3
 8011c06:	4313      	orrs	r3, r2
 8011c08:	9304      	str	r3, [sp, #16]
 8011c0a:	46a2      	mov	sl, r4
 8011c0c:	e7d2      	b.n	8011bb4 <_svfiprintf_r+0xa0>
 8011c0e:	9b03      	ldr	r3, [sp, #12]
 8011c10:	1d19      	adds	r1, r3, #4
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	9103      	str	r1, [sp, #12]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	bfbb      	ittet	lt
 8011c1a:	425b      	neglt	r3, r3
 8011c1c:	f042 0202 	orrlt.w	r2, r2, #2
 8011c20:	9307      	strge	r3, [sp, #28]
 8011c22:	9307      	strlt	r3, [sp, #28]
 8011c24:	bfb8      	it	lt
 8011c26:	9204      	strlt	r2, [sp, #16]
 8011c28:	7823      	ldrb	r3, [r4, #0]
 8011c2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8011c2c:	d10a      	bne.n	8011c44 <_svfiprintf_r+0x130>
 8011c2e:	7863      	ldrb	r3, [r4, #1]
 8011c30:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c32:	d132      	bne.n	8011c9a <_svfiprintf_r+0x186>
 8011c34:	9b03      	ldr	r3, [sp, #12]
 8011c36:	1d1a      	adds	r2, r3, #4
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	9203      	str	r2, [sp, #12]
 8011c3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011c40:	3402      	adds	r4, #2
 8011c42:	9305      	str	r3, [sp, #20]
 8011c44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011d08 <_svfiprintf_r+0x1f4>
 8011c48:	7821      	ldrb	r1, [r4, #0]
 8011c4a:	2203      	movs	r2, #3
 8011c4c:	4650      	mov	r0, sl
 8011c4e:	f7ee fa97 	bl	8000180 <memchr>
 8011c52:	b138      	cbz	r0, 8011c64 <_svfiprintf_r+0x150>
 8011c54:	9b04      	ldr	r3, [sp, #16]
 8011c56:	eba0 000a 	sub.w	r0, r0, sl
 8011c5a:	2240      	movs	r2, #64	@ 0x40
 8011c5c:	4082      	lsls	r2, r0
 8011c5e:	4313      	orrs	r3, r2
 8011c60:	3401      	adds	r4, #1
 8011c62:	9304      	str	r3, [sp, #16]
 8011c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c68:	4824      	ldr	r0, [pc, #144]	@ (8011cfc <_svfiprintf_r+0x1e8>)
 8011c6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011c6e:	2206      	movs	r2, #6
 8011c70:	f7ee fa86 	bl	8000180 <memchr>
 8011c74:	2800      	cmp	r0, #0
 8011c76:	d036      	beq.n	8011ce6 <_svfiprintf_r+0x1d2>
 8011c78:	4b21      	ldr	r3, [pc, #132]	@ (8011d00 <_svfiprintf_r+0x1ec>)
 8011c7a:	bb1b      	cbnz	r3, 8011cc4 <_svfiprintf_r+0x1b0>
 8011c7c:	9b03      	ldr	r3, [sp, #12]
 8011c7e:	3307      	adds	r3, #7
 8011c80:	f023 0307 	bic.w	r3, r3, #7
 8011c84:	3308      	adds	r3, #8
 8011c86:	9303      	str	r3, [sp, #12]
 8011c88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c8a:	4433      	add	r3, r6
 8011c8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c8e:	e76a      	b.n	8011b66 <_svfiprintf_r+0x52>
 8011c90:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c94:	460c      	mov	r4, r1
 8011c96:	2001      	movs	r0, #1
 8011c98:	e7a8      	b.n	8011bec <_svfiprintf_r+0xd8>
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	3401      	adds	r4, #1
 8011c9e:	9305      	str	r3, [sp, #20]
 8011ca0:	4619      	mov	r1, r3
 8011ca2:	f04f 0c0a 	mov.w	ip, #10
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011cac:	3a30      	subs	r2, #48	@ 0x30
 8011cae:	2a09      	cmp	r2, #9
 8011cb0:	d903      	bls.n	8011cba <_svfiprintf_r+0x1a6>
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d0c6      	beq.n	8011c44 <_svfiprintf_r+0x130>
 8011cb6:	9105      	str	r1, [sp, #20]
 8011cb8:	e7c4      	b.n	8011c44 <_svfiprintf_r+0x130>
 8011cba:	fb0c 2101 	mla	r1, ip, r1, r2
 8011cbe:	4604      	mov	r4, r0
 8011cc0:	2301      	movs	r3, #1
 8011cc2:	e7f0      	b.n	8011ca6 <_svfiprintf_r+0x192>
 8011cc4:	ab03      	add	r3, sp, #12
 8011cc6:	9300      	str	r3, [sp, #0]
 8011cc8:	462a      	mov	r2, r5
 8011cca:	4b0e      	ldr	r3, [pc, #56]	@ (8011d04 <_svfiprintf_r+0x1f0>)
 8011ccc:	a904      	add	r1, sp, #16
 8011cce:	4638      	mov	r0, r7
 8011cd0:	f7fd fe70 	bl	800f9b4 <_printf_float>
 8011cd4:	1c42      	adds	r2, r0, #1
 8011cd6:	4606      	mov	r6, r0
 8011cd8:	d1d6      	bne.n	8011c88 <_svfiprintf_r+0x174>
 8011cda:	89ab      	ldrh	r3, [r5, #12]
 8011cdc:	065b      	lsls	r3, r3, #25
 8011cde:	f53f af2d 	bmi.w	8011b3c <_svfiprintf_r+0x28>
 8011ce2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011ce4:	e72c      	b.n	8011b40 <_svfiprintf_r+0x2c>
 8011ce6:	ab03      	add	r3, sp, #12
 8011ce8:	9300      	str	r3, [sp, #0]
 8011cea:	462a      	mov	r2, r5
 8011cec:	4b05      	ldr	r3, [pc, #20]	@ (8011d04 <_svfiprintf_r+0x1f0>)
 8011cee:	a904      	add	r1, sp, #16
 8011cf0:	4638      	mov	r0, r7
 8011cf2:	f7fe f8f7 	bl	800fee4 <_printf_i>
 8011cf6:	e7ed      	b.n	8011cd4 <_svfiprintf_r+0x1c0>
 8011cf8:	0802934a 	.word	0x0802934a
 8011cfc:	08029354 	.word	0x08029354
 8011d00:	0800f9b5 	.word	0x0800f9b5
 8011d04:	08011a5d 	.word	0x08011a5d
 8011d08:	08029350 	.word	0x08029350

08011d0c <__sfputc_r>:
 8011d0c:	6893      	ldr	r3, [r2, #8]
 8011d0e:	3b01      	subs	r3, #1
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	b410      	push	{r4}
 8011d14:	6093      	str	r3, [r2, #8]
 8011d16:	da08      	bge.n	8011d2a <__sfputc_r+0x1e>
 8011d18:	6994      	ldr	r4, [r2, #24]
 8011d1a:	42a3      	cmp	r3, r4
 8011d1c:	db01      	blt.n	8011d22 <__sfputc_r+0x16>
 8011d1e:	290a      	cmp	r1, #10
 8011d20:	d103      	bne.n	8011d2a <__sfputc_r+0x1e>
 8011d22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d26:	f000 b9df 	b.w	80120e8 <__swbuf_r>
 8011d2a:	6813      	ldr	r3, [r2, #0]
 8011d2c:	1c58      	adds	r0, r3, #1
 8011d2e:	6010      	str	r0, [r2, #0]
 8011d30:	7019      	strb	r1, [r3, #0]
 8011d32:	4608      	mov	r0, r1
 8011d34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d38:	4770      	bx	lr

08011d3a <__sfputs_r>:
 8011d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d3c:	4606      	mov	r6, r0
 8011d3e:	460f      	mov	r7, r1
 8011d40:	4614      	mov	r4, r2
 8011d42:	18d5      	adds	r5, r2, r3
 8011d44:	42ac      	cmp	r4, r5
 8011d46:	d101      	bne.n	8011d4c <__sfputs_r+0x12>
 8011d48:	2000      	movs	r0, #0
 8011d4a:	e007      	b.n	8011d5c <__sfputs_r+0x22>
 8011d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d50:	463a      	mov	r2, r7
 8011d52:	4630      	mov	r0, r6
 8011d54:	f7ff ffda 	bl	8011d0c <__sfputc_r>
 8011d58:	1c43      	adds	r3, r0, #1
 8011d5a:	d1f3      	bne.n	8011d44 <__sfputs_r+0xa>
 8011d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011d60 <_vfiprintf_r>:
 8011d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d64:	460d      	mov	r5, r1
 8011d66:	b09d      	sub	sp, #116	@ 0x74
 8011d68:	4614      	mov	r4, r2
 8011d6a:	4698      	mov	r8, r3
 8011d6c:	4606      	mov	r6, r0
 8011d6e:	b118      	cbz	r0, 8011d78 <_vfiprintf_r+0x18>
 8011d70:	6a03      	ldr	r3, [r0, #32]
 8011d72:	b90b      	cbnz	r3, 8011d78 <_vfiprintf_r+0x18>
 8011d74:	f7fe fa60 	bl	8010238 <__sinit>
 8011d78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011d7a:	07d9      	lsls	r1, r3, #31
 8011d7c:	d405      	bmi.n	8011d8a <_vfiprintf_r+0x2a>
 8011d7e:	89ab      	ldrh	r3, [r5, #12]
 8011d80:	059a      	lsls	r2, r3, #22
 8011d82:	d402      	bmi.n	8011d8a <_vfiprintf_r+0x2a>
 8011d84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011d86:	f7fe fb84 	bl	8010492 <__retarget_lock_acquire_recursive>
 8011d8a:	89ab      	ldrh	r3, [r5, #12]
 8011d8c:	071b      	lsls	r3, r3, #28
 8011d8e:	d501      	bpl.n	8011d94 <_vfiprintf_r+0x34>
 8011d90:	692b      	ldr	r3, [r5, #16]
 8011d92:	b99b      	cbnz	r3, 8011dbc <_vfiprintf_r+0x5c>
 8011d94:	4629      	mov	r1, r5
 8011d96:	4630      	mov	r0, r6
 8011d98:	f000 f9e4 	bl	8012164 <__swsetup_r>
 8011d9c:	b170      	cbz	r0, 8011dbc <_vfiprintf_r+0x5c>
 8011d9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011da0:	07dc      	lsls	r4, r3, #31
 8011da2:	d504      	bpl.n	8011dae <_vfiprintf_r+0x4e>
 8011da4:	f04f 30ff 	mov.w	r0, #4294967295
 8011da8:	b01d      	add	sp, #116	@ 0x74
 8011daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dae:	89ab      	ldrh	r3, [r5, #12]
 8011db0:	0598      	lsls	r0, r3, #22
 8011db2:	d4f7      	bmi.n	8011da4 <_vfiprintf_r+0x44>
 8011db4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011db6:	f7fe fb6d 	bl	8010494 <__retarget_lock_release_recursive>
 8011dba:	e7f3      	b.n	8011da4 <_vfiprintf_r+0x44>
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8011dc0:	2320      	movs	r3, #32
 8011dc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011dc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8011dca:	2330      	movs	r3, #48	@ 0x30
 8011dcc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011f7c <_vfiprintf_r+0x21c>
 8011dd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011dd4:	f04f 0901 	mov.w	r9, #1
 8011dd8:	4623      	mov	r3, r4
 8011dda:	469a      	mov	sl, r3
 8011ddc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011de0:	b10a      	cbz	r2, 8011de6 <_vfiprintf_r+0x86>
 8011de2:	2a25      	cmp	r2, #37	@ 0x25
 8011de4:	d1f9      	bne.n	8011dda <_vfiprintf_r+0x7a>
 8011de6:	ebba 0b04 	subs.w	fp, sl, r4
 8011dea:	d00b      	beq.n	8011e04 <_vfiprintf_r+0xa4>
 8011dec:	465b      	mov	r3, fp
 8011dee:	4622      	mov	r2, r4
 8011df0:	4629      	mov	r1, r5
 8011df2:	4630      	mov	r0, r6
 8011df4:	f7ff ffa1 	bl	8011d3a <__sfputs_r>
 8011df8:	3001      	adds	r0, #1
 8011dfa:	f000 80a7 	beq.w	8011f4c <_vfiprintf_r+0x1ec>
 8011dfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011e00:	445a      	add	r2, fp
 8011e02:	9209      	str	r2, [sp, #36]	@ 0x24
 8011e04:	f89a 3000 	ldrb.w	r3, [sl]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	f000 809f 	beq.w	8011f4c <_vfiprintf_r+0x1ec>
 8011e0e:	2300      	movs	r3, #0
 8011e10:	f04f 32ff 	mov.w	r2, #4294967295
 8011e14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e18:	f10a 0a01 	add.w	sl, sl, #1
 8011e1c:	9304      	str	r3, [sp, #16]
 8011e1e:	9307      	str	r3, [sp, #28]
 8011e20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011e24:	931a      	str	r3, [sp, #104]	@ 0x68
 8011e26:	4654      	mov	r4, sl
 8011e28:	2205      	movs	r2, #5
 8011e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e2e:	4853      	ldr	r0, [pc, #332]	@ (8011f7c <_vfiprintf_r+0x21c>)
 8011e30:	f7ee f9a6 	bl	8000180 <memchr>
 8011e34:	9a04      	ldr	r2, [sp, #16]
 8011e36:	b9d8      	cbnz	r0, 8011e70 <_vfiprintf_r+0x110>
 8011e38:	06d1      	lsls	r1, r2, #27
 8011e3a:	bf44      	itt	mi
 8011e3c:	2320      	movmi	r3, #32
 8011e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e42:	0713      	lsls	r3, r2, #28
 8011e44:	bf44      	itt	mi
 8011e46:	232b      	movmi	r3, #43	@ 0x2b
 8011e48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8011e50:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e52:	d015      	beq.n	8011e80 <_vfiprintf_r+0x120>
 8011e54:	9a07      	ldr	r2, [sp, #28]
 8011e56:	4654      	mov	r4, sl
 8011e58:	2000      	movs	r0, #0
 8011e5a:	f04f 0c0a 	mov.w	ip, #10
 8011e5e:	4621      	mov	r1, r4
 8011e60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e64:	3b30      	subs	r3, #48	@ 0x30
 8011e66:	2b09      	cmp	r3, #9
 8011e68:	d94b      	bls.n	8011f02 <_vfiprintf_r+0x1a2>
 8011e6a:	b1b0      	cbz	r0, 8011e9a <_vfiprintf_r+0x13a>
 8011e6c:	9207      	str	r2, [sp, #28]
 8011e6e:	e014      	b.n	8011e9a <_vfiprintf_r+0x13a>
 8011e70:	eba0 0308 	sub.w	r3, r0, r8
 8011e74:	fa09 f303 	lsl.w	r3, r9, r3
 8011e78:	4313      	orrs	r3, r2
 8011e7a:	9304      	str	r3, [sp, #16]
 8011e7c:	46a2      	mov	sl, r4
 8011e7e:	e7d2      	b.n	8011e26 <_vfiprintf_r+0xc6>
 8011e80:	9b03      	ldr	r3, [sp, #12]
 8011e82:	1d19      	adds	r1, r3, #4
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	9103      	str	r1, [sp, #12]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	bfbb      	ittet	lt
 8011e8c:	425b      	neglt	r3, r3
 8011e8e:	f042 0202 	orrlt.w	r2, r2, #2
 8011e92:	9307      	strge	r3, [sp, #28]
 8011e94:	9307      	strlt	r3, [sp, #28]
 8011e96:	bfb8      	it	lt
 8011e98:	9204      	strlt	r2, [sp, #16]
 8011e9a:	7823      	ldrb	r3, [r4, #0]
 8011e9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8011e9e:	d10a      	bne.n	8011eb6 <_vfiprintf_r+0x156>
 8011ea0:	7863      	ldrb	r3, [r4, #1]
 8011ea2:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ea4:	d132      	bne.n	8011f0c <_vfiprintf_r+0x1ac>
 8011ea6:	9b03      	ldr	r3, [sp, #12]
 8011ea8:	1d1a      	adds	r2, r3, #4
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	9203      	str	r2, [sp, #12]
 8011eae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011eb2:	3402      	adds	r4, #2
 8011eb4:	9305      	str	r3, [sp, #20]
 8011eb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011f8c <_vfiprintf_r+0x22c>
 8011eba:	7821      	ldrb	r1, [r4, #0]
 8011ebc:	2203      	movs	r2, #3
 8011ebe:	4650      	mov	r0, sl
 8011ec0:	f7ee f95e 	bl	8000180 <memchr>
 8011ec4:	b138      	cbz	r0, 8011ed6 <_vfiprintf_r+0x176>
 8011ec6:	9b04      	ldr	r3, [sp, #16]
 8011ec8:	eba0 000a 	sub.w	r0, r0, sl
 8011ecc:	2240      	movs	r2, #64	@ 0x40
 8011ece:	4082      	lsls	r2, r0
 8011ed0:	4313      	orrs	r3, r2
 8011ed2:	3401      	adds	r4, #1
 8011ed4:	9304      	str	r3, [sp, #16]
 8011ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011eda:	4829      	ldr	r0, [pc, #164]	@ (8011f80 <_vfiprintf_r+0x220>)
 8011edc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011ee0:	2206      	movs	r2, #6
 8011ee2:	f7ee f94d 	bl	8000180 <memchr>
 8011ee6:	2800      	cmp	r0, #0
 8011ee8:	d03f      	beq.n	8011f6a <_vfiprintf_r+0x20a>
 8011eea:	4b26      	ldr	r3, [pc, #152]	@ (8011f84 <_vfiprintf_r+0x224>)
 8011eec:	bb1b      	cbnz	r3, 8011f36 <_vfiprintf_r+0x1d6>
 8011eee:	9b03      	ldr	r3, [sp, #12]
 8011ef0:	3307      	adds	r3, #7
 8011ef2:	f023 0307 	bic.w	r3, r3, #7
 8011ef6:	3308      	adds	r3, #8
 8011ef8:	9303      	str	r3, [sp, #12]
 8011efa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011efc:	443b      	add	r3, r7
 8011efe:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f00:	e76a      	b.n	8011dd8 <_vfiprintf_r+0x78>
 8011f02:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f06:	460c      	mov	r4, r1
 8011f08:	2001      	movs	r0, #1
 8011f0a:	e7a8      	b.n	8011e5e <_vfiprintf_r+0xfe>
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	3401      	adds	r4, #1
 8011f10:	9305      	str	r3, [sp, #20]
 8011f12:	4619      	mov	r1, r3
 8011f14:	f04f 0c0a 	mov.w	ip, #10
 8011f18:	4620      	mov	r0, r4
 8011f1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f1e:	3a30      	subs	r2, #48	@ 0x30
 8011f20:	2a09      	cmp	r2, #9
 8011f22:	d903      	bls.n	8011f2c <_vfiprintf_r+0x1cc>
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d0c6      	beq.n	8011eb6 <_vfiprintf_r+0x156>
 8011f28:	9105      	str	r1, [sp, #20]
 8011f2a:	e7c4      	b.n	8011eb6 <_vfiprintf_r+0x156>
 8011f2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f30:	4604      	mov	r4, r0
 8011f32:	2301      	movs	r3, #1
 8011f34:	e7f0      	b.n	8011f18 <_vfiprintf_r+0x1b8>
 8011f36:	ab03      	add	r3, sp, #12
 8011f38:	9300      	str	r3, [sp, #0]
 8011f3a:	462a      	mov	r2, r5
 8011f3c:	4b12      	ldr	r3, [pc, #72]	@ (8011f88 <_vfiprintf_r+0x228>)
 8011f3e:	a904      	add	r1, sp, #16
 8011f40:	4630      	mov	r0, r6
 8011f42:	f7fd fd37 	bl	800f9b4 <_printf_float>
 8011f46:	4607      	mov	r7, r0
 8011f48:	1c78      	adds	r0, r7, #1
 8011f4a:	d1d6      	bne.n	8011efa <_vfiprintf_r+0x19a>
 8011f4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011f4e:	07d9      	lsls	r1, r3, #31
 8011f50:	d405      	bmi.n	8011f5e <_vfiprintf_r+0x1fe>
 8011f52:	89ab      	ldrh	r3, [r5, #12]
 8011f54:	059a      	lsls	r2, r3, #22
 8011f56:	d402      	bmi.n	8011f5e <_vfiprintf_r+0x1fe>
 8011f58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011f5a:	f7fe fa9b 	bl	8010494 <__retarget_lock_release_recursive>
 8011f5e:	89ab      	ldrh	r3, [r5, #12]
 8011f60:	065b      	lsls	r3, r3, #25
 8011f62:	f53f af1f 	bmi.w	8011da4 <_vfiprintf_r+0x44>
 8011f66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011f68:	e71e      	b.n	8011da8 <_vfiprintf_r+0x48>
 8011f6a:	ab03      	add	r3, sp, #12
 8011f6c:	9300      	str	r3, [sp, #0]
 8011f6e:	462a      	mov	r2, r5
 8011f70:	4b05      	ldr	r3, [pc, #20]	@ (8011f88 <_vfiprintf_r+0x228>)
 8011f72:	a904      	add	r1, sp, #16
 8011f74:	4630      	mov	r0, r6
 8011f76:	f7fd ffb5 	bl	800fee4 <_printf_i>
 8011f7a:	e7e4      	b.n	8011f46 <_vfiprintf_r+0x1e6>
 8011f7c:	0802934a 	.word	0x0802934a
 8011f80:	08029354 	.word	0x08029354
 8011f84:	0800f9b5 	.word	0x0800f9b5
 8011f88:	08011d3b 	.word	0x08011d3b
 8011f8c:	08029350 	.word	0x08029350

08011f90 <__sflush_r>:
 8011f90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f98:	0716      	lsls	r6, r2, #28
 8011f9a:	4605      	mov	r5, r0
 8011f9c:	460c      	mov	r4, r1
 8011f9e:	d454      	bmi.n	801204a <__sflush_r+0xba>
 8011fa0:	684b      	ldr	r3, [r1, #4]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	dc02      	bgt.n	8011fac <__sflush_r+0x1c>
 8011fa6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	dd48      	ble.n	801203e <__sflush_r+0xae>
 8011fac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011fae:	2e00      	cmp	r6, #0
 8011fb0:	d045      	beq.n	801203e <__sflush_r+0xae>
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011fb8:	682f      	ldr	r7, [r5, #0]
 8011fba:	6a21      	ldr	r1, [r4, #32]
 8011fbc:	602b      	str	r3, [r5, #0]
 8011fbe:	d030      	beq.n	8012022 <__sflush_r+0x92>
 8011fc0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011fc2:	89a3      	ldrh	r3, [r4, #12]
 8011fc4:	0759      	lsls	r1, r3, #29
 8011fc6:	d505      	bpl.n	8011fd4 <__sflush_r+0x44>
 8011fc8:	6863      	ldr	r3, [r4, #4]
 8011fca:	1ad2      	subs	r2, r2, r3
 8011fcc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011fce:	b10b      	cbz	r3, 8011fd4 <__sflush_r+0x44>
 8011fd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011fd2:	1ad2      	subs	r2, r2, r3
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011fd8:	6a21      	ldr	r1, [r4, #32]
 8011fda:	4628      	mov	r0, r5
 8011fdc:	47b0      	blx	r6
 8011fde:	1c43      	adds	r3, r0, #1
 8011fe0:	89a3      	ldrh	r3, [r4, #12]
 8011fe2:	d106      	bne.n	8011ff2 <__sflush_r+0x62>
 8011fe4:	6829      	ldr	r1, [r5, #0]
 8011fe6:	291d      	cmp	r1, #29
 8011fe8:	d82b      	bhi.n	8012042 <__sflush_r+0xb2>
 8011fea:	4a2a      	ldr	r2, [pc, #168]	@ (8012094 <__sflush_r+0x104>)
 8011fec:	40ca      	lsrs	r2, r1
 8011fee:	07d6      	lsls	r6, r2, #31
 8011ff0:	d527      	bpl.n	8012042 <__sflush_r+0xb2>
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	6062      	str	r2, [r4, #4]
 8011ff6:	04d9      	lsls	r1, r3, #19
 8011ff8:	6922      	ldr	r2, [r4, #16]
 8011ffa:	6022      	str	r2, [r4, #0]
 8011ffc:	d504      	bpl.n	8012008 <__sflush_r+0x78>
 8011ffe:	1c42      	adds	r2, r0, #1
 8012000:	d101      	bne.n	8012006 <__sflush_r+0x76>
 8012002:	682b      	ldr	r3, [r5, #0]
 8012004:	b903      	cbnz	r3, 8012008 <__sflush_r+0x78>
 8012006:	6560      	str	r0, [r4, #84]	@ 0x54
 8012008:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801200a:	602f      	str	r7, [r5, #0]
 801200c:	b1b9      	cbz	r1, 801203e <__sflush_r+0xae>
 801200e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012012:	4299      	cmp	r1, r3
 8012014:	d002      	beq.n	801201c <__sflush_r+0x8c>
 8012016:	4628      	mov	r0, r5
 8012018:	f7ff f8a6 	bl	8011168 <_free_r>
 801201c:	2300      	movs	r3, #0
 801201e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012020:	e00d      	b.n	801203e <__sflush_r+0xae>
 8012022:	2301      	movs	r3, #1
 8012024:	4628      	mov	r0, r5
 8012026:	47b0      	blx	r6
 8012028:	4602      	mov	r2, r0
 801202a:	1c50      	adds	r0, r2, #1
 801202c:	d1c9      	bne.n	8011fc2 <__sflush_r+0x32>
 801202e:	682b      	ldr	r3, [r5, #0]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d0c6      	beq.n	8011fc2 <__sflush_r+0x32>
 8012034:	2b1d      	cmp	r3, #29
 8012036:	d001      	beq.n	801203c <__sflush_r+0xac>
 8012038:	2b16      	cmp	r3, #22
 801203a:	d11e      	bne.n	801207a <__sflush_r+0xea>
 801203c:	602f      	str	r7, [r5, #0]
 801203e:	2000      	movs	r0, #0
 8012040:	e022      	b.n	8012088 <__sflush_r+0xf8>
 8012042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012046:	b21b      	sxth	r3, r3
 8012048:	e01b      	b.n	8012082 <__sflush_r+0xf2>
 801204a:	690f      	ldr	r7, [r1, #16]
 801204c:	2f00      	cmp	r7, #0
 801204e:	d0f6      	beq.n	801203e <__sflush_r+0xae>
 8012050:	0793      	lsls	r3, r2, #30
 8012052:	680e      	ldr	r6, [r1, #0]
 8012054:	bf08      	it	eq
 8012056:	694b      	ldreq	r3, [r1, #20]
 8012058:	600f      	str	r7, [r1, #0]
 801205a:	bf18      	it	ne
 801205c:	2300      	movne	r3, #0
 801205e:	eba6 0807 	sub.w	r8, r6, r7
 8012062:	608b      	str	r3, [r1, #8]
 8012064:	f1b8 0f00 	cmp.w	r8, #0
 8012068:	dde9      	ble.n	801203e <__sflush_r+0xae>
 801206a:	6a21      	ldr	r1, [r4, #32]
 801206c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801206e:	4643      	mov	r3, r8
 8012070:	463a      	mov	r2, r7
 8012072:	4628      	mov	r0, r5
 8012074:	47b0      	blx	r6
 8012076:	2800      	cmp	r0, #0
 8012078:	dc08      	bgt.n	801208c <__sflush_r+0xfc>
 801207a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801207e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012082:	81a3      	strh	r3, [r4, #12]
 8012084:	f04f 30ff 	mov.w	r0, #4294967295
 8012088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801208c:	4407      	add	r7, r0
 801208e:	eba8 0800 	sub.w	r8, r8, r0
 8012092:	e7e7      	b.n	8012064 <__sflush_r+0xd4>
 8012094:	20400001 	.word	0x20400001

08012098 <_fflush_r>:
 8012098:	b538      	push	{r3, r4, r5, lr}
 801209a:	690b      	ldr	r3, [r1, #16]
 801209c:	4605      	mov	r5, r0
 801209e:	460c      	mov	r4, r1
 80120a0:	b913      	cbnz	r3, 80120a8 <_fflush_r+0x10>
 80120a2:	2500      	movs	r5, #0
 80120a4:	4628      	mov	r0, r5
 80120a6:	bd38      	pop	{r3, r4, r5, pc}
 80120a8:	b118      	cbz	r0, 80120b2 <_fflush_r+0x1a>
 80120aa:	6a03      	ldr	r3, [r0, #32]
 80120ac:	b90b      	cbnz	r3, 80120b2 <_fflush_r+0x1a>
 80120ae:	f7fe f8c3 	bl	8010238 <__sinit>
 80120b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d0f3      	beq.n	80120a2 <_fflush_r+0xa>
 80120ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80120bc:	07d0      	lsls	r0, r2, #31
 80120be:	d404      	bmi.n	80120ca <_fflush_r+0x32>
 80120c0:	0599      	lsls	r1, r3, #22
 80120c2:	d402      	bmi.n	80120ca <_fflush_r+0x32>
 80120c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80120c6:	f7fe f9e4 	bl	8010492 <__retarget_lock_acquire_recursive>
 80120ca:	4628      	mov	r0, r5
 80120cc:	4621      	mov	r1, r4
 80120ce:	f7ff ff5f 	bl	8011f90 <__sflush_r>
 80120d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80120d4:	07da      	lsls	r2, r3, #31
 80120d6:	4605      	mov	r5, r0
 80120d8:	d4e4      	bmi.n	80120a4 <_fflush_r+0xc>
 80120da:	89a3      	ldrh	r3, [r4, #12]
 80120dc:	059b      	lsls	r3, r3, #22
 80120de:	d4e1      	bmi.n	80120a4 <_fflush_r+0xc>
 80120e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80120e2:	f7fe f9d7 	bl	8010494 <__retarget_lock_release_recursive>
 80120e6:	e7dd      	b.n	80120a4 <_fflush_r+0xc>

080120e8 <__swbuf_r>:
 80120e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120ea:	460e      	mov	r6, r1
 80120ec:	4614      	mov	r4, r2
 80120ee:	4605      	mov	r5, r0
 80120f0:	b118      	cbz	r0, 80120fa <__swbuf_r+0x12>
 80120f2:	6a03      	ldr	r3, [r0, #32]
 80120f4:	b90b      	cbnz	r3, 80120fa <__swbuf_r+0x12>
 80120f6:	f7fe f89f 	bl	8010238 <__sinit>
 80120fa:	69a3      	ldr	r3, [r4, #24]
 80120fc:	60a3      	str	r3, [r4, #8]
 80120fe:	89a3      	ldrh	r3, [r4, #12]
 8012100:	071a      	lsls	r2, r3, #28
 8012102:	d501      	bpl.n	8012108 <__swbuf_r+0x20>
 8012104:	6923      	ldr	r3, [r4, #16]
 8012106:	b943      	cbnz	r3, 801211a <__swbuf_r+0x32>
 8012108:	4621      	mov	r1, r4
 801210a:	4628      	mov	r0, r5
 801210c:	f000 f82a 	bl	8012164 <__swsetup_r>
 8012110:	b118      	cbz	r0, 801211a <__swbuf_r+0x32>
 8012112:	f04f 37ff 	mov.w	r7, #4294967295
 8012116:	4638      	mov	r0, r7
 8012118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801211a:	6823      	ldr	r3, [r4, #0]
 801211c:	6922      	ldr	r2, [r4, #16]
 801211e:	1a98      	subs	r0, r3, r2
 8012120:	6963      	ldr	r3, [r4, #20]
 8012122:	b2f6      	uxtb	r6, r6
 8012124:	4283      	cmp	r3, r0
 8012126:	4637      	mov	r7, r6
 8012128:	dc05      	bgt.n	8012136 <__swbuf_r+0x4e>
 801212a:	4621      	mov	r1, r4
 801212c:	4628      	mov	r0, r5
 801212e:	f7ff ffb3 	bl	8012098 <_fflush_r>
 8012132:	2800      	cmp	r0, #0
 8012134:	d1ed      	bne.n	8012112 <__swbuf_r+0x2a>
 8012136:	68a3      	ldr	r3, [r4, #8]
 8012138:	3b01      	subs	r3, #1
 801213a:	60a3      	str	r3, [r4, #8]
 801213c:	6823      	ldr	r3, [r4, #0]
 801213e:	1c5a      	adds	r2, r3, #1
 8012140:	6022      	str	r2, [r4, #0]
 8012142:	701e      	strb	r6, [r3, #0]
 8012144:	6962      	ldr	r2, [r4, #20]
 8012146:	1c43      	adds	r3, r0, #1
 8012148:	429a      	cmp	r2, r3
 801214a:	d004      	beq.n	8012156 <__swbuf_r+0x6e>
 801214c:	89a3      	ldrh	r3, [r4, #12]
 801214e:	07db      	lsls	r3, r3, #31
 8012150:	d5e1      	bpl.n	8012116 <__swbuf_r+0x2e>
 8012152:	2e0a      	cmp	r6, #10
 8012154:	d1df      	bne.n	8012116 <__swbuf_r+0x2e>
 8012156:	4621      	mov	r1, r4
 8012158:	4628      	mov	r0, r5
 801215a:	f7ff ff9d 	bl	8012098 <_fflush_r>
 801215e:	2800      	cmp	r0, #0
 8012160:	d0d9      	beq.n	8012116 <__swbuf_r+0x2e>
 8012162:	e7d6      	b.n	8012112 <__swbuf_r+0x2a>

08012164 <__swsetup_r>:
 8012164:	b538      	push	{r3, r4, r5, lr}
 8012166:	4b29      	ldr	r3, [pc, #164]	@ (801220c <__swsetup_r+0xa8>)
 8012168:	4605      	mov	r5, r0
 801216a:	6818      	ldr	r0, [r3, #0]
 801216c:	460c      	mov	r4, r1
 801216e:	b118      	cbz	r0, 8012178 <__swsetup_r+0x14>
 8012170:	6a03      	ldr	r3, [r0, #32]
 8012172:	b90b      	cbnz	r3, 8012178 <__swsetup_r+0x14>
 8012174:	f7fe f860 	bl	8010238 <__sinit>
 8012178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801217c:	0719      	lsls	r1, r3, #28
 801217e:	d422      	bmi.n	80121c6 <__swsetup_r+0x62>
 8012180:	06da      	lsls	r2, r3, #27
 8012182:	d407      	bmi.n	8012194 <__swsetup_r+0x30>
 8012184:	2209      	movs	r2, #9
 8012186:	602a      	str	r2, [r5, #0]
 8012188:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801218c:	81a3      	strh	r3, [r4, #12]
 801218e:	f04f 30ff 	mov.w	r0, #4294967295
 8012192:	e033      	b.n	80121fc <__swsetup_r+0x98>
 8012194:	0758      	lsls	r0, r3, #29
 8012196:	d512      	bpl.n	80121be <__swsetup_r+0x5a>
 8012198:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801219a:	b141      	cbz	r1, 80121ae <__swsetup_r+0x4a>
 801219c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80121a0:	4299      	cmp	r1, r3
 80121a2:	d002      	beq.n	80121aa <__swsetup_r+0x46>
 80121a4:	4628      	mov	r0, r5
 80121a6:	f7fe ffdf 	bl	8011168 <_free_r>
 80121aa:	2300      	movs	r3, #0
 80121ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80121ae:	89a3      	ldrh	r3, [r4, #12]
 80121b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80121b4:	81a3      	strh	r3, [r4, #12]
 80121b6:	2300      	movs	r3, #0
 80121b8:	6063      	str	r3, [r4, #4]
 80121ba:	6923      	ldr	r3, [r4, #16]
 80121bc:	6023      	str	r3, [r4, #0]
 80121be:	89a3      	ldrh	r3, [r4, #12]
 80121c0:	f043 0308 	orr.w	r3, r3, #8
 80121c4:	81a3      	strh	r3, [r4, #12]
 80121c6:	6923      	ldr	r3, [r4, #16]
 80121c8:	b94b      	cbnz	r3, 80121de <__swsetup_r+0x7a>
 80121ca:	89a3      	ldrh	r3, [r4, #12]
 80121cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80121d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80121d4:	d003      	beq.n	80121de <__swsetup_r+0x7a>
 80121d6:	4621      	mov	r1, r4
 80121d8:	4628      	mov	r0, r5
 80121da:	f000 f8fb 	bl	80123d4 <__smakebuf_r>
 80121de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121e2:	f013 0201 	ands.w	r2, r3, #1
 80121e6:	d00a      	beq.n	80121fe <__swsetup_r+0x9a>
 80121e8:	2200      	movs	r2, #0
 80121ea:	60a2      	str	r2, [r4, #8]
 80121ec:	6962      	ldr	r2, [r4, #20]
 80121ee:	4252      	negs	r2, r2
 80121f0:	61a2      	str	r2, [r4, #24]
 80121f2:	6922      	ldr	r2, [r4, #16]
 80121f4:	b942      	cbnz	r2, 8012208 <__swsetup_r+0xa4>
 80121f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80121fa:	d1c5      	bne.n	8012188 <__swsetup_r+0x24>
 80121fc:	bd38      	pop	{r3, r4, r5, pc}
 80121fe:	0799      	lsls	r1, r3, #30
 8012200:	bf58      	it	pl
 8012202:	6962      	ldrpl	r2, [r4, #20]
 8012204:	60a2      	str	r2, [r4, #8]
 8012206:	e7f4      	b.n	80121f2 <__swsetup_r+0x8e>
 8012208:	2000      	movs	r0, #0
 801220a:	e7f7      	b.n	80121fc <__swsetup_r+0x98>
 801220c:	20000234 	.word	0x20000234

08012210 <memmove>:
 8012210:	4288      	cmp	r0, r1
 8012212:	b510      	push	{r4, lr}
 8012214:	eb01 0402 	add.w	r4, r1, r2
 8012218:	d902      	bls.n	8012220 <memmove+0x10>
 801221a:	4284      	cmp	r4, r0
 801221c:	4623      	mov	r3, r4
 801221e:	d807      	bhi.n	8012230 <memmove+0x20>
 8012220:	1e43      	subs	r3, r0, #1
 8012222:	42a1      	cmp	r1, r4
 8012224:	d008      	beq.n	8012238 <memmove+0x28>
 8012226:	f811 2b01 	ldrb.w	r2, [r1], #1
 801222a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801222e:	e7f8      	b.n	8012222 <memmove+0x12>
 8012230:	4402      	add	r2, r0
 8012232:	4601      	mov	r1, r0
 8012234:	428a      	cmp	r2, r1
 8012236:	d100      	bne.n	801223a <memmove+0x2a>
 8012238:	bd10      	pop	{r4, pc}
 801223a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801223e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012242:	e7f7      	b.n	8012234 <memmove+0x24>

08012244 <_sbrk_r>:
 8012244:	b538      	push	{r3, r4, r5, lr}
 8012246:	4d06      	ldr	r5, [pc, #24]	@ (8012260 <_sbrk_r+0x1c>)
 8012248:	2300      	movs	r3, #0
 801224a:	4604      	mov	r4, r0
 801224c:	4608      	mov	r0, r1
 801224e:	602b      	str	r3, [r5, #0]
 8012250:	f7f1 f9a0 	bl	8003594 <_sbrk>
 8012254:	1c43      	adds	r3, r0, #1
 8012256:	d102      	bne.n	801225e <_sbrk_r+0x1a>
 8012258:	682b      	ldr	r3, [r5, #0]
 801225a:	b103      	cbz	r3, 801225e <_sbrk_r+0x1a>
 801225c:	6023      	str	r3, [r4, #0]
 801225e:	bd38      	pop	{r3, r4, r5, pc}
 8012260:	20006c94 	.word	0x20006c94

08012264 <__assert_func>:
 8012264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012266:	4614      	mov	r4, r2
 8012268:	461a      	mov	r2, r3
 801226a:	4b09      	ldr	r3, [pc, #36]	@ (8012290 <__assert_func+0x2c>)
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	4605      	mov	r5, r0
 8012270:	68d8      	ldr	r0, [r3, #12]
 8012272:	b14c      	cbz	r4, 8012288 <__assert_func+0x24>
 8012274:	4b07      	ldr	r3, [pc, #28]	@ (8012294 <__assert_func+0x30>)
 8012276:	9100      	str	r1, [sp, #0]
 8012278:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801227c:	4906      	ldr	r1, [pc, #24]	@ (8012298 <__assert_func+0x34>)
 801227e:	462b      	mov	r3, r5
 8012280:	f000 f870 	bl	8012364 <fiprintf>
 8012284:	f000 f904 	bl	8012490 <abort>
 8012288:	4b04      	ldr	r3, [pc, #16]	@ (801229c <__assert_func+0x38>)
 801228a:	461c      	mov	r4, r3
 801228c:	e7f3      	b.n	8012276 <__assert_func+0x12>
 801228e:	bf00      	nop
 8012290:	20000234 	.word	0x20000234
 8012294:	08029365 	.word	0x08029365
 8012298:	08029372 	.word	0x08029372
 801229c:	080293a0 	.word	0x080293a0

080122a0 <_calloc_r>:
 80122a0:	b570      	push	{r4, r5, r6, lr}
 80122a2:	fba1 5402 	umull	r5, r4, r1, r2
 80122a6:	b934      	cbnz	r4, 80122b6 <_calloc_r+0x16>
 80122a8:	4629      	mov	r1, r5
 80122aa:	f7fe ffd1 	bl	8011250 <_malloc_r>
 80122ae:	4606      	mov	r6, r0
 80122b0:	b928      	cbnz	r0, 80122be <_calloc_r+0x1e>
 80122b2:	4630      	mov	r0, r6
 80122b4:	bd70      	pop	{r4, r5, r6, pc}
 80122b6:	220c      	movs	r2, #12
 80122b8:	6002      	str	r2, [r0, #0]
 80122ba:	2600      	movs	r6, #0
 80122bc:	e7f9      	b.n	80122b2 <_calloc_r+0x12>
 80122be:	462a      	mov	r2, r5
 80122c0:	4621      	mov	r1, r4
 80122c2:	f7fe f868 	bl	8010396 <memset>
 80122c6:	e7f4      	b.n	80122b2 <_calloc_r+0x12>

080122c8 <__ascii_mbtowc>:
 80122c8:	b082      	sub	sp, #8
 80122ca:	b901      	cbnz	r1, 80122ce <__ascii_mbtowc+0x6>
 80122cc:	a901      	add	r1, sp, #4
 80122ce:	b142      	cbz	r2, 80122e2 <__ascii_mbtowc+0x1a>
 80122d0:	b14b      	cbz	r3, 80122e6 <__ascii_mbtowc+0x1e>
 80122d2:	7813      	ldrb	r3, [r2, #0]
 80122d4:	600b      	str	r3, [r1, #0]
 80122d6:	7812      	ldrb	r2, [r2, #0]
 80122d8:	1e10      	subs	r0, r2, #0
 80122da:	bf18      	it	ne
 80122dc:	2001      	movne	r0, #1
 80122de:	b002      	add	sp, #8
 80122e0:	4770      	bx	lr
 80122e2:	4610      	mov	r0, r2
 80122e4:	e7fb      	b.n	80122de <__ascii_mbtowc+0x16>
 80122e6:	f06f 0001 	mvn.w	r0, #1
 80122ea:	e7f8      	b.n	80122de <__ascii_mbtowc+0x16>

080122ec <_realloc_r>:
 80122ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122f0:	4607      	mov	r7, r0
 80122f2:	4614      	mov	r4, r2
 80122f4:	460d      	mov	r5, r1
 80122f6:	b921      	cbnz	r1, 8012302 <_realloc_r+0x16>
 80122f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80122fc:	4611      	mov	r1, r2
 80122fe:	f7fe bfa7 	b.w	8011250 <_malloc_r>
 8012302:	b92a      	cbnz	r2, 8012310 <_realloc_r+0x24>
 8012304:	f7fe ff30 	bl	8011168 <_free_r>
 8012308:	4625      	mov	r5, r4
 801230a:	4628      	mov	r0, r5
 801230c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012310:	f000 f8c5 	bl	801249e <_malloc_usable_size_r>
 8012314:	4284      	cmp	r4, r0
 8012316:	4606      	mov	r6, r0
 8012318:	d802      	bhi.n	8012320 <_realloc_r+0x34>
 801231a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801231e:	d8f4      	bhi.n	801230a <_realloc_r+0x1e>
 8012320:	4621      	mov	r1, r4
 8012322:	4638      	mov	r0, r7
 8012324:	f7fe ff94 	bl	8011250 <_malloc_r>
 8012328:	4680      	mov	r8, r0
 801232a:	b908      	cbnz	r0, 8012330 <_realloc_r+0x44>
 801232c:	4645      	mov	r5, r8
 801232e:	e7ec      	b.n	801230a <_realloc_r+0x1e>
 8012330:	42b4      	cmp	r4, r6
 8012332:	4622      	mov	r2, r4
 8012334:	4629      	mov	r1, r5
 8012336:	bf28      	it	cs
 8012338:	4632      	movcs	r2, r6
 801233a:	f7fe f8ac 	bl	8010496 <memcpy>
 801233e:	4629      	mov	r1, r5
 8012340:	4638      	mov	r0, r7
 8012342:	f7fe ff11 	bl	8011168 <_free_r>
 8012346:	e7f1      	b.n	801232c <_realloc_r+0x40>

08012348 <__ascii_wctomb>:
 8012348:	4603      	mov	r3, r0
 801234a:	4608      	mov	r0, r1
 801234c:	b141      	cbz	r1, 8012360 <__ascii_wctomb+0x18>
 801234e:	2aff      	cmp	r2, #255	@ 0xff
 8012350:	d904      	bls.n	801235c <__ascii_wctomb+0x14>
 8012352:	228a      	movs	r2, #138	@ 0x8a
 8012354:	601a      	str	r2, [r3, #0]
 8012356:	f04f 30ff 	mov.w	r0, #4294967295
 801235a:	4770      	bx	lr
 801235c:	700a      	strb	r2, [r1, #0]
 801235e:	2001      	movs	r0, #1
 8012360:	4770      	bx	lr
	...

08012364 <fiprintf>:
 8012364:	b40e      	push	{r1, r2, r3}
 8012366:	b503      	push	{r0, r1, lr}
 8012368:	4601      	mov	r1, r0
 801236a:	ab03      	add	r3, sp, #12
 801236c:	4805      	ldr	r0, [pc, #20]	@ (8012384 <fiprintf+0x20>)
 801236e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012372:	6800      	ldr	r0, [r0, #0]
 8012374:	9301      	str	r3, [sp, #4]
 8012376:	f7ff fcf3 	bl	8011d60 <_vfiprintf_r>
 801237a:	b002      	add	sp, #8
 801237c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012380:	b003      	add	sp, #12
 8012382:	4770      	bx	lr
 8012384:	20000234 	.word	0x20000234

08012388 <__swhatbuf_r>:
 8012388:	b570      	push	{r4, r5, r6, lr}
 801238a:	460c      	mov	r4, r1
 801238c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012390:	2900      	cmp	r1, #0
 8012392:	b096      	sub	sp, #88	@ 0x58
 8012394:	4615      	mov	r5, r2
 8012396:	461e      	mov	r6, r3
 8012398:	da0d      	bge.n	80123b6 <__swhatbuf_r+0x2e>
 801239a:	89a3      	ldrh	r3, [r4, #12]
 801239c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80123a0:	f04f 0100 	mov.w	r1, #0
 80123a4:	bf14      	ite	ne
 80123a6:	2340      	movne	r3, #64	@ 0x40
 80123a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80123ac:	2000      	movs	r0, #0
 80123ae:	6031      	str	r1, [r6, #0]
 80123b0:	602b      	str	r3, [r5, #0]
 80123b2:	b016      	add	sp, #88	@ 0x58
 80123b4:	bd70      	pop	{r4, r5, r6, pc}
 80123b6:	466a      	mov	r2, sp
 80123b8:	f000 f848 	bl	801244c <_fstat_r>
 80123bc:	2800      	cmp	r0, #0
 80123be:	dbec      	blt.n	801239a <__swhatbuf_r+0x12>
 80123c0:	9901      	ldr	r1, [sp, #4]
 80123c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80123c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80123ca:	4259      	negs	r1, r3
 80123cc:	4159      	adcs	r1, r3
 80123ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80123d2:	e7eb      	b.n	80123ac <__swhatbuf_r+0x24>

080123d4 <__smakebuf_r>:
 80123d4:	898b      	ldrh	r3, [r1, #12]
 80123d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80123d8:	079d      	lsls	r5, r3, #30
 80123da:	4606      	mov	r6, r0
 80123dc:	460c      	mov	r4, r1
 80123de:	d507      	bpl.n	80123f0 <__smakebuf_r+0x1c>
 80123e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80123e4:	6023      	str	r3, [r4, #0]
 80123e6:	6123      	str	r3, [r4, #16]
 80123e8:	2301      	movs	r3, #1
 80123ea:	6163      	str	r3, [r4, #20]
 80123ec:	b003      	add	sp, #12
 80123ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123f0:	ab01      	add	r3, sp, #4
 80123f2:	466a      	mov	r2, sp
 80123f4:	f7ff ffc8 	bl	8012388 <__swhatbuf_r>
 80123f8:	9f00      	ldr	r7, [sp, #0]
 80123fa:	4605      	mov	r5, r0
 80123fc:	4639      	mov	r1, r7
 80123fe:	4630      	mov	r0, r6
 8012400:	f7fe ff26 	bl	8011250 <_malloc_r>
 8012404:	b948      	cbnz	r0, 801241a <__smakebuf_r+0x46>
 8012406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801240a:	059a      	lsls	r2, r3, #22
 801240c:	d4ee      	bmi.n	80123ec <__smakebuf_r+0x18>
 801240e:	f023 0303 	bic.w	r3, r3, #3
 8012412:	f043 0302 	orr.w	r3, r3, #2
 8012416:	81a3      	strh	r3, [r4, #12]
 8012418:	e7e2      	b.n	80123e0 <__smakebuf_r+0xc>
 801241a:	89a3      	ldrh	r3, [r4, #12]
 801241c:	6020      	str	r0, [r4, #0]
 801241e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012422:	81a3      	strh	r3, [r4, #12]
 8012424:	9b01      	ldr	r3, [sp, #4]
 8012426:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801242a:	b15b      	cbz	r3, 8012444 <__smakebuf_r+0x70>
 801242c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012430:	4630      	mov	r0, r6
 8012432:	f000 f81d 	bl	8012470 <_isatty_r>
 8012436:	b128      	cbz	r0, 8012444 <__smakebuf_r+0x70>
 8012438:	89a3      	ldrh	r3, [r4, #12]
 801243a:	f023 0303 	bic.w	r3, r3, #3
 801243e:	f043 0301 	orr.w	r3, r3, #1
 8012442:	81a3      	strh	r3, [r4, #12]
 8012444:	89a3      	ldrh	r3, [r4, #12]
 8012446:	431d      	orrs	r5, r3
 8012448:	81a5      	strh	r5, [r4, #12]
 801244a:	e7cf      	b.n	80123ec <__smakebuf_r+0x18>

0801244c <_fstat_r>:
 801244c:	b538      	push	{r3, r4, r5, lr}
 801244e:	4d07      	ldr	r5, [pc, #28]	@ (801246c <_fstat_r+0x20>)
 8012450:	2300      	movs	r3, #0
 8012452:	4604      	mov	r4, r0
 8012454:	4608      	mov	r0, r1
 8012456:	4611      	mov	r1, r2
 8012458:	602b      	str	r3, [r5, #0]
 801245a:	f7f1 f873 	bl	8003544 <_fstat>
 801245e:	1c43      	adds	r3, r0, #1
 8012460:	d102      	bne.n	8012468 <_fstat_r+0x1c>
 8012462:	682b      	ldr	r3, [r5, #0]
 8012464:	b103      	cbz	r3, 8012468 <_fstat_r+0x1c>
 8012466:	6023      	str	r3, [r4, #0]
 8012468:	bd38      	pop	{r3, r4, r5, pc}
 801246a:	bf00      	nop
 801246c:	20006c94 	.word	0x20006c94

08012470 <_isatty_r>:
 8012470:	b538      	push	{r3, r4, r5, lr}
 8012472:	4d06      	ldr	r5, [pc, #24]	@ (801248c <_isatty_r+0x1c>)
 8012474:	2300      	movs	r3, #0
 8012476:	4604      	mov	r4, r0
 8012478:	4608      	mov	r0, r1
 801247a:	602b      	str	r3, [r5, #0]
 801247c:	f7f1 f872 	bl	8003564 <_isatty>
 8012480:	1c43      	adds	r3, r0, #1
 8012482:	d102      	bne.n	801248a <_isatty_r+0x1a>
 8012484:	682b      	ldr	r3, [r5, #0]
 8012486:	b103      	cbz	r3, 801248a <_isatty_r+0x1a>
 8012488:	6023      	str	r3, [r4, #0]
 801248a:	bd38      	pop	{r3, r4, r5, pc}
 801248c:	20006c94 	.word	0x20006c94

08012490 <abort>:
 8012490:	b508      	push	{r3, lr}
 8012492:	2006      	movs	r0, #6
 8012494:	f000 f834 	bl	8012500 <raise>
 8012498:	2001      	movs	r0, #1
 801249a:	f7f1 f803 	bl	80034a4 <_exit>

0801249e <_malloc_usable_size_r>:
 801249e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80124a2:	1f18      	subs	r0, r3, #4
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	bfbc      	itt	lt
 80124a8:	580b      	ldrlt	r3, [r1, r0]
 80124aa:	18c0      	addlt	r0, r0, r3
 80124ac:	4770      	bx	lr

080124ae <_raise_r>:
 80124ae:	291f      	cmp	r1, #31
 80124b0:	b538      	push	{r3, r4, r5, lr}
 80124b2:	4605      	mov	r5, r0
 80124b4:	460c      	mov	r4, r1
 80124b6:	d904      	bls.n	80124c2 <_raise_r+0x14>
 80124b8:	2316      	movs	r3, #22
 80124ba:	6003      	str	r3, [r0, #0]
 80124bc:	f04f 30ff 	mov.w	r0, #4294967295
 80124c0:	bd38      	pop	{r3, r4, r5, pc}
 80124c2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80124c4:	b112      	cbz	r2, 80124cc <_raise_r+0x1e>
 80124c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80124ca:	b94b      	cbnz	r3, 80124e0 <_raise_r+0x32>
 80124cc:	4628      	mov	r0, r5
 80124ce:	f000 f831 	bl	8012534 <_getpid_r>
 80124d2:	4622      	mov	r2, r4
 80124d4:	4601      	mov	r1, r0
 80124d6:	4628      	mov	r0, r5
 80124d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124dc:	f000 b818 	b.w	8012510 <_kill_r>
 80124e0:	2b01      	cmp	r3, #1
 80124e2:	d00a      	beq.n	80124fa <_raise_r+0x4c>
 80124e4:	1c59      	adds	r1, r3, #1
 80124e6:	d103      	bne.n	80124f0 <_raise_r+0x42>
 80124e8:	2316      	movs	r3, #22
 80124ea:	6003      	str	r3, [r0, #0]
 80124ec:	2001      	movs	r0, #1
 80124ee:	e7e7      	b.n	80124c0 <_raise_r+0x12>
 80124f0:	2100      	movs	r1, #0
 80124f2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80124f6:	4620      	mov	r0, r4
 80124f8:	4798      	blx	r3
 80124fa:	2000      	movs	r0, #0
 80124fc:	e7e0      	b.n	80124c0 <_raise_r+0x12>
	...

08012500 <raise>:
 8012500:	4b02      	ldr	r3, [pc, #8]	@ (801250c <raise+0xc>)
 8012502:	4601      	mov	r1, r0
 8012504:	6818      	ldr	r0, [r3, #0]
 8012506:	f7ff bfd2 	b.w	80124ae <_raise_r>
 801250a:	bf00      	nop
 801250c:	20000234 	.word	0x20000234

08012510 <_kill_r>:
 8012510:	b538      	push	{r3, r4, r5, lr}
 8012512:	4d07      	ldr	r5, [pc, #28]	@ (8012530 <_kill_r+0x20>)
 8012514:	2300      	movs	r3, #0
 8012516:	4604      	mov	r4, r0
 8012518:	4608      	mov	r0, r1
 801251a:	4611      	mov	r1, r2
 801251c:	602b      	str	r3, [r5, #0]
 801251e:	f7f0 ffb1 	bl	8003484 <_kill>
 8012522:	1c43      	adds	r3, r0, #1
 8012524:	d102      	bne.n	801252c <_kill_r+0x1c>
 8012526:	682b      	ldr	r3, [r5, #0]
 8012528:	b103      	cbz	r3, 801252c <_kill_r+0x1c>
 801252a:	6023      	str	r3, [r4, #0]
 801252c:	bd38      	pop	{r3, r4, r5, pc}
 801252e:	bf00      	nop
 8012530:	20006c94 	.word	0x20006c94

08012534 <_getpid_r>:
 8012534:	f7f0 bf9e 	b.w	8003474 <_getpid>

08012538 <logf>:
 8012538:	b508      	push	{r3, lr}
 801253a:	ed2d 8b02 	vpush	{d8}
 801253e:	eeb0 8a40 	vmov.f32	s16, s0
 8012542:	f000 f933 	bl	80127ac <__ieee754_logf>
 8012546:	eeb4 8a48 	vcmp.f32	s16, s16
 801254a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801254e:	d60f      	bvs.n	8012570 <logf+0x38>
 8012550:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012558:	dc0a      	bgt.n	8012570 <logf+0x38>
 801255a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801255e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012562:	d108      	bne.n	8012576 <logf+0x3e>
 8012564:	f7fd ff6a 	bl	801043c <__errno>
 8012568:	2322      	movs	r3, #34	@ 0x22
 801256a:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801258c <logf+0x54>
 801256e:	6003      	str	r3, [r0, #0]
 8012570:	ecbd 8b02 	vpop	{d8}
 8012574:	bd08      	pop	{r3, pc}
 8012576:	f7fd ff61 	bl	801043c <__errno>
 801257a:	ecbd 8b02 	vpop	{d8}
 801257e:	2321      	movs	r3, #33	@ 0x21
 8012580:	6003      	str	r3, [r0, #0]
 8012582:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012586:	4802      	ldr	r0, [pc, #8]	@ (8012590 <logf+0x58>)
 8012588:	f000 b866 	b.w	8012658 <nanf>
 801258c:	ff800000 	.word	0xff800000
 8012590:	080293a0 	.word	0x080293a0

08012594 <sqrtf>:
 8012594:	b508      	push	{r3, lr}
 8012596:	ed2d 8b02 	vpush	{d8}
 801259a:	eeb0 8a40 	vmov.f32	s16, s0
 801259e:	f000 f861 	bl	8012664 <__ieee754_sqrtf>
 80125a2:	eeb4 8a48 	vcmp.f32	s16, s16
 80125a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125aa:	d60c      	bvs.n	80125c6 <sqrtf+0x32>
 80125ac:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80125cc <sqrtf+0x38>
 80125b0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80125b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125b8:	d505      	bpl.n	80125c6 <sqrtf+0x32>
 80125ba:	f7fd ff3f 	bl	801043c <__errno>
 80125be:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80125c2:	2321      	movs	r3, #33	@ 0x21
 80125c4:	6003      	str	r3, [r0, #0]
 80125c6:	ecbd 8b02 	vpop	{d8}
 80125ca:	bd08      	pop	{r3, pc}
 80125cc:	00000000 	.word	0x00000000

080125d0 <cosf>:
 80125d0:	ee10 3a10 	vmov	r3, s0
 80125d4:	b507      	push	{r0, r1, r2, lr}
 80125d6:	4a1e      	ldr	r2, [pc, #120]	@ (8012650 <cosf+0x80>)
 80125d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80125dc:	4293      	cmp	r3, r2
 80125de:	d806      	bhi.n	80125ee <cosf+0x1e>
 80125e0:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8012654 <cosf+0x84>
 80125e4:	b003      	add	sp, #12
 80125e6:	f85d eb04 	ldr.w	lr, [sp], #4
 80125ea:	f000 b83f 	b.w	801266c <__kernel_cosf>
 80125ee:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80125f2:	d304      	bcc.n	80125fe <cosf+0x2e>
 80125f4:	ee30 0a40 	vsub.f32	s0, s0, s0
 80125f8:	b003      	add	sp, #12
 80125fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80125fe:	4668      	mov	r0, sp
 8012600:	f000 f9c6 	bl	8012990 <__ieee754_rem_pio2f>
 8012604:	f000 0003 	and.w	r0, r0, #3
 8012608:	2801      	cmp	r0, #1
 801260a:	d009      	beq.n	8012620 <cosf+0x50>
 801260c:	2802      	cmp	r0, #2
 801260e:	d010      	beq.n	8012632 <cosf+0x62>
 8012610:	b9b0      	cbnz	r0, 8012640 <cosf+0x70>
 8012612:	eddd 0a01 	vldr	s1, [sp, #4]
 8012616:	ed9d 0a00 	vldr	s0, [sp]
 801261a:	f000 f827 	bl	801266c <__kernel_cosf>
 801261e:	e7eb      	b.n	80125f8 <cosf+0x28>
 8012620:	eddd 0a01 	vldr	s1, [sp, #4]
 8012624:	ed9d 0a00 	vldr	s0, [sp]
 8012628:	f000 f878 	bl	801271c <__kernel_sinf>
 801262c:	eeb1 0a40 	vneg.f32	s0, s0
 8012630:	e7e2      	b.n	80125f8 <cosf+0x28>
 8012632:	eddd 0a01 	vldr	s1, [sp, #4]
 8012636:	ed9d 0a00 	vldr	s0, [sp]
 801263a:	f000 f817 	bl	801266c <__kernel_cosf>
 801263e:	e7f5      	b.n	801262c <cosf+0x5c>
 8012640:	eddd 0a01 	vldr	s1, [sp, #4]
 8012644:	ed9d 0a00 	vldr	s0, [sp]
 8012648:	2001      	movs	r0, #1
 801264a:	f000 f867 	bl	801271c <__kernel_sinf>
 801264e:	e7d3      	b.n	80125f8 <cosf+0x28>
 8012650:	3f490fd8 	.word	0x3f490fd8
 8012654:	00000000 	.word	0x00000000

08012658 <nanf>:
 8012658:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012660 <nanf+0x8>
 801265c:	4770      	bx	lr
 801265e:	bf00      	nop
 8012660:	7fc00000 	.word	0x7fc00000

08012664 <__ieee754_sqrtf>:
 8012664:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012668:	4770      	bx	lr
	...

0801266c <__kernel_cosf>:
 801266c:	ee10 3a10 	vmov	r3, s0
 8012670:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012674:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8012678:	eef0 6a40 	vmov.f32	s13, s0
 801267c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012680:	d204      	bcs.n	801268c <__kernel_cosf+0x20>
 8012682:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8012686:	ee17 2a90 	vmov	r2, s15
 801268a:	b342      	cbz	r2, 80126de <__kernel_cosf+0x72>
 801268c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8012690:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80126fc <__kernel_cosf+0x90>
 8012694:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8012700 <__kernel_cosf+0x94>
 8012698:	4a1a      	ldr	r2, [pc, #104]	@ (8012704 <__kernel_cosf+0x98>)
 801269a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801269e:	4293      	cmp	r3, r2
 80126a0:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8012708 <__kernel_cosf+0x9c>
 80126a4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80126a8:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 801270c <__kernel_cosf+0xa0>
 80126ac:	eea7 6a87 	vfma.f32	s12, s15, s14
 80126b0:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8012710 <__kernel_cosf+0xa4>
 80126b4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80126b8:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8012714 <__kernel_cosf+0xa8>
 80126bc:	eea7 6a87 	vfma.f32	s12, s15, s14
 80126c0:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80126c4:	ee26 6a07 	vmul.f32	s12, s12, s14
 80126c8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80126cc:	eee7 0a06 	vfma.f32	s1, s14, s12
 80126d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80126d4:	d804      	bhi.n	80126e0 <__kernel_cosf+0x74>
 80126d6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80126da:	ee30 0a67 	vsub.f32	s0, s0, s15
 80126de:	4770      	bx	lr
 80126e0:	4a0d      	ldr	r2, [pc, #52]	@ (8012718 <__kernel_cosf+0xac>)
 80126e2:	4293      	cmp	r3, r2
 80126e4:	bf9a      	itte	ls
 80126e6:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80126ea:	ee07 3a10 	vmovls	s14, r3
 80126ee:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80126f2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80126f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80126fa:	e7ec      	b.n	80126d6 <__kernel_cosf+0x6a>
 80126fc:	ad47d74e 	.word	0xad47d74e
 8012700:	310f74f6 	.word	0x310f74f6
 8012704:	3e999999 	.word	0x3e999999
 8012708:	b493f27c 	.word	0xb493f27c
 801270c:	37d00d01 	.word	0x37d00d01
 8012710:	bab60b61 	.word	0xbab60b61
 8012714:	3d2aaaab 	.word	0x3d2aaaab
 8012718:	3f480000 	.word	0x3f480000

0801271c <__kernel_sinf>:
 801271c:	ee10 3a10 	vmov	r3, s0
 8012720:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012724:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8012728:	d204      	bcs.n	8012734 <__kernel_sinf+0x18>
 801272a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801272e:	ee17 3a90 	vmov	r3, s15
 8012732:	b35b      	cbz	r3, 801278c <__kernel_sinf+0x70>
 8012734:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012738:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8012790 <__kernel_sinf+0x74>
 801273c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8012794 <__kernel_sinf+0x78>
 8012740:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012744:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8012798 <__kernel_sinf+0x7c>
 8012748:	eee6 7a07 	vfma.f32	s15, s12, s14
 801274c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 801279c <__kernel_sinf+0x80>
 8012750:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012754:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80127a0 <__kernel_sinf+0x84>
 8012758:	ee60 6a07 	vmul.f32	s13, s0, s14
 801275c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012760:	b930      	cbnz	r0, 8012770 <__kernel_sinf+0x54>
 8012762:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80127a4 <__kernel_sinf+0x88>
 8012766:	eea7 6a27 	vfma.f32	s12, s14, s15
 801276a:	eea6 0a26 	vfma.f32	s0, s12, s13
 801276e:	4770      	bx	lr
 8012770:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8012774:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8012778:	eee0 7a86 	vfma.f32	s15, s1, s12
 801277c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8012780:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80127a8 <__kernel_sinf+0x8c>
 8012784:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8012788:	ee30 0a60 	vsub.f32	s0, s0, s1
 801278c:	4770      	bx	lr
 801278e:	bf00      	nop
 8012790:	2f2ec9d3 	.word	0x2f2ec9d3
 8012794:	b2d72f34 	.word	0xb2d72f34
 8012798:	3638ef1b 	.word	0x3638ef1b
 801279c:	b9500d01 	.word	0xb9500d01
 80127a0:	3c088889 	.word	0x3c088889
 80127a4:	be2aaaab 	.word	0xbe2aaaab
 80127a8:	3e2aaaab 	.word	0x3e2aaaab

080127ac <__ieee754_logf>:
 80127ac:	ee10 3a10 	vmov	r3, s0
 80127b0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80127b4:	d106      	bne.n	80127c4 <__ieee754_logf+0x18>
 80127b6:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8012950 <__ieee754_logf+0x1a4>
 80127ba:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8012954 <__ieee754_logf+0x1a8>
 80127be:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80127c2:	4770      	bx	lr
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	461a      	mov	r2, r3
 80127c8:	da02      	bge.n	80127d0 <__ieee754_logf+0x24>
 80127ca:	ee30 7a40 	vsub.f32	s14, s0, s0
 80127ce:	e7f4      	b.n	80127ba <__ieee754_logf+0xe>
 80127d0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80127d4:	db02      	blt.n	80127dc <__ieee754_logf+0x30>
 80127d6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80127da:	4770      	bx	lr
 80127dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80127e0:	bfb8      	it	lt
 80127e2:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 8012958 <__ieee754_logf+0x1ac>
 80127e6:	485d      	ldr	r0, [pc, #372]	@ (801295c <__ieee754_logf+0x1b0>)
 80127e8:	bfbe      	ittt	lt
 80127ea:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80127ee:	f06f 0118 	mvnlt.w	r1, #24
 80127f2:	ee17 2a90 	vmovlt	r2, s15
 80127f6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80127fa:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80127fe:	4410      	add	r0, r2
 8012800:	bfa8      	it	ge
 8012802:	2100      	movge	r1, #0
 8012804:	3b7f      	subs	r3, #127	@ 0x7f
 8012806:	440b      	add	r3, r1
 8012808:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 801280c:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8012810:	4311      	orrs	r1, r2
 8012812:	ee00 1a10 	vmov	s0, r1
 8012816:	4952      	ldr	r1, [pc, #328]	@ (8012960 <__ieee754_logf+0x1b4>)
 8012818:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 801281c:	f102 000f 	add.w	r0, r2, #15
 8012820:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012824:	4001      	ands	r1, r0
 8012826:	ee30 0a67 	vsub.f32	s0, s0, s15
 801282a:	bb89      	cbnz	r1, 8012890 <__ieee754_logf+0xe4>
 801282c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8012830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012834:	d10f      	bne.n	8012856 <__ieee754_logf+0xaa>
 8012836:	2b00      	cmp	r3, #0
 8012838:	f000 8087 	beq.w	801294a <__ieee754_logf+0x19e>
 801283c:	ee07 3a90 	vmov	s15, r3
 8012840:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8012964 <__ieee754_logf+0x1b8>
 8012844:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8012968 <__ieee754_logf+0x1bc>
 8012848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801284c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012850:	eea7 0a87 	vfma.f32	s0, s15, s14
 8012854:	4770      	bx	lr
 8012856:	eddf 6a45 	vldr	s13, [pc, #276]	@ 801296c <__ieee754_logf+0x1c0>
 801285a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801285e:	eee0 7a66 	vfms.f32	s15, s0, s13
 8012862:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012866:	ee27 7a27 	vmul.f32	s14, s14, s15
 801286a:	b913      	cbnz	r3, 8012872 <__ieee754_logf+0xc6>
 801286c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012870:	4770      	bx	lr
 8012872:	ee07 3a90 	vmov	s15, r3
 8012876:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8012964 <__ieee754_logf+0x1b8>
 801287a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801287e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8012882:	ee37 0a40 	vsub.f32	s0, s14, s0
 8012886:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8012968 <__ieee754_logf+0x1bc>
 801288a:	ee97 0a87 	vfnms.f32	s0, s15, s14
 801288e:	4770      	bx	lr
 8012890:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8012894:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012898:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8012970 <__ieee754_logf+0x1c4>
 801289c:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8012974 <__ieee754_logf+0x1c8>
 80128a0:	4935      	ldr	r1, [pc, #212]	@ (8012978 <__ieee754_logf+0x1cc>)
 80128a2:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80128a6:	4411      	add	r1, r2
 80128a8:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 80128ac:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 80128b0:	430a      	orrs	r2, r1
 80128b2:	2a00      	cmp	r2, #0
 80128b4:	ee07 3a90 	vmov	s15, r3
 80128b8:	ee26 5a06 	vmul.f32	s10, s12, s12
 80128bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80128c0:	ee25 7a05 	vmul.f32	s14, s10, s10
 80128c4:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 801297c <__ieee754_logf+0x1d0>
 80128c8:	eee7 7a25 	vfma.f32	s15, s14, s11
 80128cc:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8012980 <__ieee754_logf+0x1d4>
 80128d0:	eee7 5a87 	vfma.f32	s11, s15, s14
 80128d4:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8012984 <__ieee754_logf+0x1d8>
 80128d8:	eee7 7a24 	vfma.f32	s15, s14, s9
 80128dc:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 8012988 <__ieee754_logf+0x1dc>
 80128e0:	eee7 4a87 	vfma.f32	s9, s15, s14
 80128e4:	eddf 7a29 	vldr	s15, [pc, #164]	@ 801298c <__ieee754_logf+0x1e0>
 80128e8:	eee4 7a87 	vfma.f32	s15, s9, s14
 80128ec:	ee67 7a85 	vmul.f32	s15, s15, s10
 80128f0:	eee5 7a87 	vfma.f32	s15, s11, s14
 80128f4:	dd1a      	ble.n	801292c <__ieee754_logf+0x180>
 80128f6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80128fa:	ee20 7a07 	vmul.f32	s14, s0, s14
 80128fe:	ee27 7a00 	vmul.f32	s14, s14, s0
 8012902:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012906:	ee67 7a86 	vmul.f32	s15, s15, s12
 801290a:	b913      	cbnz	r3, 8012912 <__ieee754_logf+0x166>
 801290c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012910:	e7ac      	b.n	801286c <__ieee754_logf+0xc0>
 8012912:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8012964 <__ieee754_logf+0x1b8>
 8012916:	eee6 7a86 	vfma.f32	s15, s13, s12
 801291a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801291e:	ee37 0a40 	vsub.f32	s0, s14, s0
 8012922:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8012968 <__ieee754_logf+0x1bc>
 8012926:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 801292a:	4770      	bx	lr
 801292c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012930:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012934:	b913      	cbnz	r3, 801293c <__ieee754_logf+0x190>
 8012936:	ee30 0a67 	vsub.f32	s0, s0, s15
 801293a:	4770      	bx	lr
 801293c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8012964 <__ieee754_logf+0x1b8>
 8012940:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8012944:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8012948:	e7eb      	b.n	8012922 <__ieee754_logf+0x176>
 801294a:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8012954 <__ieee754_logf+0x1a8>
 801294e:	4770      	bx	lr
 8012950:	cc000000 	.word	0xcc000000
 8012954:	00000000 	.word	0x00000000
 8012958:	4c000000 	.word	0x4c000000
 801295c:	004afb20 	.word	0x004afb20
 8012960:	007ffff0 	.word	0x007ffff0
 8012964:	3717f7d1 	.word	0x3717f7d1
 8012968:	3f317180 	.word	0x3f317180
 801296c:	3eaaaaab 	.word	0x3eaaaaab
 8012970:	3e1cd04f 	.word	0x3e1cd04f
 8012974:	3e178897 	.word	0x3e178897
 8012978:	ffcf5c30 	.word	0xffcf5c30
 801297c:	3e638e29 	.word	0x3e638e29
 8012980:	3ecccccd 	.word	0x3ecccccd
 8012984:	3e3a3325 	.word	0x3e3a3325
 8012988:	3e924925 	.word	0x3e924925
 801298c:	3f2aaaab 	.word	0x3f2aaaab

08012990 <__ieee754_rem_pio2f>:
 8012990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012992:	ee10 6a10 	vmov	r6, s0
 8012996:	4b88      	ldr	r3, [pc, #544]	@ (8012bb8 <__ieee754_rem_pio2f+0x228>)
 8012998:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 801299c:	429d      	cmp	r5, r3
 801299e:	b087      	sub	sp, #28
 80129a0:	4604      	mov	r4, r0
 80129a2:	d805      	bhi.n	80129b0 <__ieee754_rem_pio2f+0x20>
 80129a4:	2300      	movs	r3, #0
 80129a6:	ed80 0a00 	vstr	s0, [r0]
 80129aa:	6043      	str	r3, [r0, #4]
 80129ac:	2000      	movs	r0, #0
 80129ae:	e022      	b.n	80129f6 <__ieee754_rem_pio2f+0x66>
 80129b0:	4b82      	ldr	r3, [pc, #520]	@ (8012bbc <__ieee754_rem_pio2f+0x22c>)
 80129b2:	429d      	cmp	r5, r3
 80129b4:	d83a      	bhi.n	8012a2c <__ieee754_rem_pio2f+0x9c>
 80129b6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80129ba:	2e00      	cmp	r6, #0
 80129bc:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8012bc0 <__ieee754_rem_pio2f+0x230>
 80129c0:	4a80      	ldr	r2, [pc, #512]	@ (8012bc4 <__ieee754_rem_pio2f+0x234>)
 80129c2:	f023 030f 	bic.w	r3, r3, #15
 80129c6:	dd18      	ble.n	80129fa <__ieee754_rem_pio2f+0x6a>
 80129c8:	4293      	cmp	r3, r2
 80129ca:	ee70 7a47 	vsub.f32	s15, s0, s14
 80129ce:	bf09      	itett	eq
 80129d0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8012bc8 <__ieee754_rem_pio2f+0x238>
 80129d4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8012bcc <__ieee754_rem_pio2f+0x23c>
 80129d8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8012bd0 <__ieee754_rem_pio2f+0x240>
 80129dc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80129e0:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80129e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80129e8:	ed80 7a00 	vstr	s14, [r0]
 80129ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80129f0:	edc0 7a01 	vstr	s15, [r0, #4]
 80129f4:	2001      	movs	r0, #1
 80129f6:	b007      	add	sp, #28
 80129f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129fa:	4293      	cmp	r3, r2
 80129fc:	ee70 7a07 	vadd.f32	s15, s0, s14
 8012a00:	bf09      	itett	eq
 8012a02:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8012bc8 <__ieee754_rem_pio2f+0x238>
 8012a06:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8012bcc <__ieee754_rem_pio2f+0x23c>
 8012a0a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8012bd0 <__ieee754_rem_pio2f+0x240>
 8012a0e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8012a12:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012a16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012a1a:	ed80 7a00 	vstr	s14, [r0]
 8012a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012a22:	edc0 7a01 	vstr	s15, [r0, #4]
 8012a26:	f04f 30ff 	mov.w	r0, #4294967295
 8012a2a:	e7e4      	b.n	80129f6 <__ieee754_rem_pio2f+0x66>
 8012a2c:	4b69      	ldr	r3, [pc, #420]	@ (8012bd4 <__ieee754_rem_pio2f+0x244>)
 8012a2e:	429d      	cmp	r5, r3
 8012a30:	d873      	bhi.n	8012b1a <__ieee754_rem_pio2f+0x18a>
 8012a32:	f000 f8dd 	bl	8012bf0 <fabsf>
 8012a36:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8012bd8 <__ieee754_rem_pio2f+0x248>
 8012a3a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012a3e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012a42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012a46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012a4a:	ee17 0a90 	vmov	r0, s15
 8012a4e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8012bc0 <__ieee754_rem_pio2f+0x230>
 8012a52:	eea7 0a67 	vfms.f32	s0, s14, s15
 8012a56:	281f      	cmp	r0, #31
 8012a58:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8012bcc <__ieee754_rem_pio2f+0x23c>
 8012a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012a60:	eeb1 6a47 	vneg.f32	s12, s14
 8012a64:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012a68:	ee16 1a90 	vmov	r1, s13
 8012a6c:	dc09      	bgt.n	8012a82 <__ieee754_rem_pio2f+0xf2>
 8012a6e:	4a5b      	ldr	r2, [pc, #364]	@ (8012bdc <__ieee754_rem_pio2f+0x24c>)
 8012a70:	1e47      	subs	r7, r0, #1
 8012a72:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8012a76:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8012a7a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8012a7e:	4293      	cmp	r3, r2
 8012a80:	d107      	bne.n	8012a92 <__ieee754_rem_pio2f+0x102>
 8012a82:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8012a86:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8012a8a:	2a08      	cmp	r2, #8
 8012a8c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8012a90:	dc14      	bgt.n	8012abc <__ieee754_rem_pio2f+0x12c>
 8012a92:	6021      	str	r1, [r4, #0]
 8012a94:	ed94 7a00 	vldr	s14, [r4]
 8012a98:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012a9c:	2e00      	cmp	r6, #0
 8012a9e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012aa2:	ed84 0a01 	vstr	s0, [r4, #4]
 8012aa6:	daa6      	bge.n	80129f6 <__ieee754_rem_pio2f+0x66>
 8012aa8:	eeb1 7a47 	vneg.f32	s14, s14
 8012aac:	eeb1 0a40 	vneg.f32	s0, s0
 8012ab0:	ed84 7a00 	vstr	s14, [r4]
 8012ab4:	ed84 0a01 	vstr	s0, [r4, #4]
 8012ab8:	4240      	negs	r0, r0
 8012aba:	e79c      	b.n	80129f6 <__ieee754_rem_pio2f+0x66>
 8012abc:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8012bc8 <__ieee754_rem_pio2f+0x238>
 8012ac0:	eef0 6a40 	vmov.f32	s13, s0
 8012ac4:	eee6 6a25 	vfma.f32	s13, s12, s11
 8012ac8:	ee70 7a66 	vsub.f32	s15, s0, s13
 8012acc:	eee6 7a25 	vfma.f32	s15, s12, s11
 8012ad0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8012bd0 <__ieee754_rem_pio2f+0x240>
 8012ad4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8012ad8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8012adc:	ee15 2a90 	vmov	r2, s11
 8012ae0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8012ae4:	1a5b      	subs	r3, r3, r1
 8012ae6:	2b19      	cmp	r3, #25
 8012ae8:	dc04      	bgt.n	8012af4 <__ieee754_rem_pio2f+0x164>
 8012aea:	edc4 5a00 	vstr	s11, [r4]
 8012aee:	eeb0 0a66 	vmov.f32	s0, s13
 8012af2:	e7cf      	b.n	8012a94 <__ieee754_rem_pio2f+0x104>
 8012af4:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8012be0 <__ieee754_rem_pio2f+0x250>
 8012af8:	eeb0 0a66 	vmov.f32	s0, s13
 8012afc:	eea6 0a25 	vfma.f32	s0, s12, s11
 8012b00:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8012b04:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8012be4 <__ieee754_rem_pio2f+0x254>
 8012b08:	eee6 7a25 	vfma.f32	s15, s12, s11
 8012b0c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8012b10:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012b14:	ed84 7a00 	vstr	s14, [r4]
 8012b18:	e7bc      	b.n	8012a94 <__ieee754_rem_pio2f+0x104>
 8012b1a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8012b1e:	d306      	bcc.n	8012b2e <__ieee754_rem_pio2f+0x19e>
 8012b20:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012b24:	edc0 7a01 	vstr	s15, [r0, #4]
 8012b28:	edc0 7a00 	vstr	s15, [r0]
 8012b2c:	e73e      	b.n	80129ac <__ieee754_rem_pio2f+0x1c>
 8012b2e:	15ea      	asrs	r2, r5, #23
 8012b30:	3a86      	subs	r2, #134	@ 0x86
 8012b32:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8012b36:	ee07 3a90 	vmov	s15, r3
 8012b3a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012b3e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8012be8 <__ieee754_rem_pio2f+0x258>
 8012b42:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012b46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012b4a:	ed8d 7a03 	vstr	s14, [sp, #12]
 8012b4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012b52:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012b56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012b5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012b5e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8012b62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012b66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b6e:	edcd 7a05 	vstr	s15, [sp, #20]
 8012b72:	d11e      	bne.n	8012bb2 <__ieee754_rem_pio2f+0x222>
 8012b74:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b7c:	bf0c      	ite	eq
 8012b7e:	2301      	moveq	r3, #1
 8012b80:	2302      	movne	r3, #2
 8012b82:	491a      	ldr	r1, [pc, #104]	@ (8012bec <__ieee754_rem_pio2f+0x25c>)
 8012b84:	9101      	str	r1, [sp, #4]
 8012b86:	2102      	movs	r1, #2
 8012b88:	9100      	str	r1, [sp, #0]
 8012b8a:	a803      	add	r0, sp, #12
 8012b8c:	4621      	mov	r1, r4
 8012b8e:	f000 f837 	bl	8012c00 <__kernel_rem_pio2f>
 8012b92:	2e00      	cmp	r6, #0
 8012b94:	f6bf af2f 	bge.w	80129f6 <__ieee754_rem_pio2f+0x66>
 8012b98:	edd4 7a00 	vldr	s15, [r4]
 8012b9c:	eef1 7a67 	vneg.f32	s15, s15
 8012ba0:	edc4 7a00 	vstr	s15, [r4]
 8012ba4:	edd4 7a01 	vldr	s15, [r4, #4]
 8012ba8:	eef1 7a67 	vneg.f32	s15, s15
 8012bac:	edc4 7a01 	vstr	s15, [r4, #4]
 8012bb0:	e782      	b.n	8012ab8 <__ieee754_rem_pio2f+0x128>
 8012bb2:	2303      	movs	r3, #3
 8012bb4:	e7e5      	b.n	8012b82 <__ieee754_rem_pio2f+0x1f2>
 8012bb6:	bf00      	nop
 8012bb8:	3f490fd8 	.word	0x3f490fd8
 8012bbc:	4016cbe3 	.word	0x4016cbe3
 8012bc0:	3fc90f80 	.word	0x3fc90f80
 8012bc4:	3fc90fd0 	.word	0x3fc90fd0
 8012bc8:	37354400 	.word	0x37354400
 8012bcc:	37354443 	.word	0x37354443
 8012bd0:	2e85a308 	.word	0x2e85a308
 8012bd4:	43490f80 	.word	0x43490f80
 8012bd8:	3f22f984 	.word	0x3f22f984
 8012bdc:	080295a4 	.word	0x080295a4
 8012be0:	2e85a300 	.word	0x2e85a300
 8012be4:	248d3132 	.word	0x248d3132
 8012be8:	43800000 	.word	0x43800000
 8012bec:	08029624 	.word	0x08029624

08012bf0 <fabsf>:
 8012bf0:	ee10 3a10 	vmov	r3, s0
 8012bf4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012bf8:	ee00 3a10 	vmov	s0, r3
 8012bfc:	4770      	bx	lr
	...

08012c00 <__kernel_rem_pio2f>:
 8012c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c04:	ed2d 8b04 	vpush	{d8-d9}
 8012c08:	b0d9      	sub	sp, #356	@ 0x164
 8012c0a:	4690      	mov	r8, r2
 8012c0c:	9001      	str	r0, [sp, #4]
 8012c0e:	4ab6      	ldr	r2, [pc, #728]	@ (8012ee8 <__kernel_rem_pio2f+0x2e8>)
 8012c10:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8012c12:	f118 0f04 	cmn.w	r8, #4
 8012c16:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8012c1a:	460f      	mov	r7, r1
 8012c1c:	f103 3bff 	add.w	fp, r3, #4294967295
 8012c20:	db26      	blt.n	8012c70 <__kernel_rem_pio2f+0x70>
 8012c22:	f1b8 0203 	subs.w	r2, r8, #3
 8012c26:	bf48      	it	mi
 8012c28:	f108 0204 	addmi.w	r2, r8, #4
 8012c2c:	10d2      	asrs	r2, r2, #3
 8012c2e:	1c55      	adds	r5, r2, #1
 8012c30:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8012c32:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8012ef8 <__kernel_rem_pio2f+0x2f8>
 8012c36:	00e8      	lsls	r0, r5, #3
 8012c38:	eba2 060b 	sub.w	r6, r2, fp
 8012c3c:	9002      	str	r0, [sp, #8]
 8012c3e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8012c42:	eb0a 0c0b 	add.w	ip, sl, fp
 8012c46:	ac1c      	add	r4, sp, #112	@ 0x70
 8012c48:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8012c4c:	2000      	movs	r0, #0
 8012c4e:	4560      	cmp	r0, ip
 8012c50:	dd10      	ble.n	8012c74 <__kernel_rem_pio2f+0x74>
 8012c52:	a91c      	add	r1, sp, #112	@ 0x70
 8012c54:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8012c58:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8012c5c:	2600      	movs	r6, #0
 8012c5e:	4556      	cmp	r6, sl
 8012c60:	dc24      	bgt.n	8012cac <__kernel_rem_pio2f+0xac>
 8012c62:	f8dd e004 	ldr.w	lr, [sp, #4]
 8012c66:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8012ef8 <__kernel_rem_pio2f+0x2f8>
 8012c6a:	4684      	mov	ip, r0
 8012c6c:	2400      	movs	r4, #0
 8012c6e:	e016      	b.n	8012c9e <__kernel_rem_pio2f+0x9e>
 8012c70:	2200      	movs	r2, #0
 8012c72:	e7dc      	b.n	8012c2e <__kernel_rem_pio2f+0x2e>
 8012c74:	42c6      	cmn	r6, r0
 8012c76:	bf5d      	ittte	pl
 8012c78:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8012c7c:	ee07 1a90 	vmovpl	s15, r1
 8012c80:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8012c84:	eef0 7a47 	vmovmi.f32	s15, s14
 8012c88:	ece4 7a01 	vstmia	r4!, {s15}
 8012c8c:	3001      	adds	r0, #1
 8012c8e:	e7de      	b.n	8012c4e <__kernel_rem_pio2f+0x4e>
 8012c90:	ecfe 6a01 	vldmia	lr!, {s13}
 8012c94:	ed3c 7a01 	vldmdb	ip!, {s14}
 8012c98:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012c9c:	3401      	adds	r4, #1
 8012c9e:	455c      	cmp	r4, fp
 8012ca0:	ddf6      	ble.n	8012c90 <__kernel_rem_pio2f+0x90>
 8012ca2:	ece9 7a01 	vstmia	r9!, {s15}
 8012ca6:	3601      	adds	r6, #1
 8012ca8:	3004      	adds	r0, #4
 8012caa:	e7d8      	b.n	8012c5e <__kernel_rem_pio2f+0x5e>
 8012cac:	a908      	add	r1, sp, #32
 8012cae:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012cb2:	9104      	str	r1, [sp, #16]
 8012cb4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8012cb6:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8012ef4 <__kernel_rem_pio2f+0x2f4>
 8012cba:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8012ef0 <__kernel_rem_pio2f+0x2f0>
 8012cbe:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8012cc2:	9203      	str	r2, [sp, #12]
 8012cc4:	4654      	mov	r4, sl
 8012cc6:	00a2      	lsls	r2, r4, #2
 8012cc8:	9205      	str	r2, [sp, #20]
 8012cca:	aa58      	add	r2, sp, #352	@ 0x160
 8012ccc:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8012cd0:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8012cd4:	a944      	add	r1, sp, #272	@ 0x110
 8012cd6:	aa08      	add	r2, sp, #32
 8012cd8:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8012cdc:	4694      	mov	ip, r2
 8012cde:	4626      	mov	r6, r4
 8012ce0:	2e00      	cmp	r6, #0
 8012ce2:	dc4c      	bgt.n	8012d7e <__kernel_rem_pio2f+0x17e>
 8012ce4:	4628      	mov	r0, r5
 8012ce6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012cea:	f000 f9f1 	bl	80130d0 <scalbnf>
 8012cee:	eeb0 8a40 	vmov.f32	s16, s0
 8012cf2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8012cf6:	ee28 0a00 	vmul.f32	s0, s16, s0
 8012cfa:	f000 fa4f 	bl	801319c <floorf>
 8012cfe:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8012d02:	eea0 8a67 	vfms.f32	s16, s0, s15
 8012d06:	2d00      	cmp	r5, #0
 8012d08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012d0c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8012d10:	ee17 9a90 	vmov	r9, s15
 8012d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012d18:	ee38 8a67 	vsub.f32	s16, s16, s15
 8012d1c:	dd41      	ble.n	8012da2 <__kernel_rem_pio2f+0x1a2>
 8012d1e:	f104 3cff 	add.w	ip, r4, #4294967295
 8012d22:	a908      	add	r1, sp, #32
 8012d24:	f1c5 0e08 	rsb	lr, r5, #8
 8012d28:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8012d2c:	fa46 f00e 	asr.w	r0, r6, lr
 8012d30:	4481      	add	r9, r0
 8012d32:	fa00 f00e 	lsl.w	r0, r0, lr
 8012d36:	1a36      	subs	r6, r6, r0
 8012d38:	f1c5 0007 	rsb	r0, r5, #7
 8012d3c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8012d40:	4106      	asrs	r6, r0
 8012d42:	2e00      	cmp	r6, #0
 8012d44:	dd3c      	ble.n	8012dc0 <__kernel_rem_pio2f+0x1c0>
 8012d46:	f04f 0e00 	mov.w	lr, #0
 8012d4a:	f109 0901 	add.w	r9, r9, #1
 8012d4e:	4670      	mov	r0, lr
 8012d50:	4574      	cmp	r4, lr
 8012d52:	dc68      	bgt.n	8012e26 <__kernel_rem_pio2f+0x226>
 8012d54:	2d00      	cmp	r5, #0
 8012d56:	dd03      	ble.n	8012d60 <__kernel_rem_pio2f+0x160>
 8012d58:	2d01      	cmp	r5, #1
 8012d5a:	d074      	beq.n	8012e46 <__kernel_rem_pio2f+0x246>
 8012d5c:	2d02      	cmp	r5, #2
 8012d5e:	d07d      	beq.n	8012e5c <__kernel_rem_pio2f+0x25c>
 8012d60:	2e02      	cmp	r6, #2
 8012d62:	d12d      	bne.n	8012dc0 <__kernel_rem_pio2f+0x1c0>
 8012d64:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012d68:	ee30 8a48 	vsub.f32	s16, s0, s16
 8012d6c:	b340      	cbz	r0, 8012dc0 <__kernel_rem_pio2f+0x1c0>
 8012d6e:	4628      	mov	r0, r5
 8012d70:	9306      	str	r3, [sp, #24]
 8012d72:	f000 f9ad 	bl	80130d0 <scalbnf>
 8012d76:	9b06      	ldr	r3, [sp, #24]
 8012d78:	ee38 8a40 	vsub.f32	s16, s16, s0
 8012d7c:	e020      	b.n	8012dc0 <__kernel_rem_pio2f+0x1c0>
 8012d7e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8012d82:	3e01      	subs	r6, #1
 8012d84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012d8c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8012d90:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012d94:	ecac 0a01 	vstmia	ip!, {s0}
 8012d98:	ed30 0a01 	vldmdb	r0!, {s0}
 8012d9c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8012da0:	e79e      	b.n	8012ce0 <__kernel_rem_pio2f+0xe0>
 8012da2:	d105      	bne.n	8012db0 <__kernel_rem_pio2f+0x1b0>
 8012da4:	1e60      	subs	r0, r4, #1
 8012da6:	a908      	add	r1, sp, #32
 8012da8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8012dac:	11f6      	asrs	r6, r6, #7
 8012dae:	e7c8      	b.n	8012d42 <__kernel_rem_pio2f+0x142>
 8012db0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012db4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dbc:	da31      	bge.n	8012e22 <__kernel_rem_pio2f+0x222>
 8012dbe:	2600      	movs	r6, #0
 8012dc0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dc8:	f040 8098 	bne.w	8012efc <__kernel_rem_pio2f+0x2fc>
 8012dcc:	1e60      	subs	r0, r4, #1
 8012dce:	2200      	movs	r2, #0
 8012dd0:	4550      	cmp	r0, sl
 8012dd2:	da4b      	bge.n	8012e6c <__kernel_rem_pio2f+0x26c>
 8012dd4:	2a00      	cmp	r2, #0
 8012dd6:	d065      	beq.n	8012ea4 <__kernel_rem_pio2f+0x2a4>
 8012dd8:	3c01      	subs	r4, #1
 8012dda:	ab08      	add	r3, sp, #32
 8012ddc:	3d08      	subs	r5, #8
 8012dde:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d0f8      	beq.n	8012dd8 <__kernel_rem_pio2f+0x1d8>
 8012de6:	4628      	mov	r0, r5
 8012de8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012dec:	f000 f970 	bl	80130d0 <scalbnf>
 8012df0:	1c63      	adds	r3, r4, #1
 8012df2:	aa44      	add	r2, sp, #272	@ 0x110
 8012df4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8012ef4 <__kernel_rem_pio2f+0x2f4>
 8012df8:	0099      	lsls	r1, r3, #2
 8012dfa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012dfe:	4623      	mov	r3, r4
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	f280 80a9 	bge.w	8012f58 <__kernel_rem_pio2f+0x358>
 8012e06:	4623      	mov	r3, r4
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	f2c0 80c7 	blt.w	8012f9c <__kernel_rem_pio2f+0x39c>
 8012e0e:	aa44      	add	r2, sp, #272	@ 0x110
 8012e10:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8012e14:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8012eec <__kernel_rem_pio2f+0x2ec>
 8012e18:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8012ef8 <__kernel_rem_pio2f+0x2f8>
 8012e1c:	2000      	movs	r0, #0
 8012e1e:	1ae2      	subs	r2, r4, r3
 8012e20:	e0b1      	b.n	8012f86 <__kernel_rem_pio2f+0x386>
 8012e22:	2602      	movs	r6, #2
 8012e24:	e78f      	b.n	8012d46 <__kernel_rem_pio2f+0x146>
 8012e26:	f852 1b04 	ldr.w	r1, [r2], #4
 8012e2a:	b948      	cbnz	r0, 8012e40 <__kernel_rem_pio2f+0x240>
 8012e2c:	b121      	cbz	r1, 8012e38 <__kernel_rem_pio2f+0x238>
 8012e2e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8012e32:	f842 1c04 	str.w	r1, [r2, #-4]
 8012e36:	2101      	movs	r1, #1
 8012e38:	f10e 0e01 	add.w	lr, lr, #1
 8012e3c:	4608      	mov	r0, r1
 8012e3e:	e787      	b.n	8012d50 <__kernel_rem_pio2f+0x150>
 8012e40:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8012e44:	e7f5      	b.n	8012e32 <__kernel_rem_pio2f+0x232>
 8012e46:	f104 3cff 	add.w	ip, r4, #4294967295
 8012e4a:	aa08      	add	r2, sp, #32
 8012e4c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8012e50:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8012e54:	a908      	add	r1, sp, #32
 8012e56:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8012e5a:	e781      	b.n	8012d60 <__kernel_rem_pio2f+0x160>
 8012e5c:	f104 3cff 	add.w	ip, r4, #4294967295
 8012e60:	aa08      	add	r2, sp, #32
 8012e62:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8012e66:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8012e6a:	e7f3      	b.n	8012e54 <__kernel_rem_pio2f+0x254>
 8012e6c:	a908      	add	r1, sp, #32
 8012e6e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8012e72:	3801      	subs	r0, #1
 8012e74:	430a      	orrs	r2, r1
 8012e76:	e7ab      	b.n	8012dd0 <__kernel_rem_pio2f+0x1d0>
 8012e78:	3201      	adds	r2, #1
 8012e7a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8012e7e:	2e00      	cmp	r6, #0
 8012e80:	d0fa      	beq.n	8012e78 <__kernel_rem_pio2f+0x278>
 8012e82:	9905      	ldr	r1, [sp, #20]
 8012e84:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8012e88:	eb0d 0001 	add.w	r0, sp, r1
 8012e8c:	18e6      	adds	r6, r4, r3
 8012e8e:	a91c      	add	r1, sp, #112	@ 0x70
 8012e90:	f104 0c01 	add.w	ip, r4, #1
 8012e94:	384c      	subs	r0, #76	@ 0x4c
 8012e96:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8012e9a:	4422      	add	r2, r4
 8012e9c:	4562      	cmp	r2, ip
 8012e9e:	da04      	bge.n	8012eaa <__kernel_rem_pio2f+0x2aa>
 8012ea0:	4614      	mov	r4, r2
 8012ea2:	e710      	b.n	8012cc6 <__kernel_rem_pio2f+0xc6>
 8012ea4:	9804      	ldr	r0, [sp, #16]
 8012ea6:	2201      	movs	r2, #1
 8012ea8:	e7e7      	b.n	8012e7a <__kernel_rem_pio2f+0x27a>
 8012eaa:	9903      	ldr	r1, [sp, #12]
 8012eac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8012eb0:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8012eb4:	9105      	str	r1, [sp, #20]
 8012eb6:	ee07 1a90 	vmov	s15, r1
 8012eba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012ebe:	2400      	movs	r4, #0
 8012ec0:	ece6 7a01 	vstmia	r6!, {s15}
 8012ec4:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8012ef8 <__kernel_rem_pio2f+0x2f8>
 8012ec8:	46b1      	mov	r9, r6
 8012eca:	455c      	cmp	r4, fp
 8012ecc:	dd04      	ble.n	8012ed8 <__kernel_rem_pio2f+0x2d8>
 8012ece:	ece0 7a01 	vstmia	r0!, {s15}
 8012ed2:	f10c 0c01 	add.w	ip, ip, #1
 8012ed6:	e7e1      	b.n	8012e9c <__kernel_rem_pio2f+0x29c>
 8012ed8:	ecfe 6a01 	vldmia	lr!, {s13}
 8012edc:	ed39 7a01 	vldmdb	r9!, {s14}
 8012ee0:	3401      	adds	r4, #1
 8012ee2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012ee6:	e7f0      	b.n	8012eca <__kernel_rem_pio2f+0x2ca>
 8012ee8:	08029968 	.word	0x08029968
 8012eec:	0802993c 	.word	0x0802993c
 8012ef0:	43800000 	.word	0x43800000
 8012ef4:	3b800000 	.word	0x3b800000
 8012ef8:	00000000 	.word	0x00000000
 8012efc:	9b02      	ldr	r3, [sp, #8]
 8012efe:	eeb0 0a48 	vmov.f32	s0, s16
 8012f02:	eba3 0008 	sub.w	r0, r3, r8
 8012f06:	f000 f8e3 	bl	80130d0 <scalbnf>
 8012f0a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8012ef0 <__kernel_rem_pio2f+0x2f0>
 8012f0e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8012f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f16:	db19      	blt.n	8012f4c <__kernel_rem_pio2f+0x34c>
 8012f18:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8012ef4 <__kernel_rem_pio2f+0x2f4>
 8012f1c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012f20:	aa08      	add	r2, sp, #32
 8012f22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012f26:	3508      	adds	r5, #8
 8012f28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012f2c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8012f30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012f34:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012f38:	ee10 3a10 	vmov	r3, s0
 8012f3c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012f40:	ee17 3a90 	vmov	r3, s15
 8012f44:	3401      	adds	r4, #1
 8012f46:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012f4a:	e74c      	b.n	8012de6 <__kernel_rem_pio2f+0x1e6>
 8012f4c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012f50:	aa08      	add	r2, sp, #32
 8012f52:	ee10 3a10 	vmov	r3, s0
 8012f56:	e7f6      	b.n	8012f46 <__kernel_rem_pio2f+0x346>
 8012f58:	a808      	add	r0, sp, #32
 8012f5a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8012f5e:	9001      	str	r0, [sp, #4]
 8012f60:	ee07 0a90 	vmov	s15, r0
 8012f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012f68:	3b01      	subs	r3, #1
 8012f6a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012f6e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8012f72:	ed62 7a01 	vstmdb	r2!, {s15}
 8012f76:	e743      	b.n	8012e00 <__kernel_rem_pio2f+0x200>
 8012f78:	ecfc 6a01 	vldmia	ip!, {s13}
 8012f7c:	ecb5 7a01 	vldmia	r5!, {s14}
 8012f80:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012f84:	3001      	adds	r0, #1
 8012f86:	4550      	cmp	r0, sl
 8012f88:	dc01      	bgt.n	8012f8e <__kernel_rem_pio2f+0x38e>
 8012f8a:	4290      	cmp	r0, r2
 8012f8c:	ddf4      	ble.n	8012f78 <__kernel_rem_pio2f+0x378>
 8012f8e:	a858      	add	r0, sp, #352	@ 0x160
 8012f90:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8012f94:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8012f98:	3b01      	subs	r3, #1
 8012f9a:	e735      	b.n	8012e08 <__kernel_rem_pio2f+0x208>
 8012f9c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8012f9e:	2b02      	cmp	r3, #2
 8012fa0:	dc09      	bgt.n	8012fb6 <__kernel_rem_pio2f+0x3b6>
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	dc27      	bgt.n	8012ff6 <__kernel_rem_pio2f+0x3f6>
 8012fa6:	d040      	beq.n	801302a <__kernel_rem_pio2f+0x42a>
 8012fa8:	f009 0007 	and.w	r0, r9, #7
 8012fac:	b059      	add	sp, #356	@ 0x164
 8012fae:	ecbd 8b04 	vpop	{d8-d9}
 8012fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fb6:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8012fb8:	2b03      	cmp	r3, #3
 8012fba:	d1f5      	bne.n	8012fa8 <__kernel_rem_pio2f+0x3a8>
 8012fbc:	aa30      	add	r2, sp, #192	@ 0xc0
 8012fbe:	1f0b      	subs	r3, r1, #4
 8012fc0:	4413      	add	r3, r2
 8012fc2:	461a      	mov	r2, r3
 8012fc4:	4620      	mov	r0, r4
 8012fc6:	2800      	cmp	r0, #0
 8012fc8:	dc50      	bgt.n	801306c <__kernel_rem_pio2f+0x46c>
 8012fca:	4622      	mov	r2, r4
 8012fcc:	2a01      	cmp	r2, #1
 8012fce:	dc5d      	bgt.n	801308c <__kernel_rem_pio2f+0x48c>
 8012fd0:	ab30      	add	r3, sp, #192	@ 0xc0
 8012fd2:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8012ef8 <__kernel_rem_pio2f+0x2f8>
 8012fd6:	440b      	add	r3, r1
 8012fd8:	2c01      	cmp	r4, #1
 8012fda:	dc67      	bgt.n	80130ac <__kernel_rem_pio2f+0x4ac>
 8012fdc:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8012fe0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8012fe4:	2e00      	cmp	r6, #0
 8012fe6:	d167      	bne.n	80130b8 <__kernel_rem_pio2f+0x4b8>
 8012fe8:	edc7 6a00 	vstr	s13, [r7]
 8012fec:	ed87 7a01 	vstr	s14, [r7, #4]
 8012ff0:	edc7 7a02 	vstr	s15, [r7, #8]
 8012ff4:	e7d8      	b.n	8012fa8 <__kernel_rem_pio2f+0x3a8>
 8012ff6:	ab30      	add	r3, sp, #192	@ 0xc0
 8012ff8:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8012ef8 <__kernel_rem_pio2f+0x2f8>
 8012ffc:	440b      	add	r3, r1
 8012ffe:	4622      	mov	r2, r4
 8013000:	2a00      	cmp	r2, #0
 8013002:	da24      	bge.n	801304e <__kernel_rem_pio2f+0x44e>
 8013004:	b34e      	cbz	r6, 801305a <__kernel_rem_pio2f+0x45a>
 8013006:	eef1 7a47 	vneg.f32	s15, s14
 801300a:	edc7 7a00 	vstr	s15, [r7]
 801300e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8013012:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013016:	aa31      	add	r2, sp, #196	@ 0xc4
 8013018:	2301      	movs	r3, #1
 801301a:	429c      	cmp	r4, r3
 801301c:	da20      	bge.n	8013060 <__kernel_rem_pio2f+0x460>
 801301e:	b10e      	cbz	r6, 8013024 <__kernel_rem_pio2f+0x424>
 8013020:	eef1 7a67 	vneg.f32	s15, s15
 8013024:	edc7 7a01 	vstr	s15, [r7, #4]
 8013028:	e7be      	b.n	8012fa8 <__kernel_rem_pio2f+0x3a8>
 801302a:	ab30      	add	r3, sp, #192	@ 0xc0
 801302c:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8012ef8 <__kernel_rem_pio2f+0x2f8>
 8013030:	440b      	add	r3, r1
 8013032:	2c00      	cmp	r4, #0
 8013034:	da05      	bge.n	8013042 <__kernel_rem_pio2f+0x442>
 8013036:	b10e      	cbz	r6, 801303c <__kernel_rem_pio2f+0x43c>
 8013038:	eef1 7a67 	vneg.f32	s15, s15
 801303c:	edc7 7a00 	vstr	s15, [r7]
 8013040:	e7b2      	b.n	8012fa8 <__kernel_rem_pio2f+0x3a8>
 8013042:	ed33 7a01 	vldmdb	r3!, {s14}
 8013046:	3c01      	subs	r4, #1
 8013048:	ee77 7a87 	vadd.f32	s15, s15, s14
 801304c:	e7f1      	b.n	8013032 <__kernel_rem_pio2f+0x432>
 801304e:	ed73 7a01 	vldmdb	r3!, {s15}
 8013052:	3a01      	subs	r2, #1
 8013054:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013058:	e7d2      	b.n	8013000 <__kernel_rem_pio2f+0x400>
 801305a:	eef0 7a47 	vmov.f32	s15, s14
 801305e:	e7d4      	b.n	801300a <__kernel_rem_pio2f+0x40a>
 8013060:	ecb2 7a01 	vldmia	r2!, {s14}
 8013064:	3301      	adds	r3, #1
 8013066:	ee77 7a87 	vadd.f32	s15, s15, s14
 801306a:	e7d6      	b.n	801301a <__kernel_rem_pio2f+0x41a>
 801306c:	ed72 7a01 	vldmdb	r2!, {s15}
 8013070:	edd2 6a01 	vldr	s13, [r2, #4]
 8013074:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013078:	3801      	subs	r0, #1
 801307a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801307e:	ed82 7a00 	vstr	s14, [r2]
 8013082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013086:	edc2 7a01 	vstr	s15, [r2, #4]
 801308a:	e79c      	b.n	8012fc6 <__kernel_rem_pio2f+0x3c6>
 801308c:	ed73 7a01 	vldmdb	r3!, {s15}
 8013090:	edd3 6a01 	vldr	s13, [r3, #4]
 8013094:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013098:	3a01      	subs	r2, #1
 801309a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801309e:	ed83 7a00 	vstr	s14, [r3]
 80130a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80130a6:	edc3 7a01 	vstr	s15, [r3, #4]
 80130aa:	e78f      	b.n	8012fcc <__kernel_rem_pio2f+0x3cc>
 80130ac:	ed33 7a01 	vldmdb	r3!, {s14}
 80130b0:	3c01      	subs	r4, #1
 80130b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80130b6:	e78f      	b.n	8012fd8 <__kernel_rem_pio2f+0x3d8>
 80130b8:	eef1 6a66 	vneg.f32	s13, s13
 80130bc:	eeb1 7a47 	vneg.f32	s14, s14
 80130c0:	edc7 6a00 	vstr	s13, [r7]
 80130c4:	ed87 7a01 	vstr	s14, [r7, #4]
 80130c8:	eef1 7a67 	vneg.f32	s15, s15
 80130cc:	e790      	b.n	8012ff0 <__kernel_rem_pio2f+0x3f0>
 80130ce:	bf00      	nop

080130d0 <scalbnf>:
 80130d0:	ee10 3a10 	vmov	r3, s0
 80130d4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80130d8:	d02b      	beq.n	8013132 <scalbnf+0x62>
 80130da:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80130de:	d302      	bcc.n	80130e6 <scalbnf+0x16>
 80130e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80130e4:	4770      	bx	lr
 80130e6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80130ea:	d123      	bne.n	8013134 <scalbnf+0x64>
 80130ec:	4b24      	ldr	r3, [pc, #144]	@ (8013180 <scalbnf+0xb0>)
 80130ee:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8013184 <scalbnf+0xb4>
 80130f2:	4298      	cmp	r0, r3
 80130f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80130f8:	db17      	blt.n	801312a <scalbnf+0x5a>
 80130fa:	ee10 3a10 	vmov	r3, s0
 80130fe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013102:	3a19      	subs	r2, #25
 8013104:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8013108:	4288      	cmp	r0, r1
 801310a:	dd15      	ble.n	8013138 <scalbnf+0x68>
 801310c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8013188 <scalbnf+0xb8>
 8013110:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801318c <scalbnf+0xbc>
 8013114:	ee10 3a10 	vmov	r3, s0
 8013118:	eeb0 7a67 	vmov.f32	s14, s15
 801311c:	2b00      	cmp	r3, #0
 801311e:	bfb8      	it	lt
 8013120:	eef0 7a66 	vmovlt.f32	s15, s13
 8013124:	ee27 0a87 	vmul.f32	s0, s15, s14
 8013128:	4770      	bx	lr
 801312a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013190 <scalbnf+0xc0>
 801312e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013132:	4770      	bx	lr
 8013134:	0dd2      	lsrs	r2, r2, #23
 8013136:	e7e5      	b.n	8013104 <scalbnf+0x34>
 8013138:	4410      	add	r0, r2
 801313a:	28fe      	cmp	r0, #254	@ 0xfe
 801313c:	dce6      	bgt.n	801310c <scalbnf+0x3c>
 801313e:	2800      	cmp	r0, #0
 8013140:	dd06      	ble.n	8013150 <scalbnf+0x80>
 8013142:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013146:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801314a:	ee00 3a10 	vmov	s0, r3
 801314e:	4770      	bx	lr
 8013150:	f110 0f16 	cmn.w	r0, #22
 8013154:	da09      	bge.n	801316a <scalbnf+0x9a>
 8013156:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8013190 <scalbnf+0xc0>
 801315a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8013194 <scalbnf+0xc4>
 801315e:	ee10 3a10 	vmov	r3, s0
 8013162:	eeb0 7a67 	vmov.f32	s14, s15
 8013166:	2b00      	cmp	r3, #0
 8013168:	e7d9      	b.n	801311e <scalbnf+0x4e>
 801316a:	3019      	adds	r0, #25
 801316c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013170:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013174:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8013198 <scalbnf+0xc8>
 8013178:	ee07 3a90 	vmov	s15, r3
 801317c:	e7d7      	b.n	801312e <scalbnf+0x5e>
 801317e:	bf00      	nop
 8013180:	ffff3cb0 	.word	0xffff3cb0
 8013184:	4c000000 	.word	0x4c000000
 8013188:	7149f2ca 	.word	0x7149f2ca
 801318c:	f149f2ca 	.word	0xf149f2ca
 8013190:	0da24260 	.word	0x0da24260
 8013194:	8da24260 	.word	0x8da24260
 8013198:	33000000 	.word	0x33000000

0801319c <floorf>:
 801319c:	ee10 3a10 	vmov	r3, s0
 80131a0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80131a4:	3a7f      	subs	r2, #127	@ 0x7f
 80131a6:	2a16      	cmp	r2, #22
 80131a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80131ac:	dc2b      	bgt.n	8013206 <floorf+0x6a>
 80131ae:	2a00      	cmp	r2, #0
 80131b0:	da12      	bge.n	80131d8 <floorf+0x3c>
 80131b2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013218 <floorf+0x7c>
 80131b6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80131ba:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80131be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131c2:	dd06      	ble.n	80131d2 <floorf+0x36>
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	da24      	bge.n	8013212 <floorf+0x76>
 80131c8:	2900      	cmp	r1, #0
 80131ca:	4b14      	ldr	r3, [pc, #80]	@ (801321c <floorf+0x80>)
 80131cc:	bf08      	it	eq
 80131ce:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80131d2:	ee00 3a10 	vmov	s0, r3
 80131d6:	4770      	bx	lr
 80131d8:	4911      	ldr	r1, [pc, #68]	@ (8013220 <floorf+0x84>)
 80131da:	4111      	asrs	r1, r2
 80131dc:	420b      	tst	r3, r1
 80131de:	d0fa      	beq.n	80131d6 <floorf+0x3a>
 80131e0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8013218 <floorf+0x7c>
 80131e4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80131e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80131ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131f0:	ddef      	ble.n	80131d2 <floorf+0x36>
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	bfbe      	ittt	lt
 80131f6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80131fa:	fa40 f202 	asrlt.w	r2, r0, r2
 80131fe:	189b      	addlt	r3, r3, r2
 8013200:	ea23 0301 	bic.w	r3, r3, r1
 8013204:	e7e5      	b.n	80131d2 <floorf+0x36>
 8013206:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801320a:	d3e4      	bcc.n	80131d6 <floorf+0x3a>
 801320c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013210:	4770      	bx	lr
 8013212:	2300      	movs	r3, #0
 8013214:	e7dd      	b.n	80131d2 <floorf+0x36>
 8013216:	bf00      	nop
 8013218:	7149f2ca 	.word	0x7149f2ca
 801321c:	bf800000 	.word	0xbf800000
 8013220:	007fffff 	.word	0x007fffff

08013224 <_init>:
 8013224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013226:	bf00      	nop
 8013228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801322a:	bc08      	pop	{r3}
 801322c:	469e      	mov	lr, r3
 801322e:	4770      	bx	lr

08013230 <_fini>:
 8013230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013232:	bf00      	nop
 8013234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013236:	bc08      	pop	{r3}
 8013238:	469e      	mov	lr, r3
 801323a:	4770      	bx	lr
